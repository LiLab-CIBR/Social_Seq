{"config":{"indexing":"full","lang":["en","zh"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"figure_reproduce/","text":"\u8bba\u6587\u4ee3\u7801\u590d\u73b0 \"(2025) Decoding the Valence of Developmental Social Behavior: Dopamine Governs Social Motivation Deficits in Autism. In preparation\" \u4f5c\u8005 : \u9648\u6615\u67ab, 2025-08-09 \u4fee\u6539 : \u9676\u73b0\u660e\uff0c2025-08-15 Figures \u56fe\u5e93 \u8fd0\u884c\u6b64\u4ed3\u5e93\u4e2d\u7684\u4ee3\u7801\u4ee5\u590d\u73b0\u8bba\u6587\u4e2d\u7684\u56fe\u8868\u3002 \u4ee3\u7801\u548c\u6570\u636e\u4e0b\u8f7d \u6570\u636e\u548c\u4ee3\u7801\u5df2\u5f00\u6e90\uff0c\u94fe\u63a5\u4e3a Figshare_DATA_20250818.zip ( ~1.0 GB )\u3002 \u4e0b\u8f7d\u540e\u89e3\u538b\u5230\u6587\u4ef6\u5939\uff0c\u547d\u540d\u4e3a Figshare \u3002 \u5b89\u88c5 \u652f\u6301 Windows\u3001Linux \u548c MacOS \u7cfb\u7edf\u3002 \u9996\u5148\uff0c\u901a\u8fc7 uv \u5de5\u5177 \u5b89\u88c5\u4f9d\u8d56\u73af\u5883 \u3002 !!!warning \"\u8b66\u544a\u201d \u4e0d\u8981\u540c\u65f6\u4f7f\u7528 uv \u548c conda \u3002\u8fd9\u4f1a\u5bfc\u81f4\u5305\u5b89\u88c5\u51b2\u7a81\u3002\u5728\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\u4e4b\u524d\uff0c\u8bf7\u5148\u8fd0\u884c conda deactivate \u3002 # \u5728\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\u4e4b\u524d\uff0c\u8bf7\u4e0b\u8f7d FIGSHARE \u4ee3\u7801\u548c\u6570\u636e\u3002 unzip Figshare_DATA_2025*.zip -d Figshare cd Figshare python3 -m pip install uv # UV \u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684 Python \u5305\u7ba1\u7406\u5668\uff0c\u7c7b\u4f3c\u4e8e conda\u3002 uv sync --index-url https://pypi.tuna.tsinghua.edu.cn/simple # \u4e2d\u56fd\u7528\u6237\u53ef\u9009\u6e05\u534e\u955c\u50cf\u6e90\uff0c\u5426\u5219\u5b89\u88c5\u901f\u5ea6\u5f88\u6162\u3002 uv run python --version # \u9a8c\u8bc1 Python \u7248\u672c\uff08\u5e94\u4e3a 3.12\uff09 \u5b89\u88c5\u81ea\u5b9a\u4e49\u5305 uv pip install git+https://github.com/chenxinfeng4/multiview_calib.git git clone https://github.com/chenxinfeng4/LILAB-py.git ../LILAB-py uv pip install -e ../LILAB-py uv run python -m lilab.multiview_scripts_dev.p1_checkboard_global -h # \u9a8c\u8bc1\u5b89\u88c5 \u751f\u6210\u5355\u4e2a\u56fe\u8868\uff1aFig1C.pdf \u60a8\u53ef\u4ee5\u9010\u4e2a\u8fd0\u884c Fig*/Fig*.py \u4e2d\u7684\u4ee3\u7801\u6765\u751f\u6210\u56fe\u8868\u3002 uv run python Fig1_S1/Fig1C.py # \u7ed3\u679c\u4fdd\u5b58\u5230 Fig1_S1/result/Fig1C.pdf \u6ce8\u610f : \u5982\u679c\u51fa\u73b0\u4efb\u4f55\u9519\u8bef\uff0c\u8bf7\u786e\u4fdd\u6240\u6709\u6570\u636e\u6587\u4ef6\u90fd\u5df2\u6b63\u786e\u4e0b\u8f7d\u3002 \u901a\u8fc7\u4e00\u4e2a\u547d\u4ee4\u751f\u6210\u6240\u6709\u56fe\u8868 uv run python main.py test \u751f\u6210 Fig1 .pdf, FigS1 .pdf, Fig2*.pdf, ... \u7ed3\u679c\u4fdd\u5b58\u5230\u76f8\u5e94\u7684\u6587\u4ef6\u5939\u4e2d\u3002 Fig*/result/*.pdf \uff0c\u4f8b\u5982 Fig1_S1/result/Fig1E.pdf \u3002 \u6e05\u7406\u6240\u6709\u7ed3\u679c\uff0c\u590d\u539f #1. \u5220\u9664\u6240\u6709\u7ed3\u679c\u6570\u636e uv run python main.py clean #2. \u6216\u8005\u624b\u52a8\u5220\u9664\u6240\u6709\u7ed3\u679c\u6570\u636e rm Fig*/result/*pdf Fig*/result/*pkl Fig*/result/*png","title":"\u6587\u7ae0\u56fe\u8868\u590d\u73b0"},{"location":"figure_reproduce/#_1","text":"\"(2025) Decoding the Valence of Developmental Social Behavior: Dopamine Governs Social Motivation Deficits in Autism. In preparation\" \u4f5c\u8005 : \u9648\u6615\u67ab, 2025-08-09 \u4fee\u6539 : \u9676\u73b0\u660e\uff0c2025-08-15","title":"\u8bba\u6587\u4ee3\u7801\u590d\u73b0"},{"location":"figure_reproduce/#figures","text":"\u8fd0\u884c\u6b64\u4ed3\u5e93\u4e2d\u7684\u4ee3\u7801\u4ee5\u590d\u73b0\u8bba\u6587\u4e2d\u7684\u56fe\u8868\u3002","title":"Figures \u56fe\u5e93"},{"location":"figure_reproduce/#_2","text":"\u6570\u636e\u548c\u4ee3\u7801\u5df2\u5f00\u6e90\uff0c\u94fe\u63a5\u4e3a Figshare_DATA_20250818.zip ( ~1.0 GB )\u3002 \u4e0b\u8f7d\u540e\u89e3\u538b\u5230\u6587\u4ef6\u5939\uff0c\u547d\u540d\u4e3a Figshare \u3002","title":"\u4ee3\u7801\u548c\u6570\u636e\u4e0b\u8f7d"},{"location":"figure_reproduce/#_3","text":"\u652f\u6301 Windows\u3001Linux \u548c MacOS \u7cfb\u7edf\u3002 \u9996\u5148\uff0c\u901a\u8fc7 uv \u5de5\u5177 \u5b89\u88c5\u4f9d\u8d56\u73af\u5883 \u3002 !!!warning \"\u8b66\u544a\u201d \u4e0d\u8981\u540c\u65f6\u4f7f\u7528 uv \u548c conda \u3002\u8fd9\u4f1a\u5bfc\u81f4\u5305\u5b89\u88c5\u51b2\u7a81\u3002\u5728\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\u4e4b\u524d\uff0c\u8bf7\u5148\u8fd0\u884c conda deactivate \u3002 # \u5728\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\u4e4b\u524d\uff0c\u8bf7\u4e0b\u8f7d FIGSHARE \u4ee3\u7801\u548c\u6570\u636e\u3002 unzip Figshare_DATA_2025*.zip -d Figshare cd Figshare python3 -m pip install uv # UV \u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684 Python \u5305\u7ba1\u7406\u5668\uff0c\u7c7b\u4f3c\u4e8e conda\u3002 uv sync --index-url https://pypi.tuna.tsinghua.edu.cn/simple # \u4e2d\u56fd\u7528\u6237\u53ef\u9009\u6e05\u534e\u955c\u50cf\u6e90\uff0c\u5426\u5219\u5b89\u88c5\u901f\u5ea6\u5f88\u6162\u3002 uv run python --version # \u9a8c\u8bc1 Python \u7248\u672c\uff08\u5e94\u4e3a 3.12\uff09 \u5b89\u88c5\u81ea\u5b9a\u4e49\u5305 uv pip install git+https://github.com/chenxinfeng4/multiview_calib.git git clone https://github.com/chenxinfeng4/LILAB-py.git ../LILAB-py uv pip install -e ../LILAB-py uv run python -m lilab.multiview_scripts_dev.p1_checkboard_global -h # \u9a8c\u8bc1\u5b89\u88c5","title":"\u5b89\u88c5"},{"location":"figure_reproduce/#fig1cpdf","text":"\u60a8\u53ef\u4ee5\u9010\u4e2a\u8fd0\u884c Fig*/Fig*.py \u4e2d\u7684\u4ee3\u7801\u6765\u751f\u6210\u56fe\u8868\u3002 uv run python Fig1_S1/Fig1C.py # \u7ed3\u679c\u4fdd\u5b58\u5230 Fig1_S1/result/Fig1C.pdf \u6ce8\u610f : \u5982\u679c\u51fa\u73b0\u4efb\u4f55\u9519\u8bef\uff0c\u8bf7\u786e\u4fdd\u6240\u6709\u6570\u636e\u6587\u4ef6\u90fd\u5df2\u6b63\u786e\u4e0b\u8f7d\u3002","title":"\u751f\u6210\u5355\u4e2a\u56fe\u8868\uff1aFig1C.pdf"},{"location":"figure_reproduce/#_4","text":"uv run python main.py test \u751f\u6210 Fig1 .pdf, FigS1 .pdf, Fig2*.pdf, ... \u7ed3\u679c\u4fdd\u5b58\u5230\u76f8\u5e94\u7684\u6587\u4ef6\u5939\u4e2d\u3002 Fig*/result/*.pdf \uff0c\u4f8b\u5982 Fig1_S1/result/Fig1E.pdf \u3002","title":"\u901a\u8fc7\u4e00\u4e2a\u547d\u4ee4\u751f\u6210\u6240\u6709\u56fe\u8868"},{"location":"figure_reproduce/#_5","text":"#1. \u5220\u9664\u6240\u6709\u7ed3\u679c\u6570\u636e uv run python main.py clean #2. \u6216\u8005\u624b\u52a8\u5220\u9664\u6240\u6709\u7ed3\u679c\u6570\u636e rm Fig*/result/*pdf Fig*/result/*pkl Fig*/result/*png","title":"\u6e05\u7406\u6240\u6709\u7ed3\u679c\uff0c\u590d\u539f"},{"location":"","text":"\u6b22\u8fce\u6765\u5230 Social-Seq \u9879\u76ee \u8fd9\u662f Social-Seq \u9879\u76ee\u7684\u4e00\u4e9b\u8bf4\u660e\u6587\u6863\u3002\u4f7f\u7528 Social-seq \u89e3\u6790\u52a8\u7269\u5bc6\u5207\u63a5\u89e6\u65f6\u7684\u4e09\u7ef4\u59ff\u6001\uff0c\u793e\u4ea4\u7c7b\u522b\uff0c\u4ee5\u53ca\u793e\u4ea4\u80cc\u540e\u7684\u60c5\u7eea\u72b6\u6001\u3002\u901a\u8fc7\u6784\u9020\u5b9e\u65f6\u884c\u4e3a\u5206\u7c7b\u7cfb\u7edf\uff0c\u6709\u671b\u6cbb\u7597\u5b64\u72ec\u75c7\uff08ASD\uff09\u793e\u4ea4\u969c\u788d\u3002 \u4ee3\u7801\u5730\u5740 \ud83d\udce6\uff1ahttps://github.com/LiLab-CIBR/Social_Seq \u9879\u76ee\u6587\u6863 \ud83d\udcda\uff1ahttps://lilab-cibr.github.io/Social_Seq/ \u5305\u542b\u5185\u5bb9 \u786c\u8f6f\u4ef6\u7cfb\u7edf\u5b89\u88c5 - \u5b89\u88c5\u591a\u76f8\u673a\u7cfb\u7edf\uff0c\u8c03\u8bd5OBS\uff0c\u542f\u7528F2\u540c\u6b65\u52a9\u624b\u3002 \u5c0f\u7403\u77eb\u6b63 - \u6807\u5b9a\u591a\u76f8\u673a\u7cfb\u7edf\u7684\u7a7a\u95f4\u5750\u6807\u7cfb\u3002 \u5c0f\u9f20\u56fe\u50cf\u5206\u5272 - \u5728\u590d\u6742\u80cc\u666f\u4e2d\uff0c\u4f7f\u7528\u5206\u5272\u6a21\u578b\uff0c\u589e\u5f3a\u5c0f\u9f20\u4fe1\u566a\u6bd4\u3002\u5355\u9f20\u3002 Social \u4e09\u7ef4\u5173\u952e\u70b9\u91cd\u6784 - \u4e24\u53ea\u5927\u9f20\u5206\u5272\u3001\u5173\u952e\u70b9\u9884\u6d4b\u3001\u5e73\u6ed1. Seq \u884c\u4e3a\u6807\u7b7e - \u83b7\u53d6\u5927\u9f20\u793e\u4ea4\u4e00\u81f4\u6027\u768436\u7c7b\u884c\u4e3a\u6807\u7b7e\u3002 \u4ee3\u7801\u53d1\u5e03 \ud83d\udcc5 \u6700\u540e\u66f4\u65b0\u65f6\u95f4 2025-8-15\uff0c\u4f5c\u8005 ChenXinfeng\u3002\ud83d\udc68\u200d\ud83d\udcbb \u5f15\u7528 \ud83d\udcda Xinfeng Chen; Xianming Tao; Zhenchao Zhong; Yuanqing Zhang; Yixuan Li; Ye Ouyang; Zhaoyi Ding; Min An; Miao Wang; Ying Li* (2025). Decoding the Valence of Developmental Social Behavior: Dopamine Governs Social Motivation Deficits in Autism. In preparation. \u9648\u6615\u67ab. (2025). \u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684\u52a8\u7269\u81ea\u7531\u793e\u4ea4\u884c\u4e3a\u5206\u6790\u7814\u7a76. \u535a\u58eb\u8bba\u6587\uff0c\u5317\u4eac\u5927\u5b66. \u5f00\u6e90\u8bb8\u53ef\u8bc1 \u672c\u9879\u76ee\u91c7\u7528 MIT \u8bb8\u53ef\u8bc1\u5f00\u6e90\u3002\u60a8\u53ef\u4ee5\u5728\u9075\u5b88\u8bb8\u53ef\u8bc1\u6761\u6b3e\u7684\u524d\u63d0\u4e0b\u81ea\u7531\u4f7f\u7528\u3001\u4fee\u6539\u548c\u5206\u53d1\u672c\u9879\u76ee\u7684\u4ee3\u7801\u3002 \u901a\u8baf\u4f5c\u8005 \ud83d\udcec \u674e\u83b9\uff1aliying","title":"\u9996\u9875"},{"location":"#social-seq","text":"\u8fd9\u662f Social-Seq \u9879\u76ee\u7684\u4e00\u4e9b\u8bf4\u660e\u6587\u6863\u3002\u4f7f\u7528 Social-seq \u89e3\u6790\u52a8\u7269\u5bc6\u5207\u63a5\u89e6\u65f6\u7684\u4e09\u7ef4\u59ff\u6001\uff0c\u793e\u4ea4\u7c7b\u522b\uff0c\u4ee5\u53ca\u793e\u4ea4\u80cc\u540e\u7684\u60c5\u7eea\u72b6\u6001\u3002\u901a\u8fc7\u6784\u9020\u5b9e\u65f6\u884c\u4e3a\u5206\u7c7b\u7cfb\u7edf\uff0c\u6709\u671b\u6cbb\u7597\u5b64\u72ec\u75c7\uff08ASD\uff09\u793e\u4ea4\u969c\u788d\u3002 \u4ee3\u7801\u5730\u5740 \ud83d\udce6\uff1ahttps://github.com/LiLab-CIBR/Social_Seq \u9879\u76ee\u6587\u6863 \ud83d\udcda\uff1ahttps://lilab-cibr.github.io/Social_Seq/","title":"\u6b22\u8fce\u6765\u5230 Social-Seq \u9879\u76ee"},{"location":"#_1","text":"\u786c\u8f6f\u4ef6\u7cfb\u7edf\u5b89\u88c5 - \u5b89\u88c5\u591a\u76f8\u673a\u7cfb\u7edf\uff0c\u8c03\u8bd5OBS\uff0c\u542f\u7528F2\u540c\u6b65\u52a9\u624b\u3002 \u5c0f\u7403\u77eb\u6b63 - \u6807\u5b9a\u591a\u76f8\u673a\u7cfb\u7edf\u7684\u7a7a\u95f4\u5750\u6807\u7cfb\u3002 \u5c0f\u9f20\u56fe\u50cf\u5206\u5272 - \u5728\u590d\u6742\u80cc\u666f\u4e2d\uff0c\u4f7f\u7528\u5206\u5272\u6a21\u578b\uff0c\u589e\u5f3a\u5c0f\u9f20\u4fe1\u566a\u6bd4\u3002\u5355\u9f20\u3002 Social \u4e09\u7ef4\u5173\u952e\u70b9\u91cd\u6784 - \u4e24\u53ea\u5927\u9f20\u5206\u5272\u3001\u5173\u952e\u70b9\u9884\u6d4b\u3001\u5e73\u6ed1. Seq \u884c\u4e3a\u6807\u7b7e - \u83b7\u53d6\u5927\u9f20\u793e\u4ea4\u4e00\u81f4\u6027\u768436\u7c7b\u884c\u4e3a\u6807\u7b7e\u3002","title":"\u5305\u542b\u5185\u5bb9"},{"location":"#_2","text":"\u6700\u540e\u66f4\u65b0\u65f6\u95f4 2025-8-15\uff0c\u4f5c\u8005 ChenXinfeng\u3002\ud83d\udc68\u200d\ud83d\udcbb","title":"\u4ee3\u7801\u53d1\u5e03 \ud83d\udcc5"},{"location":"#_3","text":"Xinfeng Chen; Xianming Tao; Zhenchao Zhong; Yuanqing Zhang; Yixuan Li; Ye Ouyang; Zhaoyi Ding; Min An; Miao Wang; Ying Li* (2025). Decoding the Valence of Developmental Social Behavior: Dopamine Governs Social Motivation Deficits in Autism. In preparation. \u9648\u6615\u67ab. (2025). \u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684\u52a8\u7269\u81ea\u7531\u793e\u4ea4\u884c\u4e3a\u5206\u6790\u7814\u7a76. \u535a\u58eb\u8bba\u6587\uff0c\u5317\u4eac\u5927\u5b66.","title":"\u5f15\u7528 \ud83d\udcda"},{"location":"#_4","text":"\u672c\u9879\u76ee\u91c7\u7528 MIT \u8bb8\u53ef\u8bc1\u5f00\u6e90\u3002\u60a8\u53ef\u4ee5\u5728\u9075\u5b88\u8bb8\u53ef\u8bc1\u6761\u6b3e\u7684\u524d\u63d0\u4e0b\u81ea\u7531\u4f7f\u7528\u3001\u4fee\u6539\u548c\u5206\u53d1\u672c\u9879\u76ee\u7684\u4ee3\u7801\u3002","title":"\u5f00\u6e90\u8bb8\u53ef\u8bc1"},{"location":"#_5","text":"\u674e\u83b9\uff1aliying","title":"\u901a\u8baf\u4f5c\u8005 \ud83d\udcec"},{"location":"%E5%8D%95%E9%BC%A0%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/application/","text":"","title":"Application"},{"location":"%E5%8D%95%E9%BC%A0%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/","text":"","title":"Dataset"},{"location":"%E5%8D%95%E9%BC%A0%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/process/","text":"\u5355\u53ea\u5927\u9f20\u4e09\u7ef4\u59ff\u6001\u91cd\u6784 \u5f00\u53d1\u8005\uff1a\u9648\u6615\u67ab\uff0c 2025-8-15 \u9700\u8981\uff1a * *.calib - \u5c0f\u7403\u77eb\u6b63\u6587\u4ef6\u3002 * vdir/*.mp4 - \u5927\u9f209\u89c6\u89d2\u89c6\u9891\u3002 * volsize - \u52a8\u7269\u5360\u636e\u7684\u7acb\u4f53\u7a7a\u95f4\uff0c\u4ee5\u80cc\u4e3a\u4e2d\u5fc3\u70b9\u3002 \u5b8c\u6574\u4ee3\u7801 ## 1 \u5fc5\u9009\u9879\u53c2\u6570 vdir = '/mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zyq_to_dzy/20221116/solo' # \u8981\u5206\u6790\u7684\u89c6\u9891\u6587\u4ef6/\u6587\u4ef6\u5939 vdir = '/mnt/liying.cibr.ac_cn_Data_Temp/multiview_9/zyq_to_dzy/20221123/solo' vcalib = ` ls /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/dzy_oyy_ball/checked/0328-0330/solo/*.calibpkl ` # \u5c0f\u7403\u77eb\u6b63\u7684\u6587\u4ef6 volsize = 210 #vdir=/mnt/liying.cibr.ac_cn_Data_Temp/multiview_9/oyy/test_singlerat2022-11-24_17-08-23_baseline_rat1.mp4 ## volsize for rats # | | Male | Female | # | ------- | ---- | ------ | # | DAY35 | 160 | 160 | # | DAY50 | 190 | 180 | # | DAY75 | 220 | 200 | # | DAY\u6210\u5e74 | 220 | 210 | ## 2. \u63a8\u8350\uff08\u9ed8\u8ba4\uff09\u7684\u6a21\u578b\u6587\u4ef6 config = '/home/liying_lab/chenxinfeng/DATA/mmpose/res50_coco_com2d_512x320_oyy.py' # com2d \u7684\u6a21\u578b\u914d\u7f6e\u6587\u4ef6 dannce_project = '/home/liying_lab/chenxinfeng/DATA/dannce/demo_single/rat14_1280x800x9_mono' # dannce \u7684\u6a21\u578b\u8def\u5f84 ## 3. \u6587\u4ef6\u540d\u89e3\u6790 vfiles_nake = ` ls $vdir /*.mp4 | egrep -v \"com3d|sktdraw|mask\" | sed 's/.mp4//' ` vfiles = ` echo \" $vfiles_nake \" | xargs -I {} echo {} .segpkl ` volsize_vfiles = ` echo \" $vfiles \" | xargs -I {} echo $volsize {} ` ## 4. predict com3d python -m lilab.multiview_scripts_dev.s1_ballvideo2matpkl_full_faster $vdir --pannels 9 --config $config echo \" $vfiles_nake \" | xargs -n 1 -P 0 -I {} python -m lilab.multiview_scripts_dev.s4_matpkl2matcalibpkl {} .matpkl $vcalib echo \" $vfiles_nake \" | xargs -n 1 -P 0 -I {} python -m lilab.dannce_single.s1_matcalibpkl_com3d_to_segpkl {} .matcalibpkl # ls $vdir/*.segpkl | sed 's/.segpkl/.mp4/' | xargs -n 1 -P 0 python -m lilab.mmdet_dev.s4_segpkl_com3d_to_video --vox_size $volsize --maxlen 9000 ## 5. dannce predict cd $dannce_project echo \" $volsize_vfiles \" | sed 's/.segpkl/.mp4/' | cat -n | xargs -P 4 -l bash -c '/home/liying_lab/chenxinfeng/.conda/envs/mmdet/bin/dannce-predict-video-trt ../../configs/dannce_rat14_1280x800x9_max_config.yaml --vol-size $1 --video-file $2 --gpu-id $(($0%4))' echo \" $vfiles \" | sed 's/.segpkl/_dannce_predict.pkl/' | xargs -P 0 -l -r python -m lilab.dannce.s4_videopredictpkl2matcalibpkl # Smooth foot_w16, body_w64, one hit echo \" $vfiles \" | sed 's/.segpkl/.matcalibpkl/' | xargs -l -P 6 -r python -m lilab.smoothnet.s1_matcalibpkl2smooth_foot ## 6. \u7ed8\u5236 video # plot video # echo \"$vfiles\" | sed 's/.segpkl/.matcalibpkl/' | # xargs -P 6 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d $0 --iview 1 --maxlen 9000' echo \" $vfiles \" | sed 's/.segpkl/.smoothed_foot.matcalibpkl/' | xargs -P 6 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d $0 --iview 1 --postfix smoothed_foot --maxlen 9000' ## 7. Clean echo \" $vfiles_nake \" | xargs -n 1 -I {} rm {} .matpkl {} _dannce_predict*","title":"\u5355\u53ea\u5927\u9f20\u4e09\u7ef4\u59ff\u6001\u91cd\u6784"},{"location":"%E5%8D%95%E9%BC%A0%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/process/#_1","text":"\u5f00\u53d1\u8005\uff1a\u9648\u6615\u67ab\uff0c 2025-8-15 \u9700\u8981\uff1a * *.calib - \u5c0f\u7403\u77eb\u6b63\u6587\u4ef6\u3002 * vdir/*.mp4 - \u5927\u9f209\u89c6\u89d2\u89c6\u9891\u3002 * volsize - \u52a8\u7269\u5360\u636e\u7684\u7acb\u4f53\u7a7a\u95f4\uff0c\u4ee5\u80cc\u4e3a\u4e2d\u5fc3\u70b9\u3002","title":"\u5355\u53ea\u5927\u9f20\u4e09\u7ef4\u59ff\u6001\u91cd\u6784"},{"location":"%E5%8D%95%E9%BC%A0%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/process/#_2","text":"## 1 \u5fc5\u9009\u9879\u53c2\u6570 vdir = '/mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zyq_to_dzy/20221116/solo' # \u8981\u5206\u6790\u7684\u89c6\u9891\u6587\u4ef6/\u6587\u4ef6\u5939 vdir = '/mnt/liying.cibr.ac_cn_Data_Temp/multiview_9/zyq_to_dzy/20221123/solo' vcalib = ` ls /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/dzy_oyy_ball/checked/0328-0330/solo/*.calibpkl ` # \u5c0f\u7403\u77eb\u6b63\u7684\u6587\u4ef6 volsize = 210 #vdir=/mnt/liying.cibr.ac_cn_Data_Temp/multiview_9/oyy/test_singlerat2022-11-24_17-08-23_baseline_rat1.mp4 ## volsize for rats # | | Male | Female | # | ------- | ---- | ------ | # | DAY35 | 160 | 160 | # | DAY50 | 190 | 180 | # | DAY75 | 220 | 200 | # | DAY\u6210\u5e74 | 220 | 210 | ## 2. \u63a8\u8350\uff08\u9ed8\u8ba4\uff09\u7684\u6a21\u578b\u6587\u4ef6 config = '/home/liying_lab/chenxinfeng/DATA/mmpose/res50_coco_com2d_512x320_oyy.py' # com2d \u7684\u6a21\u578b\u914d\u7f6e\u6587\u4ef6 dannce_project = '/home/liying_lab/chenxinfeng/DATA/dannce/demo_single/rat14_1280x800x9_mono' # dannce \u7684\u6a21\u578b\u8def\u5f84 ## 3. \u6587\u4ef6\u540d\u89e3\u6790 vfiles_nake = ` ls $vdir /*.mp4 | egrep -v \"com3d|sktdraw|mask\" | sed 's/.mp4//' ` vfiles = ` echo \" $vfiles_nake \" | xargs -I {} echo {} .segpkl ` volsize_vfiles = ` echo \" $vfiles \" | xargs -I {} echo $volsize {} ` ## 4. predict com3d python -m lilab.multiview_scripts_dev.s1_ballvideo2matpkl_full_faster $vdir --pannels 9 --config $config echo \" $vfiles_nake \" | xargs -n 1 -P 0 -I {} python -m lilab.multiview_scripts_dev.s4_matpkl2matcalibpkl {} .matpkl $vcalib echo \" $vfiles_nake \" | xargs -n 1 -P 0 -I {} python -m lilab.dannce_single.s1_matcalibpkl_com3d_to_segpkl {} .matcalibpkl # ls $vdir/*.segpkl | sed 's/.segpkl/.mp4/' | xargs -n 1 -P 0 python -m lilab.mmdet_dev.s4_segpkl_com3d_to_video --vox_size $volsize --maxlen 9000 ## 5. dannce predict cd $dannce_project echo \" $volsize_vfiles \" | sed 's/.segpkl/.mp4/' | cat -n | xargs -P 4 -l bash -c '/home/liying_lab/chenxinfeng/.conda/envs/mmdet/bin/dannce-predict-video-trt ../../configs/dannce_rat14_1280x800x9_max_config.yaml --vol-size $1 --video-file $2 --gpu-id $(($0%4))' echo \" $vfiles \" | sed 's/.segpkl/_dannce_predict.pkl/' | xargs -P 0 -l -r python -m lilab.dannce.s4_videopredictpkl2matcalibpkl # Smooth foot_w16, body_w64, one hit echo \" $vfiles \" | sed 's/.segpkl/.matcalibpkl/' | xargs -l -P 6 -r python -m lilab.smoothnet.s1_matcalibpkl2smooth_foot ## 6. \u7ed8\u5236 video # plot video # echo \"$vfiles\" | sed 's/.segpkl/.matcalibpkl/' | # xargs -P 6 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d $0 --iview 1 --maxlen 9000' echo \" $vfiles \" | sed 's/.segpkl/.smoothed_foot.matcalibpkl/' | xargs -P 6 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d $0 --iview 1 --postfix smoothed_foot --maxlen 9000' ## 7. Clean echo \" $vfiles_nake \" | xargs -n 1 -I {} rm {} .matpkl {} _dannce_predict*","title":"\u5b8c\u6574\u4ee3\u7801"},{"location":"%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/basic_command/","text":"\u4e00\u4e9b\u57fa\u7840\u6280\u80fd \u4f7f\u7528 htop \u67e5\u770b CPU \u548c\u5185\u5b58\u4f7f\u7528\u60c5\u51b5 \u4f7f\u7528 nv \u547d\u4ee4\u67e5\u770b GPU \u4f7f\u7528\u60c5\u51b5\u3002 \u5c06\u4e0b\u9762\u547d\u4ee4\u6dfb\u52a0\u5230 ~/.bashrc ,\u7136\u540e\u91cd\u542f\u7ec8\u7aef\u3002 # \u4f7f\u7528`nv` \u547d\u4ee4\u67e5\u770b GPU \u4f7f\u7528\u60c5\u51b5 alias nv = 'watch -n 1 nvidia-smi' # \u4f7f\u7528\u67d0\u51e0\u4e2aGPU (0,1,2,3), \u5176\u5b83GPU\u4e0d\u7528 # $choosecuda 0,1,2,3 $choosecuda 3 function choosecuda { if [ -z \" $1 \" ] ; then num = 0 ; else num = \" $1 \" ; fi CUDA_VISIBLE_DEVICES = $num export CUDA_VISIBLE_DEVICES } # \u4f7f\u7528 killcuda \u5f3a\u884c\u91ca\u653e\u672c\u8d26\u6237\u7684 GPU \u5185\u5b58\u5360\u7528 # $killcuda alias killcuda = \"ps -o pid= -u $( whoami ) | \\ grep -wFf <( nvidia-smi -q -x | grep pid | sed -e 's/<pid>//g' -e 's/<\\/pid>//g' -e 's/^[[:space:]]*//' | sort | uniq ) | \\ xargs kill -9 \" # \u4f7f\u7528 killcuda2 \u5f3a\u884c\u91ca\u653e\u6240\u6709\u8d26\u6237\u7684 GPU \u5185\u5b58\u5360\u7528 # $sudo killcuda2 alias killcuda2 = \"fuser -v /dev/nvidia-uvm 2> /dev/null | xargs kill -9 \" # \u67e5\u627e\u5f53\u524d\u6587\u4ef6\u5939\u5185 python \u6587\u4ef6\u4e2d\u5305\u542b\u67d0\u5b57\u6bb5\u7684\u6587\u4ef6 # $findgrep WORDS alias findgrep = 'find . -name \"*.py\" -type f -exec echo \\\"{}\\\" \\; | xargs grep -n ' choosecuda \u7528\u4e8e\u9009\u62e9 GPU \u7684ID\u3002 killcuda \u548c killcuda2 \u7528\u6237\u91ca\u653e GPU \u7684\u5360\u7528\u3002 \u8b66\u544a \u4f7f\u7528 GPU \u4e4b\u524d\uff0c\u5148\u7528 nv \u547d\u4ee4\u770b\u4e00\u4e0bGPU\u7684\u5360\u7528\u60c5\u51b5\uff0c\u6267\u884c choosecuda \u9009\u62e9\u7a7a\u95f2\u7684GPU\u4f7f\u7528\u3002\u5982\u679c\u6709\u4e00\u4e2aGPU\u5185\u5b58\u5360\u7528\u9ad8\u4f46\u662f\u8fd0\u7b97\u5360\u7528\u7387\u4f4e\uff0c\u5219\u4f7f\u7528 killcuda \u91ca\u653e\u3002 choosecuda \u53ea\u5bf9\u5f53\u524d\u7684\u7ec8\u7aef\u4e34\u65f6\u6709\u6548\uff0c\u5728\u7ec8\u7aef\u91cd\u542f\u6216\u8de8\u7ec8\u7aef\u5219\u65e0\u6548\u3002 findgrep \u7528\u4e8e\u67e5\u627epython\u4ee3\u7801 \u6302\u8f7d\u7fa4\u8f89\u7684\u4e91\u76d8\u8def\u5f84\u5230\u670d\u52a1\u5668\u4e0a\u3002\u66ff\u6362\u5176\u4e2d\u7684 username \u4e3a\u7fa4\u8f89\u7684\u7528\u6237\u540d\uff0c uid \u4e3a\u670d\u52a1\u5668\u8d26\u53f7\u7684\u7528\u6237\u540d\u3002\u4f1a\u8981\u6c42\u8f93\u5165\u7fa4\u8f89\u7528\u6237\u7684\u5bc6\u7801\u3002 sudo mkdir /mnt/liying.cibr.ac.cn_usb3 #\u521b\u5efa\u6587\u4ef6\u5939 # \u6302\u8f7d\u7fa4\u8f89\u7684\u8def\u5f84\u5230\u670d\u52a1\u5668 sudo mount -t cifs -o \\ vers = 2 .0,username = chenxinfeng \\ //liying.cibr.ac.cn/usbshare3-2 \\ /mnt/liying.cibr.ac.cn_usb3/ -o \\ uid = chenxinfeng,file_mode = 0766 ,dir_mode = 0777 \u8b66\u544a file_mode=0766,dir_mode=0777 \u6743\u9650\u653e\u5f97\u592a\u5bbd\uff0c\u8ba9\u6240\u6709\u7528\u6237\u90fd\u5177\u7fa4\u8f89\u6587\u4ef6\u7684\u4fee\u6539\u6743\u9650\u3002\u6709\u53ef\u80fd\u4f1a\u5bf9\u7fa4\u8f89\u7684\u6587\u4ef6\u7684\u5b8c\u5168\u9020\u6210\u5371\u9669\u3002\u6743\u9650\u63a7\u5236\u592a\u7d27\uff0c\u53ef\u80fd\u6ca1\u6cd5\u987a\u5229\u52a0\u8f7d\u3002\u8bf7\u81ea\u884c\u63a7\u5236 file_mode \u548c dir_mod \u6743\u9650\u3002","title":"\u4e00\u4e9b\u57fa\u7840\u6280\u80fd"},{"location":"%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/basic_command/#_1","text":"\u4f7f\u7528 htop \u67e5\u770b CPU \u548c\u5185\u5b58\u4f7f\u7528\u60c5\u51b5 \u4f7f\u7528 nv \u547d\u4ee4\u67e5\u770b GPU \u4f7f\u7528\u60c5\u51b5\u3002 \u5c06\u4e0b\u9762\u547d\u4ee4\u6dfb\u52a0\u5230 ~/.bashrc ,\u7136\u540e\u91cd\u542f\u7ec8\u7aef\u3002 # \u4f7f\u7528`nv` \u547d\u4ee4\u67e5\u770b GPU \u4f7f\u7528\u60c5\u51b5 alias nv = 'watch -n 1 nvidia-smi' # \u4f7f\u7528\u67d0\u51e0\u4e2aGPU (0,1,2,3), \u5176\u5b83GPU\u4e0d\u7528 # $choosecuda 0,1,2,3 $choosecuda 3 function choosecuda { if [ -z \" $1 \" ] ; then num = 0 ; else num = \" $1 \" ; fi CUDA_VISIBLE_DEVICES = $num export CUDA_VISIBLE_DEVICES } # \u4f7f\u7528 killcuda \u5f3a\u884c\u91ca\u653e\u672c\u8d26\u6237\u7684 GPU \u5185\u5b58\u5360\u7528 # $killcuda alias killcuda = \"ps -o pid= -u $( whoami ) | \\ grep -wFf <( nvidia-smi -q -x | grep pid | sed -e 's/<pid>//g' -e 's/<\\/pid>//g' -e 's/^[[:space:]]*//' | sort | uniq ) | \\ xargs kill -9 \" # \u4f7f\u7528 killcuda2 \u5f3a\u884c\u91ca\u653e\u6240\u6709\u8d26\u6237\u7684 GPU \u5185\u5b58\u5360\u7528 # $sudo killcuda2 alias killcuda2 = \"fuser -v /dev/nvidia-uvm 2> /dev/null | xargs kill -9 \" # \u67e5\u627e\u5f53\u524d\u6587\u4ef6\u5939\u5185 python \u6587\u4ef6\u4e2d\u5305\u542b\u67d0\u5b57\u6bb5\u7684\u6587\u4ef6 # $findgrep WORDS alias findgrep = 'find . -name \"*.py\" -type f -exec echo \\\"{}\\\" \\; | xargs grep -n ' choosecuda \u7528\u4e8e\u9009\u62e9 GPU \u7684ID\u3002 killcuda \u548c killcuda2 \u7528\u6237\u91ca\u653e GPU \u7684\u5360\u7528\u3002 \u8b66\u544a \u4f7f\u7528 GPU \u4e4b\u524d\uff0c\u5148\u7528 nv \u547d\u4ee4\u770b\u4e00\u4e0bGPU\u7684\u5360\u7528\u60c5\u51b5\uff0c\u6267\u884c choosecuda \u9009\u62e9\u7a7a\u95f2\u7684GPU\u4f7f\u7528\u3002\u5982\u679c\u6709\u4e00\u4e2aGPU\u5185\u5b58\u5360\u7528\u9ad8\u4f46\u662f\u8fd0\u7b97\u5360\u7528\u7387\u4f4e\uff0c\u5219\u4f7f\u7528 killcuda \u91ca\u653e\u3002 choosecuda \u53ea\u5bf9\u5f53\u524d\u7684\u7ec8\u7aef\u4e34\u65f6\u6709\u6548\uff0c\u5728\u7ec8\u7aef\u91cd\u542f\u6216\u8de8\u7ec8\u7aef\u5219\u65e0\u6548\u3002 findgrep \u7528\u4e8e\u67e5\u627epython\u4ee3\u7801 \u6302\u8f7d\u7fa4\u8f89\u7684\u4e91\u76d8\u8def\u5f84\u5230\u670d\u52a1\u5668\u4e0a\u3002\u66ff\u6362\u5176\u4e2d\u7684 username \u4e3a\u7fa4\u8f89\u7684\u7528\u6237\u540d\uff0c uid \u4e3a\u670d\u52a1\u5668\u8d26\u53f7\u7684\u7528\u6237\u540d\u3002\u4f1a\u8981\u6c42\u8f93\u5165\u7fa4\u8f89\u7528\u6237\u7684\u5bc6\u7801\u3002 sudo mkdir /mnt/liying.cibr.ac.cn_usb3 #\u521b\u5efa\u6587\u4ef6\u5939 # \u6302\u8f7d\u7fa4\u8f89\u7684\u8def\u5f84\u5230\u670d\u52a1\u5668 sudo mount -t cifs -o \\ vers = 2 .0,username = chenxinfeng \\ //liying.cibr.ac.cn/usbshare3-2 \\ /mnt/liying.cibr.ac.cn_usb3/ -o \\ uid = chenxinfeng,file_mode = 0766 ,dir_mode = 0777 \u8b66\u544a file_mode=0766,dir_mode=0777 \u6743\u9650\u653e\u5f97\u592a\u5bbd\uff0c\u8ba9\u6240\u6709\u7528\u6237\u90fd\u5177\u7fa4\u8f89\u6587\u4ef6\u7684\u4fee\u6539\u6743\u9650\u3002\u6709\u53ef\u80fd\u4f1a\u5bf9\u7fa4\u8f89\u7684\u6587\u4ef6\u7684\u5b8c\u5168\u9020\u6210\u5371\u9669\u3002\u6743\u9650\u63a7\u5236\u592a\u7d27\uff0c\u53ef\u80fd\u6ca1\u6cd5\u987a\u5229\u52a0\u8f7d\u3002\u8bf7\u81ea\u884c\u63a7\u5236 file_mode \u548c dir_mod \u6743\u9650\u3002","title":"\u4e00\u4e9b\u57fa\u7840\u6280\u80fd"},{"location":"%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/installed_models/","text":"\u5df2\u7ecf\u5b89\u88c5\u7684\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b \u6a21\u578b (conda) \u7528\u9014 \u9879\u76ee\u8def\u5f84 Mask-RCNN (mmpose) \u5927\u9f20\u5206\u5272\uff0c\u5c0f\u9f20\u5206\u5272 /home/liying_lab/chenxinfeng/DATA/CBNetV2 mmpose (mmpose) 2D \u5173\u952e\u70b9\u68c0\u6d4b xxx/DATA/mmpose YOLO-v8 (open-mmlab) \u52a8\u7269\u5feb\u901f\u68c0\u6d4b&\u5206\u5272 xxx/DATA/ultralytic DANNCE (mmdet) \u52a8\u72693D\u5173\u952e\u70b9\u68c0\u6d4b xxx/DATA/dannce SmoothNet (mmdet) \u5173\u952e\u70b9\u65f6\u5e8f\u5e73\u6ed1 xxx/DATA/SmoothNet","title":"\u5df2\u5b89\u88c5\u7684\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b"},{"location":"%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/installed_models/#_1","text":"\u6a21\u578b (conda) \u7528\u9014 \u9879\u76ee\u8def\u5f84 Mask-RCNN (mmpose) \u5927\u9f20\u5206\u5272\uff0c\u5c0f\u9f20\u5206\u5272 /home/liying_lab/chenxinfeng/DATA/CBNetV2 mmpose (mmpose) 2D \u5173\u952e\u70b9\u68c0\u6d4b xxx/DATA/mmpose YOLO-v8 (open-mmlab) \u52a8\u7269\u5feb\u901f\u68c0\u6d4b&\u5206\u5272 xxx/DATA/ultralytic DANNCE (mmdet) \u52a8\u72693D\u5173\u952e\u70b9\u68c0\u6d4b xxx/DATA/dannce SmoothNet (mmdet) \u5173\u952e\u70b9\u65f6\u5e8f\u5e73\u6ed1 xxx/DATA/SmoothNet","title":"\u5df2\u7ecf\u5b89\u88c5\u7684\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b"},{"location":"%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/login_server/","text":"\u8fde\u63a5\u5230\u670d\u52a1\u5668 \u670d\u52a1\u5668\u7684\u8be6\u7ec6\u53c2\u6570 \u5b9e\u9a8c\u5ba4\u6709\u4e00\u5957\u670d\u52a1\u5668\u548c\u4e00\u53f0\u6d4b\u8bd5\u673a\u3002\u670d\u52a1\u5668\u7528\u6765\u4e13\u95e8\u505a\u6570\u636e\u5206\u6790\uff0c\u4e0d\u8981\u79c1\u81ea\u5b89\u88c5\u8f6f\u4ef6\u5305\uff0c\u4ee5\u514d\u7834\u5316\u5b83\u7684\u73af\u5883\u3002 \u60f3\u8981\u5b66\u4e60linux\u7684\u57fa\u672c\u547d\u4ee4\uff0c\u53ef\u4ee5\u5728\u6d4b\u8bd5\u673a\u4e0a\u505a\u3002 \u670d\u52a1\u5668\uff08\u9ad8\u6027\u80fd\uff0c\u6d6a\u6f6e\uff09 \u6d4b\u8bd5\u673a\uff08\u4e34\u65f6\u4f7f\u7528\uff09 \u7528\u9014 \u8dd1\u6a21\u578b\uff0c\u8dd1\u6d41\u7a0b\uff0c\u5206\u6790\u6570\u636e \u6d4b\u8bd5\u4ee3\u7801\uff0c\u7f51\u9875\u670d\u52a1 \u5730\u70b9 \u4fe1\u606f\u5316\u4e2d\u5fc3B\u533a\u8d1f\u4e8c\u697c\u673a\u623f \u5b9e\u9a8c\u5ba4 \u5730\u5740 ssh chenxinfeng@ 10.50.60.6 - \u7cfb\u7edf Ubuntu 18.04 - \u57fa\u7840\u547d\u4ee4 sudo apt install PACKAGE - \u5185\u5b58 256 GB - \u786c\u76d8 1 TB\u56fa\u6001 + 8 TB\u673a\u68b0 - CPU Intel Silver 4314\uff0c32\u6838\u5fc3 64\u7ebf\u7a0b - GPU 4\u5757 NVIDIA RTX3090 \uff0824 GB\u663e\u5b58\uff09 - docker \u652f\u6301 - \u767b\u5f55\u5230\u670d\u52a1\u5668\uff08/\u6d4b\u8bd5\u673a\uff09 \u670d\u52a1\u5668\u652f\u6301 \u8fdc\u7a0b\u684c\u9762 , ssh \u548c vscode \u7684\u767b\u5f55\u65b9\u5f0f\u3002\u63a8\u8350\u4f7f\u7528 vscode \u3002 1. \u4f7f\u7528 vscode [\u6700\u63a8\u8350] \u53bb\u5b98\u7f51 \u4e0b\u8f7d VSCODE \uff0c\u5b89\u88c5\u3002\u4e4b\u540e\u518d\u5b89\u88c5 Remote - SSH \u63d2\u4ef6\u3002\u901a\u8fc7\u63d2\u4ef6\u8fdb\u5165\u8fdc\u7a0b\u7684\u670d\u52a1\u5668\u3002\u5728\u670d\u52a1\u5668\u4e2d\u8fdb\u5165\u9879\u76ee\u76ee\u5f55\uff0c\u518d\u5b89\u88c5 Python \u548c Jupyter \u63d2\u4ef6\u3002 \u8b66\u544a \u9996\u6b21\u7528 VSCODE \u767b\u5f55\u8fdc\u7a0bSSH\uff0c\u4f1a\u5728\u670d\u52a1\u5668\u4e2d\u81ea\u52a8\u4e0b\u8f7d\u8f6f\u4ef6\u5e76\u914d\u7f6e\u73af\u5883\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f85\u3002VSCODE \u7ecf\u5e38\u66f4\u65b0\uff0c\u4f1a\u5bfc\u81f4 Python \u548c Jupyter \u73af\u5883\u65f6\u6548\u3002\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff0c\u8bf7\u66f4\u65b0 VSCODE \u5e76\u91cd\u542f\u8f6f\u4ef6\u3002\u53ef\u4ee5\u5728\u8bbe\u7f6e\u91cc\u9762\u53d6\u6d88 VSCODE \u81ea\u52a8\u66f4\u65b0\u3002 \u9519\u8bef \u65e9\u671f\u7684 WINDOWS \u7535\u8111\u7684\u7cfb\u7edf\u6709\u95ee\u9898\uff0cVSCODE\u4e2d\u4f7f\u7528 SSH \u8fde\u63a5\u65f6\u4e00\u76f4\u8f6c\u5708\u5708\u6216\u5931\u8d25\u3002\u8bf7\u4ece OPEN-SSH \u5b98\u7f51\u5b89\u88c5\u6700\u65b0\u8f6f\u4ef6\u5e76\u6dfb\u52a0\u5230\u641c\u7d22\u76ee\u5f55\u4e2d\uff0c\u66ff\u6362\u6389\u539f\u6765\u7684 SSH\u3002 2. \u4f7f\u7528 ssh \u5728 windows \u5ba2\u6237\u7535\u8111\u4e2d\uff0c\u6309\u4f4f Win R \u5feb\u6377\u952e\uff0c\u5728\u5f39\u51fa\u7684 \u8fd0\u884c \u7a97\u53e3\u4e2d\uff0c\u8f93\u5165 cmd \u6307\u4ee4\u3002\u5728\u5f39\u51fa\u7684\u7ec8\u7aef\u547d\u4ee4\u7a97\u4e2d\uff0c\u8f93\u5165\u4e0b\u9762\u547d\u4ee4\uff0c\u5e76\u8f93\u5165\u5bc6\u7801\u3002 ssh chenxinfeng@10.50.60.6 \u63d0\u793a \u5982\u679c\u60f3\u8981\u514d\u5bc6\u767b\u5f55\uff0c\u53ef\u4ee5\u53bb\u4e92\u8054\u7f51\u641c\u7d22\u201cssh \u514d\u5bc6\u767b\u5f55\u201d\u3002 3. \u4f7f\u7528\u8fdc\u7a0b\u684c\u9762\u767b\u5f55 [\u907f\u514d] \u5728 windows \u5ba2\u6237\u7535\u8111\u4e2d\uff0c\u6309\u4f4f Win R \u5feb\u6377\u952e\uff0c\u5728\u5f39\u51fa\u7684 \u8fd0\u884c \u7a97\u53e3\u4e2d\uff0c\u8f93\u5165 mstc \u6307\u4ee4\u3002\u5f39\u51fa\u8fdc\u7a0b\u684c\u9762\u767b\u5f55\u7a97\u53e3\u3002 \u8f93\u5165\u670d\u52a1\u5668\u7684IP\u5730\u5740\uff0c \u8fde\u63a5 \u3002\u63a5\u7740\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002 \u5728\u4e00\u822c\u573a\u666f\u4e0b\uff0c\u90fd\u63a8\u8350\u4f7f\u7528 VSCODE \u4f5c\u4e3a\u670d\u52a1\u5668\u8fde\u63a5\u5de5\u5177\u3002\u5e76\u4e14\u5efa\u8bae\u5728 VSCODE \u4e2d\u5b89\u88c5 CodeGeeX \u8fd9\u79cdAI\u7f16\u7a0b\u52a9\u624b\uff08\u9700\u8981\u6ce8\u518c\uff09\u3002 \u9002\u7528\u573a\u666f \u7f3a\u70b9 VSCODE \u6587\u672c\u548c\u4ee3\u7801\u7f16\u8f91\u3001jupyter\u5206\u6790\u4f5c\u56fe \u7ecf\u5e38\u66f4\u65b0\uff0c\u73af\u5883\u914d\u7f6e\u9ebb\u70e6\uff0c\u6d88\u8017\u670d\u52a1\u5668\u6027\u80fd SSH \u4e34\u65f6\u8dd1\u4e2a\u811a\u672c\u6216\u4fee\u6539\u73af\u5883 \u53ef\u89c6\u5316\u5dee \u8fdc\u7a0b\u684c\u9762 \u56fe\u5f62\u754c\u9762\u7a0b\u5e8f \u5361\uff0c\u53d7\u9650\u4e8e\u7f51\u7edc\u8d28\u91cf","title":"\u8fde\u63a5\u8fdb\u5165\u670d\u52a1\u5668"},{"location":"%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/login_server/#_1","text":"","title":"\u8fde\u63a5\u5230\u670d\u52a1\u5668"},{"location":"%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/login_server/#_2","text":"\u5b9e\u9a8c\u5ba4\u6709\u4e00\u5957\u670d\u52a1\u5668\u548c\u4e00\u53f0\u6d4b\u8bd5\u673a\u3002\u670d\u52a1\u5668\u7528\u6765\u4e13\u95e8\u505a\u6570\u636e\u5206\u6790\uff0c\u4e0d\u8981\u79c1\u81ea\u5b89\u88c5\u8f6f\u4ef6\u5305\uff0c\u4ee5\u514d\u7834\u5316\u5b83\u7684\u73af\u5883\u3002 \u60f3\u8981\u5b66\u4e60linux\u7684\u57fa\u672c\u547d\u4ee4\uff0c\u53ef\u4ee5\u5728\u6d4b\u8bd5\u673a\u4e0a\u505a\u3002 \u670d\u52a1\u5668\uff08\u9ad8\u6027\u80fd\uff0c\u6d6a\u6f6e\uff09 \u6d4b\u8bd5\u673a\uff08\u4e34\u65f6\u4f7f\u7528\uff09 \u7528\u9014 \u8dd1\u6a21\u578b\uff0c\u8dd1\u6d41\u7a0b\uff0c\u5206\u6790\u6570\u636e \u6d4b\u8bd5\u4ee3\u7801\uff0c\u7f51\u9875\u670d\u52a1 \u5730\u70b9 \u4fe1\u606f\u5316\u4e2d\u5fc3B\u533a\u8d1f\u4e8c\u697c\u673a\u623f \u5b9e\u9a8c\u5ba4 \u5730\u5740 ssh chenxinfeng@ 10.50.60.6 - \u7cfb\u7edf Ubuntu 18.04 - \u57fa\u7840\u547d\u4ee4 sudo apt install PACKAGE - \u5185\u5b58 256 GB - \u786c\u76d8 1 TB\u56fa\u6001 + 8 TB\u673a\u68b0 - CPU Intel Silver 4314\uff0c32\u6838\u5fc3 64\u7ebf\u7a0b - GPU 4\u5757 NVIDIA RTX3090 \uff0824 GB\u663e\u5b58\uff09 - docker \u652f\u6301 -","title":"\u670d\u52a1\u5668\u7684\u8be6\u7ec6\u53c2\u6570"},{"location":"%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/login_server/#_3","text":"\u670d\u52a1\u5668\u652f\u6301 \u8fdc\u7a0b\u684c\u9762 , ssh \u548c vscode \u7684\u767b\u5f55\u65b9\u5f0f\u3002\u63a8\u8350\u4f7f\u7528 vscode \u3002","title":"\u767b\u5f55\u5230\u670d\u52a1\u5668\uff08/\u6d4b\u8bd5\u673a\uff09"},{"location":"%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/login_server/#1-vscode","text":"\u53bb\u5b98\u7f51 \u4e0b\u8f7d VSCODE \uff0c\u5b89\u88c5\u3002\u4e4b\u540e\u518d\u5b89\u88c5 Remote - SSH \u63d2\u4ef6\u3002\u901a\u8fc7\u63d2\u4ef6\u8fdb\u5165\u8fdc\u7a0b\u7684\u670d\u52a1\u5668\u3002\u5728\u670d\u52a1\u5668\u4e2d\u8fdb\u5165\u9879\u76ee\u76ee\u5f55\uff0c\u518d\u5b89\u88c5 Python \u548c Jupyter \u63d2\u4ef6\u3002 \u8b66\u544a \u9996\u6b21\u7528 VSCODE \u767b\u5f55\u8fdc\u7a0bSSH\uff0c\u4f1a\u5728\u670d\u52a1\u5668\u4e2d\u81ea\u52a8\u4e0b\u8f7d\u8f6f\u4ef6\u5e76\u914d\u7f6e\u73af\u5883\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f85\u3002VSCODE \u7ecf\u5e38\u66f4\u65b0\uff0c\u4f1a\u5bfc\u81f4 Python \u548c Jupyter \u73af\u5883\u65f6\u6548\u3002\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff0c\u8bf7\u66f4\u65b0 VSCODE \u5e76\u91cd\u542f\u8f6f\u4ef6\u3002\u53ef\u4ee5\u5728\u8bbe\u7f6e\u91cc\u9762\u53d6\u6d88 VSCODE \u81ea\u52a8\u66f4\u65b0\u3002 \u9519\u8bef \u65e9\u671f\u7684 WINDOWS \u7535\u8111\u7684\u7cfb\u7edf\u6709\u95ee\u9898\uff0cVSCODE\u4e2d\u4f7f\u7528 SSH \u8fde\u63a5\u65f6\u4e00\u76f4\u8f6c\u5708\u5708\u6216\u5931\u8d25\u3002\u8bf7\u4ece OPEN-SSH \u5b98\u7f51\u5b89\u88c5\u6700\u65b0\u8f6f\u4ef6\u5e76\u6dfb\u52a0\u5230\u641c\u7d22\u76ee\u5f55\u4e2d\uff0c\u66ff\u6362\u6389\u539f\u6765\u7684 SSH\u3002","title":"1. \u4f7f\u7528 vscode [\u6700\u63a8\u8350]"},{"location":"%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/login_server/#2-ssh","text":"\u5728 windows \u5ba2\u6237\u7535\u8111\u4e2d\uff0c\u6309\u4f4f Win R \u5feb\u6377\u952e\uff0c\u5728\u5f39\u51fa\u7684 \u8fd0\u884c \u7a97\u53e3\u4e2d\uff0c\u8f93\u5165 cmd \u6307\u4ee4\u3002\u5728\u5f39\u51fa\u7684\u7ec8\u7aef\u547d\u4ee4\u7a97\u4e2d\uff0c\u8f93\u5165\u4e0b\u9762\u547d\u4ee4\uff0c\u5e76\u8f93\u5165\u5bc6\u7801\u3002 ssh chenxinfeng@10.50.60.6 \u63d0\u793a \u5982\u679c\u60f3\u8981\u514d\u5bc6\u767b\u5f55\uff0c\u53ef\u4ee5\u53bb\u4e92\u8054\u7f51\u641c\u7d22\u201cssh \u514d\u5bc6\u767b\u5f55\u201d\u3002","title":"2. \u4f7f\u7528 ssh"},{"location":"%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/login_server/#3","text":"\u5728 windows \u5ba2\u6237\u7535\u8111\u4e2d\uff0c\u6309\u4f4f Win R \u5feb\u6377\u952e\uff0c\u5728\u5f39\u51fa\u7684 \u8fd0\u884c \u7a97\u53e3\u4e2d\uff0c\u8f93\u5165 mstc \u6307\u4ee4\u3002\u5f39\u51fa\u8fdc\u7a0b\u684c\u9762\u767b\u5f55\u7a97\u53e3\u3002 \u8f93\u5165\u670d\u52a1\u5668\u7684IP\u5730\u5740\uff0c \u8fde\u63a5 \u3002\u63a5\u7740\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002 \u5728\u4e00\u822c\u573a\u666f\u4e0b\uff0c\u90fd\u63a8\u8350\u4f7f\u7528 VSCODE \u4f5c\u4e3a\u670d\u52a1\u5668\u8fde\u63a5\u5de5\u5177\u3002\u5e76\u4e14\u5efa\u8bae\u5728 VSCODE \u4e2d\u5b89\u88c5 CodeGeeX \u8fd9\u79cdAI\u7f16\u7a0b\u52a9\u624b\uff08\u9700\u8981\u6ce8\u518c\uff09\u3002 \u9002\u7528\u573a\u666f \u7f3a\u70b9 VSCODE \u6587\u672c\u548c\u4ee3\u7801\u7f16\u8f91\u3001jupyter\u5206\u6790\u4f5c\u56fe \u7ecf\u5e38\u66f4\u65b0\uff0c\u73af\u5883\u914d\u7f6e\u9ebb\u70e6\uff0c\u6d88\u8017\u670d\u52a1\u5668\u6027\u80fd SSH \u4e34\u65f6\u8dd1\u4e2a\u811a\u672c\u6216\u4fee\u6539\u73af\u5883 \u53ef\u89c6\u5316\u5dee \u8fdc\u7a0b\u684c\u9762 \u56fe\u5f62\u754c\u9762\u7a0b\u5e8f \u5361\uff0c\u53d7\u9650\u4e8e\u7f51\u7edc\u8d28\u91cf","title":"3. \u4f7f\u7528\u8fdc\u7a0b\u684c\u9762\u767b\u5f55 [\u907f\u514d]"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/bug_fix/","text":"\u8865\u4e01\uff1aLinux \u4e3b\u673a Docker\uff08\u5982\u6709\u9700\u8981\uff09 \u4e3a\u4f55\u9700\u8981\u8865\u4e01\uff1a\u6b64 Docker \u955c\u50cf\u5728 Windows \u4e3b\u673a\u4e0a\u6784\u5efa\uff0c\u5728 Linux \u4e3b\u673a\u4e0a\u8fd0\u884c\u65f6\u53ef\u80fd\u4f1a\u51fa\u73b0\u95ee\u9898\u3002 \u5982\u679c\u4f60\u7684\u670d\u52a1\u5668\u662f Linux \u7cfb\u7edf\uff1a $ nvidia-smi # \u6b63\u5e38\u60c5\u51b5\u4e0b\u5e94\u80fd\u770b\u5230 GPU \u4fe1\u606f\uff0c\u82e5\u51fa\u73b0\"not found libnvidia-ml.so.1\"\u9519\u8bef\uff0c\u5219\u9700\u8981\u5e94\u7528\u8865\u4e01\u3002 \u6b64\u65f6\uff0c\u4f60\u53ef\u4ee5\u8fdb\u5165docker\u5bb9\u5668\uff0c\u5c1d\u8bd5\u4ee5\u4e0b\u8865\u4e01\u64cd\u4f5c\uff1a cd /usr/lib/x86_64-linux-gnu ln -sf libnvidia-ml.so.5* libnvidia-ml.so.1 ln -sf libnvidia-ml.so.5* libnvidia-ml.so ln -sf libcuda.so.5* libcuda.so.1 # \u53ef\u9009 ln -sf libcudadebugger.so.5* libcudadebugger.so.1 # \u53ef\u9009 ldconfig \u53ef\u4ee5\u68c0\u67e5 torch \u662f\u5426\u6b63\u5e38\u5de5\u4f5c python -c \"import torch; print(torch.zeros(3,3).cuda())\" \u8865\u4e01: LILAB-pkg (\u5982\u6709\u9700\u8981) \u4e3a\u4f55\u9700\u8981\u8865\u4e01\uff1a\u8be5 Docker \u4e0d\u652f\u6301 NVIDIA \u89c6\u9891\u89e3\u7801\u5668/\u7f16\u7801\u5668\uff0c\u800c\u4e3b\u8981\u7684 LILAB-pkg \u4f1a\u7528\u5230 NVIDIA \u89c6\u9891\u5305\uff0c\u56e0\u6b64\u9700\u8981\u5c06 Docker \u4e2d\u7684\u76f8\u5173\u5305\u964d\u7ea7\u4e3a CPU \u89c6\u9891\u5305\u3002 \u6bcf\u5f53\u4f60\u4ece GitHub \u4e0a\u66f4\u65b0 LILAB-pkg \u540e\uff0c\u90fd\u9700\u8981\u6267\u884c\u6b64\u8865\u4e01\u64cd\u4f5c\uff1a cp -r /root/Downloads/pipeline/LILAB-pkg-patch-for-docker/* ~/LILAB-pkg/ \u4e3b\u673a8080\u7aef\u53e3\u5df2\u88ab\u5360\u7528 \u5982\u679c\u8fd0\u884c\u4e0b\u9762\u547d\u4ee4\u65f6\u51fa\u73b0 \"Error starting userland proxy: listen tcp 0.0.0.0:8080: bind: address already in use\" \u9519\u8bef\uff0c\u8bf4\u660e\u4e3b\u673a8080\u7aef\u53e3\u5df2\u88ab\u5360\u7528\u3002 docker run --rm -it -p 8080:8080 ... \u5219\u9700\u8981\u5c06\u7aef\u53e3\u6620\u5c04\u4fee\u6539\u4e3a\u5176\u4ed6\u7aef\u53e3\uff08\u59828081\uff0chttp://localhost:8081/\uff09\uff0c\u4f8b\u5982\uff1a docker run --rm -it -p 8081:8080 ... \u8fdc\u7a0b\u670d\u52a1\u56688080\u7aef\u53e3\u8f6c\u53d1\u5230\u672c\u5730 \u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f Windows Docker\uff0c\u53ef\u4ee5\u8df3\u8fc7\u6b64\u6b65\u9aa4\u3002 \u4e3a\u4ec0\u4e48\u9700\u8981\u8f6c\u53d1\uff1f \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd0\u884c web \u754c\u9762\u7684\u5ba2\u6237\u7aef\u7535\u8111\uff08\u4f8b\u5982\uff0cIP 10.50.7.103\uff09\u548c\u8fdc\u7a0b\u670d\u52a1\u5668\uff08\u4f8b\u5982\uff0cIP 10.50.60.6\uff09\u4f4d\u4e8e\u4e0d\u540c\u673a\u5668\u4e0a\u3002\u7531\u4e8e Chrome \u7684\u9650\u5236\uff0c\u867d\u7136\u53ef\u4ee5\u8bbf\u95ee vs-code-server\uff08http://10.50.60.6:8080\uff09\uff0c\u4f46\u9ad8\u7ea7\u529f\u80fd\uff08\u6587\u4ef6\u6d4f\u89c8\u3001Jupyter \u7b49\uff09\u65e0\u6cd5\u4f7f\u7528\u3002 \u89e3\u51b3\u65b9\u6cd5 \u4e0d\u63a8\u8350\uff1a\u914d\u7f6e\u5347\u7ea7 HTTPS \u534f\u8bae\uff0c\u5373\uff08https://10.50.60.6:8080\uff09\uff0c\u4f46\u8fd9\u9700\u8981\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u914d\u7f6e SSL \u8bc1\u4e66\uff0c\u8fc7\u7a0b\u8f83\u4e3a\u7e41\u7410\u3002 \u63a8\u8350\uff1a\u5c06\u7f51\u7ad9\u7aef\u53e3\uff08http://10.50.60.6:8080\uff09\u8f6c\u53d1\u5230\u672c\u5730\u3002\u5c06\u8fdc\u7a0b\u670d\u52a1\u5668\u7684 8080 \u7aef\u53e3\u8f6c\u53d1\u5230\u672c\u5730\uff08http://localhost:8080\uff0c\u5373 http://10.50.7.103:8080\uff09\uff0cChrome \u6d4f\u89c8\u5668\u5373\u53ef\u6b63\u5e38\u8bbf\u95ee\u3002\u8fd9\u662f\u56e0\u4e3a Chrome \u5bf9 localhost \u7684\u8bbf\u95ee\u6ca1\u6709\u9650\u5236\u3002 ssh -L 8080:10.50.60.6:8080 username@10.50.60.6 \u64cd\u4f5c\u6b65\u9aa4 Windows \u5ba2\u6237\u7aef\u7535\u8111\u53ef\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff0c\u6ce8\u610f\u66ff\u6362 IP \u5730\u5740\u4e3a\u5b9e\u9645\u7684\u670d\u52a1\u5668\u5730\u5740\u548c\u7aef\u53e3\u3002 \u5ba2\u6237\u7aef\u64cd\u4f5c\u7cfb\u7edf \u670d\u52a1\u5668\u9632\u706b\u5899 8080 \u7aef\u53e3 \u4ee3\u7406\u65b9\u6cd5 Windows \u5df2\u653e\u884c netsh interface portproxy add v4tov4 listenaddress=127.0.0.1 listenport=8080 connectaddress=10.50.60.6 connectport=8080 Linux \u5df2\u653e\u884c socat TCP-LISTEN:8080,bind=127.0.0.1,fork TCP:10.50.60.6:8080 \u901a\u7528\uff08SSH\u6253\u6d1e\uff09 \u5c01\u95ed ssh -L 8080:10.50.60.6:8080 username@10.50.60.6","title":"\u9519\u8bef\u4fee\u590d"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/bug_fix/#linux-docker","text":"\u4e3a\u4f55\u9700\u8981\u8865\u4e01\uff1a\u6b64 Docker \u955c\u50cf\u5728 Windows \u4e3b\u673a\u4e0a\u6784\u5efa\uff0c\u5728 Linux \u4e3b\u673a\u4e0a\u8fd0\u884c\u65f6\u53ef\u80fd\u4f1a\u51fa\u73b0\u95ee\u9898\u3002 \u5982\u679c\u4f60\u7684\u670d\u52a1\u5668\u662f Linux \u7cfb\u7edf\uff1a $ nvidia-smi # \u6b63\u5e38\u60c5\u51b5\u4e0b\u5e94\u80fd\u770b\u5230 GPU \u4fe1\u606f\uff0c\u82e5\u51fa\u73b0\"not found libnvidia-ml.so.1\"\u9519\u8bef\uff0c\u5219\u9700\u8981\u5e94\u7528\u8865\u4e01\u3002 \u6b64\u65f6\uff0c\u4f60\u53ef\u4ee5\u8fdb\u5165docker\u5bb9\u5668\uff0c\u5c1d\u8bd5\u4ee5\u4e0b\u8865\u4e01\u64cd\u4f5c\uff1a cd /usr/lib/x86_64-linux-gnu ln -sf libnvidia-ml.so.5* libnvidia-ml.so.1 ln -sf libnvidia-ml.so.5* libnvidia-ml.so ln -sf libcuda.so.5* libcuda.so.1 # \u53ef\u9009 ln -sf libcudadebugger.so.5* libcudadebugger.so.1 # \u53ef\u9009 ldconfig \u53ef\u4ee5\u68c0\u67e5 torch \u662f\u5426\u6b63\u5e38\u5de5\u4f5c python -c \"import torch; print(torch.zeros(3,3).cuda())\"","title":"\u8865\u4e01\uff1aLinux \u4e3b\u673a Docker\uff08\u5982\u6709\u9700\u8981\uff09"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/bug_fix/#lilab-pkg","text":"\u4e3a\u4f55\u9700\u8981\u8865\u4e01\uff1a\u8be5 Docker \u4e0d\u652f\u6301 NVIDIA \u89c6\u9891\u89e3\u7801\u5668/\u7f16\u7801\u5668\uff0c\u800c\u4e3b\u8981\u7684 LILAB-pkg \u4f1a\u7528\u5230 NVIDIA \u89c6\u9891\u5305\uff0c\u56e0\u6b64\u9700\u8981\u5c06 Docker \u4e2d\u7684\u76f8\u5173\u5305\u964d\u7ea7\u4e3a CPU \u89c6\u9891\u5305\u3002 \u6bcf\u5f53\u4f60\u4ece GitHub \u4e0a\u66f4\u65b0 LILAB-pkg \u540e\uff0c\u90fd\u9700\u8981\u6267\u884c\u6b64\u8865\u4e01\u64cd\u4f5c\uff1a cp -r /root/Downloads/pipeline/LILAB-pkg-patch-for-docker/* ~/LILAB-pkg/","title":"\u8865\u4e01: LILAB-pkg (\u5982\u6709\u9700\u8981)"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/bug_fix/#8080","text":"\u5982\u679c\u8fd0\u884c\u4e0b\u9762\u547d\u4ee4\u65f6\u51fa\u73b0 \"Error starting userland proxy: listen tcp 0.0.0.0:8080: bind: address already in use\" \u9519\u8bef\uff0c\u8bf4\u660e\u4e3b\u673a8080\u7aef\u53e3\u5df2\u88ab\u5360\u7528\u3002 docker run --rm -it -p 8080:8080 ... \u5219\u9700\u8981\u5c06\u7aef\u53e3\u6620\u5c04\u4fee\u6539\u4e3a\u5176\u4ed6\u7aef\u53e3\uff08\u59828081\uff0chttp://localhost:8081/\uff09\uff0c\u4f8b\u5982\uff1a docker run --rm -it -p 8081:8080 ...","title":"\u4e3b\u673a8080\u7aef\u53e3\u5df2\u88ab\u5360\u7528"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/bug_fix/#8080_1","text":"\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f Windows Docker\uff0c\u53ef\u4ee5\u8df3\u8fc7\u6b64\u6b65\u9aa4\u3002 \u4e3a\u4ec0\u4e48\u9700\u8981\u8f6c\u53d1\uff1f \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd0\u884c web \u754c\u9762\u7684\u5ba2\u6237\u7aef\u7535\u8111\uff08\u4f8b\u5982\uff0cIP 10.50.7.103\uff09\u548c\u8fdc\u7a0b\u670d\u52a1\u5668\uff08\u4f8b\u5982\uff0cIP 10.50.60.6\uff09\u4f4d\u4e8e\u4e0d\u540c\u673a\u5668\u4e0a\u3002\u7531\u4e8e Chrome \u7684\u9650\u5236\uff0c\u867d\u7136\u53ef\u4ee5\u8bbf\u95ee vs-code-server\uff08http://10.50.60.6:8080\uff09\uff0c\u4f46\u9ad8\u7ea7\u529f\u80fd\uff08\u6587\u4ef6\u6d4f\u89c8\u3001Jupyter \u7b49\uff09\u65e0\u6cd5\u4f7f\u7528\u3002 \u89e3\u51b3\u65b9\u6cd5 \u4e0d\u63a8\u8350\uff1a\u914d\u7f6e\u5347\u7ea7 HTTPS \u534f\u8bae\uff0c\u5373\uff08https://10.50.60.6:8080\uff09\uff0c\u4f46\u8fd9\u9700\u8981\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u914d\u7f6e SSL \u8bc1\u4e66\uff0c\u8fc7\u7a0b\u8f83\u4e3a\u7e41\u7410\u3002 \u63a8\u8350\uff1a\u5c06\u7f51\u7ad9\u7aef\u53e3\uff08http://10.50.60.6:8080\uff09\u8f6c\u53d1\u5230\u672c\u5730\u3002\u5c06\u8fdc\u7a0b\u670d\u52a1\u5668\u7684 8080 \u7aef\u53e3\u8f6c\u53d1\u5230\u672c\u5730\uff08http://localhost:8080\uff0c\u5373 http://10.50.7.103:8080\uff09\uff0cChrome \u6d4f\u89c8\u5668\u5373\u53ef\u6b63\u5e38\u8bbf\u95ee\u3002\u8fd9\u662f\u56e0\u4e3a Chrome \u5bf9 localhost \u7684\u8bbf\u95ee\u6ca1\u6709\u9650\u5236\u3002 ssh -L 8080:10.50.60.6:8080 username@10.50.60.6 \u64cd\u4f5c\u6b65\u9aa4 Windows \u5ba2\u6237\u7aef\u7535\u8111\u53ef\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff0c\u6ce8\u610f\u66ff\u6362 IP \u5730\u5740\u4e3a\u5b9e\u9645\u7684\u670d\u52a1\u5668\u5730\u5740\u548c\u7aef\u53e3\u3002 \u5ba2\u6237\u7aef\u64cd\u4f5c\u7cfb\u7edf \u670d\u52a1\u5668\u9632\u706b\u5899 8080 \u7aef\u53e3 \u4ee3\u7406\u65b9\u6cd5 Windows \u5df2\u653e\u884c netsh interface portproxy add v4tov4 listenaddress=127.0.0.1 listenport=8080 connectaddress=10.50.60.6 connectport=8080 Linux \u5df2\u653e\u884c socat TCP-LISTEN:8080,bind=127.0.0.1,fork TCP:10.50.60.6:8080 \u901a\u7528\uff08SSH\u6253\u6d1e\uff09 \u5c01\u95ed ssh -L 8080:10.50.60.6:8080 username@10.50.60.6","title":"\u8fdc\u7a0b\u670d\u52a1\u56688080\u7aef\u53e3\u8f6c\u53d1\u5230\u672c\u5730"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/","text":"\u4ec0\u4e48\u662f\u6e38\u4e50\u573a SocialSeq \u6d41\u7a0b\u6e38\u4e50\u573a\uff08Pipeline playground\uff09\u662f\u4e00\u4e2a\u57fa\u4e8edocker\u6253\u5305\u7684\u4ee3\u7801\u73af\u5883\uff0c\u65e8\u5728\u901a\u8fc7\u5728demo\u6570\u636e\u7684\u5904\u7406\u8fc7\u7a0b\u5e2e\u52a9\u7528\u6237\u7406\u89e3 SocialSeq \u6846\u67b6\u7684\u529f\u80fd\u548c\u903b\u8f91\u3002\u5b8c\u6574\u7684\u6d41\u7a0b\u5305\u62ec\u6a21\u578b\u6253\u5305\u3001\u539f\u59cb\u6570\u636e\u5904\u7406\u548c\u7ed3\u679c\u53ef\u89c6\u5316\u3002 \u4f7f\u7528 \u7f51\u9875\u6d4f\u89c8\u5668 \uff0c\u63a2\u7d22 SocialSeq \u6e38\u4e50\u573a\u3002 \u6ce8\u610f \u6e38\u4e50\u573a\u4ec5\u7528\u4e8e\u6f14\u793a SocialSeq \u6846\u67b6\u5404\u6a21\u578b\u7684 \u63a8\u7406\u8fc7\u7a0b \uff0c\u4e0d\u5305\u542b\u6a21\u578b\u7684\u8bad\u7ec3\u3002\u540e\u7eed\u7684\u6570\u636e\u5206\u6790\u8bf7\u53e6\u53c2\u7167\u6587\u6863- \u6587\u7ae0\u56fe\u8868\u590d\u73b0 \u3002 \u7cfb\u7edf\u8981\u6c42 SocialSeq \u5df2\u5728\u4ee5\u4e0b\u914d\u7f6e\u4e0a\u8fdb\u884c\u4e86\u6d4b\u8bd5\uff1a Windows 10 \uff08\u5e26 WSL2\uff09+ x86_64 + NVIDIA RTX4090 Debian 11 + x86_64 + NVIDIA A100 Ubuntu 20.04 + x86_64 + NVIDIA RTX3090 \u9700\u8981\u5b89\u88c5 Docker \u548c NVIDIA \u9a71\u52a8 \uff1a $ docker --version # Docker \u7248\u672c\u5e94 >= 24.0.6 $ nvidia-smi # NVIDIA \u9a71\u52a8\u7248\u672c\u5e94 >= 550.54 \u5b89\u88c5\u6307\u5357 \u60a8\u9700\u8981\u5b89\u88c5 Docker \u5e76\u4e0b\u8f7d\u6a21\u578b\u548c\u6570\u636e\u6587\u4ef6\uff1a \u540d\u79f0 \u7c7b\u578b \u4e0b\u8f7d\u94fe\u63a5 lilab_socialseq_pipeline_cuda_vscode_amd64_20250903.tar Docker \u955c\u50cf \u4e0b\u8f7d\ud83d\udd17 lilab_socialseq_pipeline_code_with_data_20250903.zip \u4ee3\u7801\u4e0e\u6570\u636e \u94fe\u63a5\u540c\u4e0a $ cd SOCIAL_SEQ_DOWNLOAD_PATH $ docker load -i ./lilab_socialseq_pipeline_cuda_vscode_amd64_2025*.tar $ docker images | grep lilab # \u7ed3\u679c\u5c06\u5f97\u5230\u4e00\u4e2a\u540d\u4e3a 'lilab*' \u7684\u955c\u50cf\u6587\u4ef6 $ unzip lilab_socialseq_pipeline_code_with_data_2025*.zip -d ./pipeline # \u89e3\u538b\u6587\u4ef6 $ ls ./pipeline/1-Ball_Calibration # \u68c0\u67e5\u8def\u5f84 $ docker run --rm -it -p 8080 :8080 \\ --gpus all \\ --name lilab_socialseq \\ -e PASSWORD = 2025cxf \\ -v ./pipeline:/root/Downloads/pipeline \\ lilab/socialseq:codeserver-cuda-tensorrt-torch-tensorflow-mmdet-mmpose-dannce-yolo-20250903 \\ /app/code-server/bin/code-server \u5bfc\u822a\u5230 http://localhost:8080 \u5e76\u8f93\u5165\u5bc6\u7801 2025cxf \u4ee5\u8bbf\u95ee VS Code \u670d\u52a1\u5668\u73af\u5883\uff0c\u5728\u90a3\u91cc\u60a8\u53ef\u4ee5\u67e5\u770b\u3001\u7f16\u8f91\u548c\u8fd0\u884c SocialSeq \u4ee3\u7801\u3002 \u5982\u679c\u60a8\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u8fd0\u884c Docker\uff0c\u5e94\u5c06 8080 \u7aef\u53e3\u8f6c\u53d1\u5230\u672c\u5730\u673a\u5668\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 [\u9519\u8bef\u4fee\u590d]\u3002 \u6216\u8005\u901a\u8fc7docker terminal\u8fdb\u5165\u5bb9\u5668 $ docker exec -it lilab_socialseq bash \u73af\u5883\u9a8c\u8bc1 \u5728 http://localhost:8080 \u7684 Docker VS Code \u670d\u52a1\u5668\u73af\u5883\u4e2d\uff1a $ nvidia-smi # \u5728 docker \u5bb9\u5668\u5185\uff0c\u5e94\u663e\u793a GPU \u4fe1\u606f \u9519\u8bef \u5982\u679c\u9047\u5230\u7c7b\u4f3c not found libnvidia-ml.so.1 \u7684\u9519\u8bef\uff0c\u8fd9\u662f\u6b63\u5e38\u73b0\u8c61\uff0c\u56e0\u4e3adocker\u7684nvidia\u9a71\u52a8\u5728windows\u548clinux\u4e0b\u8def\u5f84\u4e0d\u540c\u3002\u89e3\u51b3\u65b9\u6cd5\u8bf7\u53c2\u89c1 [\u9519\u8bef\u4fee\u590d]\u3002 \u6a21\u578b\u521d\u59cb\u5316 \u5c06\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u8f6c\u6362\u4e3a TensorRT \u4ee5\u63d0\u9ad8\u6027\u80fd\u3002\u7531\u4e8e TensorRT \u6a21\u578b\u7ed1\u5b9a\u5230\u7279\u5b9a\u7684\u7cfb\u7edf\u548c\u786c\u4ef6\uff0c\u6b64\u6b65\u9aa4\u5fc5\u987b\u5728\u6bcf\u53f0\u65b0\u673a\u5668\u4e0a\u6267\u884c\u3002 \u6ce8\u610f \u6b64\u6b65\u9aa4\u6bcf\u53f0\u673a\u5668\u53ea\u9700\u6267\u884c\u4e00\u6b21\u3002\u8f6c\u6362\u8fc7\u7a0b\u5c06\u82b1\u8d39 ~20 \u5206\u949f\u3002 bash /root/Downloads/pipeline/model_dannce/convert_dannce_hdf5_to_tensorrt.sh bash /root/Downloads/pipeline/model_mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9/convert_mmdet_model_to_tensorrt.sh bash /root/Downloads/pipeline/model_mmpose/convert_mmpose_model_to_tensorrt.sh bash /root/Downloads/pipeline/model_YOLOv8/convert_yolov8seg_to_tensorrt.sh # \u7ed9 LILAB-pkg \u5305\u6253\u8865\u4e01 cp -r /root/Downloads/pipeline/LILAB-pkg-patch-for-docker/* ~/LILAB-pkg/ \u8fd0\u884c\u8fd9\u4e9b\u547d\u4ee4\u540e\uff0c\u60a8\u5c06\u751f\u6210\uff1a model_mmpose/latest.full.engine model_dannce/DANNCE/train_results/MAX/latest.engine model_YOLOv8/last.full.engine model_mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9/latest.trt \u5168\u90e8\u8bbe\u7f6e\u5b8c\u6210\uff01\u60a8\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u6f14\u793a\u6570\u636e\u8fd0\u884c SocialSeq \u6e38\u4e50\u573a\u4e86\u3002 \u5feb\u901f\u5f00\u59cb \u5b8c\u6210\u4e0a\u8ff0\u5b89\u88c5\u6b65\u9aa4\u540e\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u90e8\u5206\u7684\u8bf4\u660e\u5f00\u59cb\u8fd0\u884c SocialSeq \u6e38\u4e50\u573a\u7ec4\u4ef6\u3002 1. \u5c0f\u7403\u77eb\u6b63 \u4f7f\u7528\u7403\u4f5c\u4e3a\u6821\u51c6\u76ee\u6807\u6bd4\u68cb\u76d8\u63d0\u4f9b\u66f4\u597d\u7684\u53ef\u89c1\u6027\uff0c\u80fd\u591f\u66f4\u5feb\u5730\u8fdb\u884c\u591a\u6444\u50cf\u673a\u7cfb\u7edf\u7684\u5916\u90e8\u6821\u51c6\u3002\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u89c1 \u6587\u6863 \u3002 bash /root/Downloads/pipeline/1-Ball_Calibration/run_task.sh 2. \u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u8ba1\u7b97 (SOCIAL) \u901a\u8fc7 Mask R-CNN \u5904\u7406\u591a\u6444\u50cf\u673a\u52a8\u7269\u89c6\u9891\u8fdb\u884c\u52a8\u7269\u8bc6\u522b\u548c\u5206\u5272\uff0c\u7136\u540e\u4f7f\u7528 DANNCE \u8fdb\u884c 3D \u59ff\u6001\u5173\u952e\u70b9\u63a8\u65ad\uff0c\u4f7f\u7528 SmoothNet \u8fdb\u884c\u52a8\u4f5c\u5173\u952e\u70b9\u5e73\u6ed1\u3002\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u89c1 \u6587\u6863 \u3002 bash /root/Downloads/pipeline/2-Social_3D_Pose/run_task_segmentation.sh # Mask R-CNN \u7528\u4e8e ID \u5206\u5272 bash /root/Downloads/pipeline/2-Social_3D_Pose/run_task_keypoint.sh # DANNCE \u548c SmoothNet \u7528\u4e8e 3D \u59ff\u6001\u91cd\u5efa 3. \u793e\u4ea4\u5e8f\u5217\u6807\u7b7e (SEQ) \u4ece 3D \u59ff\u6001\u4e2d\u63d0\u53d6\u793e\u4ea4\u76f8\u5173\u7279\u5f81\u5e76\u5bf9\u5176\u8fdb\u884c\u5206\u6bb5\uff08\u6bcf\u6bb5 0.8 \u79d2\uff09\u3002\u4f7f\u7528 Seq2seq-FCN \u6a21\u578b\u5bf9\u6bcf\u4e2a\u89c6\u9891\u7247\u6bb5\u8fdb\u884c\u5206\u7c7b\uff0c\u4ea7\u751f\u4e00\u81f4\u7684\u793e\u4ea4\u5e8f\u5217\u6807\u7b7e\u3002\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u89c1 \u6587\u6863 \u3002 bash /root/Downloads/pipeline/3-Sequence_Labeling/run_task.sh 4. \u95ed\u73af\u884c\u4e3a\u63a7\u5236 (LIVE) \u5efa\u7acb\u5177\u6709\u95ed\u73af\u53cd\u9988\u7684\u5b9e\u65f6\u884c\u4e3a\u5206\u6790\u7cfb\u7edf\u3002\u8fd9\u5c06\u6d89\u53ca\u591a\u6444\u50cf\u673a\u611f\u77e5\u548c\u8bc6\u522b\u52a8\u7269\u793e\u4ea4\u884c\u4e3a\uff0c\u4ee5\u5efa\u7acb\u5149\u9057\u4f20\u5b66\u6761\u4ef6\u523a\u6fc0\u3002 \u5c1a\u672a\u52a0\u5165\u6e38\u4e50\u573a\uff0c\u51c6\u5907\u4e2d","title":"\u6e38\u4e50\u573a"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#_1","text":"SocialSeq \u6d41\u7a0b\u6e38\u4e50\u573a\uff08Pipeline playground\uff09\u662f\u4e00\u4e2a\u57fa\u4e8edocker\u6253\u5305\u7684\u4ee3\u7801\u73af\u5883\uff0c\u65e8\u5728\u901a\u8fc7\u5728demo\u6570\u636e\u7684\u5904\u7406\u8fc7\u7a0b\u5e2e\u52a9\u7528\u6237\u7406\u89e3 SocialSeq \u6846\u67b6\u7684\u529f\u80fd\u548c\u903b\u8f91\u3002\u5b8c\u6574\u7684\u6d41\u7a0b\u5305\u62ec\u6a21\u578b\u6253\u5305\u3001\u539f\u59cb\u6570\u636e\u5904\u7406\u548c\u7ed3\u679c\u53ef\u89c6\u5316\u3002 \u4f7f\u7528 \u7f51\u9875\u6d4f\u89c8\u5668 \uff0c\u63a2\u7d22 SocialSeq \u6e38\u4e50\u573a\u3002 \u6ce8\u610f \u6e38\u4e50\u573a\u4ec5\u7528\u4e8e\u6f14\u793a SocialSeq \u6846\u67b6\u5404\u6a21\u578b\u7684 \u63a8\u7406\u8fc7\u7a0b \uff0c\u4e0d\u5305\u542b\u6a21\u578b\u7684\u8bad\u7ec3\u3002\u540e\u7eed\u7684\u6570\u636e\u5206\u6790\u8bf7\u53e6\u53c2\u7167\u6587\u6863- \u6587\u7ae0\u56fe\u8868\u590d\u73b0 \u3002","title":"\u4ec0\u4e48\u662f\u6e38\u4e50\u573a"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#_2","text":"SocialSeq \u5df2\u5728\u4ee5\u4e0b\u914d\u7f6e\u4e0a\u8fdb\u884c\u4e86\u6d4b\u8bd5\uff1a Windows 10 \uff08\u5e26 WSL2\uff09+ x86_64 + NVIDIA RTX4090 Debian 11 + x86_64 + NVIDIA A100 Ubuntu 20.04 + x86_64 + NVIDIA RTX3090 \u9700\u8981\u5b89\u88c5 Docker \u548c NVIDIA \u9a71\u52a8 \uff1a $ docker --version # Docker \u7248\u672c\u5e94 >= 24.0.6 $ nvidia-smi # NVIDIA \u9a71\u52a8\u7248\u672c\u5e94 >= 550.54","title":"\u7cfb\u7edf\u8981\u6c42"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#_3","text":"\u60a8\u9700\u8981\u5b89\u88c5 Docker \u5e76\u4e0b\u8f7d\u6a21\u578b\u548c\u6570\u636e\u6587\u4ef6\uff1a \u540d\u79f0 \u7c7b\u578b \u4e0b\u8f7d\u94fe\u63a5 lilab_socialseq_pipeline_cuda_vscode_amd64_20250903.tar Docker \u955c\u50cf \u4e0b\u8f7d\ud83d\udd17 lilab_socialseq_pipeline_code_with_data_20250903.zip \u4ee3\u7801\u4e0e\u6570\u636e \u94fe\u63a5\u540c\u4e0a $ cd SOCIAL_SEQ_DOWNLOAD_PATH $ docker load -i ./lilab_socialseq_pipeline_cuda_vscode_amd64_2025*.tar $ docker images | grep lilab # \u7ed3\u679c\u5c06\u5f97\u5230\u4e00\u4e2a\u540d\u4e3a 'lilab*' \u7684\u955c\u50cf\u6587\u4ef6 $ unzip lilab_socialseq_pipeline_code_with_data_2025*.zip -d ./pipeline # \u89e3\u538b\u6587\u4ef6 $ ls ./pipeline/1-Ball_Calibration # \u68c0\u67e5\u8def\u5f84 $ docker run --rm -it -p 8080 :8080 \\ --gpus all \\ --name lilab_socialseq \\ -e PASSWORD = 2025cxf \\ -v ./pipeline:/root/Downloads/pipeline \\ lilab/socialseq:codeserver-cuda-tensorrt-torch-tensorflow-mmdet-mmpose-dannce-yolo-20250903 \\ /app/code-server/bin/code-server \u5bfc\u822a\u5230 http://localhost:8080 \u5e76\u8f93\u5165\u5bc6\u7801 2025cxf \u4ee5\u8bbf\u95ee VS Code \u670d\u52a1\u5668\u73af\u5883\uff0c\u5728\u90a3\u91cc\u60a8\u53ef\u4ee5\u67e5\u770b\u3001\u7f16\u8f91\u548c\u8fd0\u884c SocialSeq \u4ee3\u7801\u3002 \u5982\u679c\u60a8\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u8fd0\u884c Docker\uff0c\u5e94\u5c06 8080 \u7aef\u53e3\u8f6c\u53d1\u5230\u672c\u5730\u673a\u5668\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 [\u9519\u8bef\u4fee\u590d]\u3002 \u6216\u8005\u901a\u8fc7docker terminal\u8fdb\u5165\u5bb9\u5668 $ docker exec -it lilab_socialseq bash","title":"\u5b89\u88c5\u6307\u5357"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#_4","text":"\u5728 http://localhost:8080 \u7684 Docker VS Code \u670d\u52a1\u5668\u73af\u5883\u4e2d\uff1a $ nvidia-smi # \u5728 docker \u5bb9\u5668\u5185\uff0c\u5e94\u663e\u793a GPU \u4fe1\u606f \u9519\u8bef \u5982\u679c\u9047\u5230\u7c7b\u4f3c not found libnvidia-ml.so.1 \u7684\u9519\u8bef\uff0c\u8fd9\u662f\u6b63\u5e38\u73b0\u8c61\uff0c\u56e0\u4e3adocker\u7684nvidia\u9a71\u52a8\u5728windows\u548clinux\u4e0b\u8def\u5f84\u4e0d\u540c\u3002\u89e3\u51b3\u65b9\u6cd5\u8bf7\u53c2\u89c1 [\u9519\u8bef\u4fee\u590d]\u3002","title":"\u73af\u5883\u9a8c\u8bc1"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#_5","text":"\u5c06\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u8f6c\u6362\u4e3a TensorRT \u4ee5\u63d0\u9ad8\u6027\u80fd\u3002\u7531\u4e8e TensorRT \u6a21\u578b\u7ed1\u5b9a\u5230\u7279\u5b9a\u7684\u7cfb\u7edf\u548c\u786c\u4ef6\uff0c\u6b64\u6b65\u9aa4\u5fc5\u987b\u5728\u6bcf\u53f0\u65b0\u673a\u5668\u4e0a\u6267\u884c\u3002 \u6ce8\u610f \u6b64\u6b65\u9aa4\u6bcf\u53f0\u673a\u5668\u53ea\u9700\u6267\u884c\u4e00\u6b21\u3002\u8f6c\u6362\u8fc7\u7a0b\u5c06\u82b1\u8d39 ~20 \u5206\u949f\u3002 bash /root/Downloads/pipeline/model_dannce/convert_dannce_hdf5_to_tensorrt.sh bash /root/Downloads/pipeline/model_mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9/convert_mmdet_model_to_tensorrt.sh bash /root/Downloads/pipeline/model_mmpose/convert_mmpose_model_to_tensorrt.sh bash /root/Downloads/pipeline/model_YOLOv8/convert_yolov8seg_to_tensorrt.sh # \u7ed9 LILAB-pkg \u5305\u6253\u8865\u4e01 cp -r /root/Downloads/pipeline/LILAB-pkg-patch-for-docker/* ~/LILAB-pkg/ \u8fd0\u884c\u8fd9\u4e9b\u547d\u4ee4\u540e\uff0c\u60a8\u5c06\u751f\u6210\uff1a model_mmpose/latest.full.engine model_dannce/DANNCE/train_results/MAX/latest.engine model_YOLOv8/last.full.engine model_mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9/latest.trt \u5168\u90e8\u8bbe\u7f6e\u5b8c\u6210\uff01\u60a8\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u6f14\u793a\u6570\u636e\u8fd0\u884c SocialSeq \u6e38\u4e50\u573a\u4e86\u3002","title":"\u6a21\u578b\u521d\u59cb\u5316"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#_6","text":"\u5b8c\u6210\u4e0a\u8ff0\u5b89\u88c5\u6b65\u9aa4\u540e\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u90e8\u5206\u7684\u8bf4\u660e\u5f00\u59cb\u8fd0\u884c SocialSeq \u6e38\u4e50\u573a\u7ec4\u4ef6\u3002","title":"\u5feb\u901f\u5f00\u59cb"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#1","text":"\u4f7f\u7528\u7403\u4f5c\u4e3a\u6821\u51c6\u76ee\u6807\u6bd4\u68cb\u76d8\u63d0\u4f9b\u66f4\u597d\u7684\u53ef\u89c1\u6027\uff0c\u80fd\u591f\u66f4\u5feb\u5730\u8fdb\u884c\u591a\u6444\u50cf\u673a\u7cfb\u7edf\u7684\u5916\u90e8\u6821\u51c6\u3002\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u89c1 \u6587\u6863 \u3002 bash /root/Downloads/pipeline/1-Ball_Calibration/run_task.sh","title":"1. \u5c0f\u7403\u77eb\u6b63"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#2-social","text":"\u901a\u8fc7 Mask R-CNN \u5904\u7406\u591a\u6444\u50cf\u673a\u52a8\u7269\u89c6\u9891\u8fdb\u884c\u52a8\u7269\u8bc6\u522b\u548c\u5206\u5272\uff0c\u7136\u540e\u4f7f\u7528 DANNCE \u8fdb\u884c 3D \u59ff\u6001\u5173\u952e\u70b9\u63a8\u65ad\uff0c\u4f7f\u7528 SmoothNet \u8fdb\u884c\u52a8\u4f5c\u5173\u952e\u70b9\u5e73\u6ed1\u3002\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u89c1 \u6587\u6863 \u3002 bash /root/Downloads/pipeline/2-Social_3D_Pose/run_task_segmentation.sh # Mask R-CNN \u7528\u4e8e ID \u5206\u5272 bash /root/Downloads/pipeline/2-Social_3D_Pose/run_task_keypoint.sh # DANNCE \u548c SmoothNet \u7528\u4e8e 3D \u59ff\u6001\u91cd\u5efa","title":"2. \u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u8ba1\u7b97 (SOCIAL)"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#3-seq","text":"\u4ece 3D \u59ff\u6001\u4e2d\u63d0\u53d6\u793e\u4ea4\u76f8\u5173\u7279\u5f81\u5e76\u5bf9\u5176\u8fdb\u884c\u5206\u6bb5\uff08\u6bcf\u6bb5 0.8 \u79d2\uff09\u3002\u4f7f\u7528 Seq2seq-FCN \u6a21\u578b\u5bf9\u6bcf\u4e2a\u89c6\u9891\u7247\u6bb5\u8fdb\u884c\u5206\u7c7b\uff0c\u4ea7\u751f\u4e00\u81f4\u7684\u793e\u4ea4\u5e8f\u5217\u6807\u7b7e\u3002\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u89c1 \u6587\u6863 \u3002 bash /root/Downloads/pipeline/3-Sequence_Labeling/run_task.sh","title":"3. \u793e\u4ea4\u5e8f\u5217\u6807\u7b7e (SEQ)"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#4-live","text":"\u5efa\u7acb\u5177\u6709\u95ed\u73af\u53cd\u9988\u7684\u5b9e\u65f6\u884c\u4e3a\u5206\u6790\u7cfb\u7edf\u3002\u8fd9\u5c06\u6d89\u53ca\u591a\u6444\u50cf\u673a\u611f\u77e5\u548c\u8bc6\u522b\u52a8\u7269\u793e\u4ea4\u884c\u4e3a\uff0c\u4ee5\u5efa\u7acb\u5149\u9057\u4f20\u5b66\u6761\u4ef6\u523a\u6fc0\u3002 \u5c1a\u672a\u52a0\u5165\u6e38\u4e50\u573a\uff0c\u51c6\u5907\u4e2d","title":"4. \u95ed\u73af\u884c\u4e3a\u63a7\u5236 (LIVE)"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/application/","text":"\u5c0f\u7403\u77eb\u6b63\u7684\u6982\u8ff0 \u4f7f\u7528\u5c0f\u7403\u5f00\u53d1\u5c0f\u7403\u6807\u5b9a\u6d41\u7a0b\uff0c\u5b9e\u73b0\u4e86\u5feb\u901f\u7cbe\u51c6\u7684\u591a\u76f8\u673a\u6807\u5b9a\u3002\u8be6\u7ec6\u4e5f\u53ef\u4ee5\u53c2\u8003 multiview_ball_calib \u3002\u8fd9\u91cc\u53ea\u653e\u5927\u81f4\u7684\u6d41\u7a0b\u3002 \u4e3a\u4ec0\u4e48\u9700\u8981\u7528\u5c0f\u7403\u6765\u6807\u5b9a \u591a\u76f8\u673a\u5916\u53c2\u7684\u8ba1\u7b97\uff08\u4f4d\u7f6e\u548c\u65cb\u8f6c\u89d2\u5ea6\uff09\u8fd9\u5bf9\u4e8e\u5efa\u7acb\u51c6\u786e\u7684\u4e09\u7ef4\u5750\u6807\u6a21\u578b\u662f\u5fc5\u987b\u7684\u3002\u4f20\u7edf\u7684\u68cb\u76d8\u5916\u53c2\u6807\u5b9a\u65b9\u6cd5\u8981\u6c42\u591a\u4e2a\u76f8\u673a\u80fd\u591f\u540c\u65f6\u62cd\u6444\u5230\u68cb\u76d8\u7684\u6b63\u9762\u56fe\u6848\uff0c\u4f46\u5728\u73af\u7ed5\u5f0f\u591a\u76f8\u673a\u914d\u7f6e\u4e2d\uff0c\u5b58\u5728\u89c6\u89d2\u9650\u5236\u3002\u68cb\u76d8\u7684\u5e94\u7528\u6548\u7387\u4f4e\uff0c\u800c\u4f7f\u7528\u5c0f\u7403\u7684\u6548\u7387\u9ad8\u3002 \u5b9e\u9a8c\u64cd\u4f5c\u6b65\u9aa4 \u5236\u4f5c\u76f4\u5f84\u4e3a1.5 cm\u7684\u91d1\u5c5e\u9776\u7403\uff0c\u901a\u8fc7\u4e00\u6839\u77ed\u6746\u60ac\u540a\u3002\u5b9e\u9a8c\u5f00\u59cb\u524d\uff0c\u5148\u5728\u5730\u9762\u4e0a\u653e\u7f6e\u4e00\u4e2a\u68cb\u76d8\u4f4d\u4e8e\u8bb0\u5f55\u73af\u5883\u7684\u4e2d\u5fc3\uff0c\u7528\u4e8e\u5bf9\u9f50\u5750\u6807\u7cfb\u3002\u521d\u59cb\u65f6\uff0c\u5c06\u9776\u7403\u653e\u7f6e\u539f\u7406\u68cb\u76d8\uff0c\u907f\u514d\u906e\u6321\u3002\u7136\u540e\uff0c\u5f00\u542f\u8bb0\u5f55\uff0c\u5c06\u5c0f\u7403\u7ed5\u5927\u9f20\u6d3b\u52a8\u7a7a\u95f4\u5185\u904d\u53862\u5206\u949f\u3002\u4f7f\u7528OBS Studio\u8f6f\u4ef6\u91c7\u96c6\u591a\u89c6\u89d2\u89c6\u9891\uff0c\u5c0f\u7403\u8fd0\u52a8\u8f68\u8ff9\u8986\u76d6\u9700\u8981\u77eb\u6b63\u7684\u7a7a\u95f4\u4f4d\u7f6e\u3002 \u91cd\u8981\u8b66\u544a \u7403\u7684\u76f4\u5f84\u4f1a\u5f71\u54cd\u6807\u5b9a\u7cbe\u5ea6\uff0c\u5efa\u8bae\u4f7f\u7528\u76f4\u5f84\u4e3a1.5 cm\u7684\u91d1\u5c5e\u9776\u7403\u3002\u7403\u7684\u8fd0\u52a8\u901f\u5ea6\u4e0d\u8981\u592a\u5feb\uff0c\u5426\u5219\u4ea7\u751f\u8fd0\u52a8\u6a21\u7cca\uff0c\u5f71\u54cd\u6807\u5b9a\u7cbe\u5ea6\u3002 \u7528\u4ee3\u7801\u89e3\u6790\u89c6\u9891 #!/bin/bash conda activate mmdet vfile = '/PATH_to_ball/BALL____2024-01-22_14-34-01.mp4' LILAB_DIR = /home/liying_lab/chenxf/ml-project/LILAB-py/lilab bash $LILAB_DIR /multiview_scripts_dev/p_calibration.sh $vfile carl \u5176\u4e2d vfile \u662f OBS Studio \u8f6f\u4ef6\u5f55\u5236\u7684\u89c6\u9891\u6587\u4ef6\u8def\u5f84\uff0c carl \u662f\u76f8\u673a\u6807\u5b9a\u53c2\u6570\u3002\u811a\u672c\u4f1a\u81ea\u52a8\u89e3\u6790\u89c6\u9891\uff0c\u5e76\u751f\u6210\u6807\u5b9a\u7ed3\u679c\u3002 \u5e38\u7528\u7684 \u76f8\u673a\u6807\u5b9a\u53c2\u6570\u5305\u62ec\uff1a - ana : \u5927\u9f20\u884c\u4e3a\u95f41 - bob : \u5927\u9f20\u884c\u4e3a\u95f42 / \u5c0f\u6876 - carl : \u5927\u9f20\u884c\u4e3a\u95f43 / \u4e2d&\u5927\u6876\u3002 \u91cd\u8981\u8b66\u544a \u8bf7\u68c0\u67e5\u6b63\u786e\u7684\u76f8\u673a\u6807\u5b9a\u53c2\u6570\uff0c\u8fd9\u4e9b\u6807\u5b9a\u53c2\u6570\u5b58\u50a8\u4e86\u9884\u5148\u201c\u6807\u5b9a\u7684\u5185\u5b58\u201d\u3002\u6bcf\u5957\u591a\u76f8\u673a\u7cfb\u7edf\u7684\u5185\u5b58\u6709\u8f83\u5927\u533a\u522b\uff0c\u8bf7\u52ff\u6df7\u6dc6\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u6807\u5b9a\u7ed3\u679c\u4e0d\u51c6\u786e\u3002 \u6807\u5b9a\u7ed3\u679c\u5c55\u793a \u5728\u751f\u6210\u7684 *ball_keypoint.mp4 \u4e2d\u67e5\u770b\u7eff\u8272\u9884\u6d4b\u70b9\u4e0e\u5c0f\u7403\u7684\u543b\u5408\u7a0b\u5ea6\u3002\u751f\u6210\u7684 *.calibpkl \u662f\u591a\u76f8\u673a\u6a21\u578b\u6587\u4ef6\uff0c\u7528\u4e8e\u540e\u7eed\u76843D\u91cd\u5efa\u3002 \u6807\u5b9a\u7684\u7cbe\u5ea6\u8bc4\u4ef7 \u67e5\u770b\u4ee3\u7801\u8fd0\u884c\u7684\u8f93\u51fa\u3002\u5176\u4e2d Reprojection errors \u662f\u91cd\u6295\u5f71\u8bef\u5dee\uff0c\u8868\u793a\u9884\u6d4b\u70b9\u4e0e\u5b9e\u9645\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u8bef\u5dee\u8d8a\u5c0f\uff0c\u6807\u5b9a\u7cbe\u5ea6\u8d8a\u9ad8\u3002\u901a\u5e38\u5141\u8bb8\u5728 4.0+-2.0 \u50cf\u7d20\u5185\u3002 \u9519\u8bef \u8fd0\u884cp_calibration.sh\u65f6\u8f93\u51faerror pixel\u8fc7\u5927/keypoint\u89c6\u9891\u4e2d\u7eff\u70b9\u65e0\u6cd5\u6b63\u786e\u7684\u8ddf\u968f\u5c0f\u7403\uff0c\u8bf4\u660e\u6821\u6b63\u4e0d\u6b63\u786e\u3002\u65e2\u6709\u53ef\u80fd\u662f2D\u8bc6\u522b\u5c0f\u7403\u6709\u5f88\u5927\u504f\u5dee\u3002\u9700\u8981\u91cd\u65b0\u6253\u6807\uff0c\u89c1\u300aball\u7684\u6269\u589e\u8bad\u7ec3\u300b","title":"\u5e94\u7528\u573a\u666f"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/application/#_1","text":"\u4f7f\u7528\u5c0f\u7403\u5f00\u53d1\u5c0f\u7403\u6807\u5b9a\u6d41\u7a0b\uff0c\u5b9e\u73b0\u4e86\u5feb\u901f\u7cbe\u51c6\u7684\u591a\u76f8\u673a\u6807\u5b9a\u3002\u8be6\u7ec6\u4e5f\u53ef\u4ee5\u53c2\u8003 multiview_ball_calib \u3002\u8fd9\u91cc\u53ea\u653e\u5927\u81f4\u7684\u6d41\u7a0b\u3002","title":"\u5c0f\u7403\u77eb\u6b63\u7684\u6982\u8ff0"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/application/#_2","text":"\u591a\u76f8\u673a\u5916\u53c2\u7684\u8ba1\u7b97\uff08\u4f4d\u7f6e\u548c\u65cb\u8f6c\u89d2\u5ea6\uff09\u8fd9\u5bf9\u4e8e\u5efa\u7acb\u51c6\u786e\u7684\u4e09\u7ef4\u5750\u6807\u6a21\u578b\u662f\u5fc5\u987b\u7684\u3002\u4f20\u7edf\u7684\u68cb\u76d8\u5916\u53c2\u6807\u5b9a\u65b9\u6cd5\u8981\u6c42\u591a\u4e2a\u76f8\u673a\u80fd\u591f\u540c\u65f6\u62cd\u6444\u5230\u68cb\u76d8\u7684\u6b63\u9762\u56fe\u6848\uff0c\u4f46\u5728\u73af\u7ed5\u5f0f\u591a\u76f8\u673a\u914d\u7f6e\u4e2d\uff0c\u5b58\u5728\u89c6\u89d2\u9650\u5236\u3002\u68cb\u76d8\u7684\u5e94\u7528\u6548\u7387\u4f4e\uff0c\u800c\u4f7f\u7528\u5c0f\u7403\u7684\u6548\u7387\u9ad8\u3002","title":"\u4e3a\u4ec0\u4e48\u9700\u8981\u7528\u5c0f\u7403\u6765\u6807\u5b9a"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/application/#_3","text":"\u5236\u4f5c\u76f4\u5f84\u4e3a1.5 cm\u7684\u91d1\u5c5e\u9776\u7403\uff0c\u901a\u8fc7\u4e00\u6839\u77ed\u6746\u60ac\u540a\u3002\u5b9e\u9a8c\u5f00\u59cb\u524d\uff0c\u5148\u5728\u5730\u9762\u4e0a\u653e\u7f6e\u4e00\u4e2a\u68cb\u76d8\u4f4d\u4e8e\u8bb0\u5f55\u73af\u5883\u7684\u4e2d\u5fc3\uff0c\u7528\u4e8e\u5bf9\u9f50\u5750\u6807\u7cfb\u3002\u521d\u59cb\u65f6\uff0c\u5c06\u9776\u7403\u653e\u7f6e\u539f\u7406\u68cb\u76d8\uff0c\u907f\u514d\u906e\u6321\u3002\u7136\u540e\uff0c\u5f00\u542f\u8bb0\u5f55\uff0c\u5c06\u5c0f\u7403\u7ed5\u5927\u9f20\u6d3b\u52a8\u7a7a\u95f4\u5185\u904d\u53862\u5206\u949f\u3002\u4f7f\u7528OBS Studio\u8f6f\u4ef6\u91c7\u96c6\u591a\u89c6\u89d2\u89c6\u9891\uff0c\u5c0f\u7403\u8fd0\u52a8\u8f68\u8ff9\u8986\u76d6\u9700\u8981\u77eb\u6b63\u7684\u7a7a\u95f4\u4f4d\u7f6e\u3002 \u91cd\u8981\u8b66\u544a \u7403\u7684\u76f4\u5f84\u4f1a\u5f71\u54cd\u6807\u5b9a\u7cbe\u5ea6\uff0c\u5efa\u8bae\u4f7f\u7528\u76f4\u5f84\u4e3a1.5 cm\u7684\u91d1\u5c5e\u9776\u7403\u3002\u7403\u7684\u8fd0\u52a8\u901f\u5ea6\u4e0d\u8981\u592a\u5feb\uff0c\u5426\u5219\u4ea7\u751f\u8fd0\u52a8\u6a21\u7cca\uff0c\u5f71\u54cd\u6807\u5b9a\u7cbe\u5ea6\u3002","title":"\u5b9e\u9a8c\u64cd\u4f5c\u6b65\u9aa4"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/application/#_4","text":"#!/bin/bash conda activate mmdet vfile = '/PATH_to_ball/BALL____2024-01-22_14-34-01.mp4' LILAB_DIR = /home/liying_lab/chenxf/ml-project/LILAB-py/lilab bash $LILAB_DIR /multiview_scripts_dev/p_calibration.sh $vfile carl \u5176\u4e2d vfile \u662f OBS Studio \u8f6f\u4ef6\u5f55\u5236\u7684\u89c6\u9891\u6587\u4ef6\u8def\u5f84\uff0c carl \u662f\u76f8\u673a\u6807\u5b9a\u53c2\u6570\u3002\u811a\u672c\u4f1a\u81ea\u52a8\u89e3\u6790\u89c6\u9891\uff0c\u5e76\u751f\u6210\u6807\u5b9a\u7ed3\u679c\u3002 \u5e38\u7528\u7684 \u76f8\u673a\u6807\u5b9a\u53c2\u6570\u5305\u62ec\uff1a - ana : \u5927\u9f20\u884c\u4e3a\u95f41 - bob : \u5927\u9f20\u884c\u4e3a\u95f42 / \u5c0f\u6876 - carl : \u5927\u9f20\u884c\u4e3a\u95f43 / \u4e2d&\u5927\u6876\u3002 \u91cd\u8981\u8b66\u544a \u8bf7\u68c0\u67e5\u6b63\u786e\u7684\u76f8\u673a\u6807\u5b9a\u53c2\u6570\uff0c\u8fd9\u4e9b\u6807\u5b9a\u53c2\u6570\u5b58\u50a8\u4e86\u9884\u5148\u201c\u6807\u5b9a\u7684\u5185\u5b58\u201d\u3002\u6bcf\u5957\u591a\u76f8\u673a\u7cfb\u7edf\u7684\u5185\u5b58\u6709\u8f83\u5927\u533a\u522b\uff0c\u8bf7\u52ff\u6df7\u6dc6\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u6807\u5b9a\u7ed3\u679c\u4e0d\u51c6\u786e\u3002","title":"\u7528\u4ee3\u7801\u89e3\u6790\u89c6\u9891"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/application/#_5","text":"\u5728\u751f\u6210\u7684 *ball_keypoint.mp4 \u4e2d\u67e5\u770b\u7eff\u8272\u9884\u6d4b\u70b9\u4e0e\u5c0f\u7403\u7684\u543b\u5408\u7a0b\u5ea6\u3002\u751f\u6210\u7684 *.calibpkl \u662f\u591a\u76f8\u673a\u6a21\u578b\u6587\u4ef6\uff0c\u7528\u4e8e\u540e\u7eed\u76843D\u91cd\u5efa\u3002","title":"\u6807\u5b9a\u7ed3\u679c\u5c55\u793a"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/application/#_6","text":"\u67e5\u770b\u4ee3\u7801\u8fd0\u884c\u7684\u8f93\u51fa\u3002\u5176\u4e2d Reprojection errors \u662f\u91cd\u6295\u5f71\u8bef\u5dee\uff0c\u8868\u793a\u9884\u6d4b\u70b9\u4e0e\u5b9e\u9645\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u8bef\u5dee\u8d8a\u5c0f\uff0c\u6807\u5b9a\u7cbe\u5ea6\u8d8a\u9ad8\u3002\u901a\u5e38\u5141\u8bb8\u5728 4.0+-2.0 \u50cf\u7d20\u5185\u3002 \u9519\u8bef \u8fd0\u884cp_calibration.sh\u65f6\u8f93\u51faerror pixel\u8fc7\u5927/keypoint\u89c6\u9891\u4e2d\u7eff\u70b9\u65e0\u6cd5\u6b63\u786e\u7684\u8ddf\u968f\u5c0f\u7403\uff0c\u8bf4\u660e\u6821\u6b63\u4e0d\u6b63\u786e\u3002\u65e2\u6709\u53ef\u80fd\u662f2D\u8bc6\u522b\u5c0f\u7403\u6709\u5f88\u5927\u504f\u5dee\u3002\u9700\u8981\u91cd\u65b0\u6253\u6807\uff0c\u89c1\u300aball\u7684\u6269\u589e\u8bad\u7ec3\u300b","title":"\u6807\u5b9a\u7684\u7cbe\u5ea6\u8bc4\u4ef7"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/","text":"ball\u89c6\u9891\u7684\u6269\u589e\u8bad\u7ec3 \u622a\u56fe \u5728pot player\u4e2d\u8fdb\u884c\u622a\u53d6\uff0c\u5b58\u653e\u81f3\u7edf\u4e00\u4f4d\u7f6e \u627e\u56de\u6e90\u89c6\u9891\u622a\u56fe /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/outlier_refine/process_ball_dzy.sh \u6253\u6807 \u4f7f\u7528labelme\u8fdb\u884c\u6253\u6807\u3002\u8fd9\u662f\u4e2a labelme \u6807\u6ce8\u540e\u7684 json \u6587\u4ef6\u793a\u4f8b\u3002 { \"version\": \"4.2.5\", \"flags\": {}, \"shapes\": [ { \"label\": \"ball\", \"points\": [ [ 226.4642857142857, 410.74999999999994 ] ], \"group_id\": null, \"shape_type\": \"point\", \"flags\": {} } ], \"imagePath\": \"2024-02-27_21-59-28ball_bob_room2_pannel8_002675.jpg\", \"imageData\": null, \"imageHeight\": 800, \"imageWidth\": 1280 } \u91cd\u8981\u8b66\u544a \u8bf7\u4f7f\u7528labelme\u7684 point \u7c7b\u578b\uff0c\u800c\u4e0d\u662f rectangle \u7c7b\u578b\uff0c\u56e0\u4e3apoint\u7c7b\u578b\u53ef\u4ee5\u66f4\u7cbe\u786e\u5730\u6807\u6ce8\u5c0f\u7403\u7684\u4f4d\u7f6e\u3002\u6807\u7b7e\u547d\u540d\u4e3a ball \uff0c\u8bf7\u786e\u4fdd\u5728\u6253\u6807\u65f6\u4f7f\u7528\u6b63\u786e\u7684\u6807\u7b7e\u540d\u79f0\u3002 \u628a\u6570\u636e\u6587\u4ef6\u5939\u6539\u540d\u540e\u653e\u5165\u6307\u5b9a\u4f4d\u7f6e /home/liying_lab/chenxinfeng/DATA/mmpose/data/ball labelme\u683c\u5f0f\u8f6c\u6362 python -m lilab.cvutils.labelme_to_cocokeypoints_ball $LABEL_IMG_DIR \u8bad\u7ec3 /home/liying_lab/chenxinfeng/DATA/mmpose/res50_coco_ball_512x320_cam9.py \u4fee\u6539\u4ee3\u7801\uff0c\u5c06\u65b0\u589e\u7684\u6570\u636e\u6587\u4ef6\u5939\u548cjson\u6587\u4ef6\u5730\u5740\u6dfb\u52a0\u8fdb\u65b0\u7684dict cd /home/liying_lab/chenxinfeng/DATA/mmpose python tools/train.py res50_coco_ball_512x320_cam9.py \u6a21\u578b\u52a0\u901f /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/mmpose_dev/convert_model.sh \u4fee\u6539\u5bf9\u5e94\u7684\u6a21\u578b\u6587\u4ef6\u540d\u5230\u53d8\u91cf\u4e2d \u786e\u8ba4 /home/liying_lab/chenxinfeng/DATA/mmpose/work_dirs \u4e2d\u662f\u5426\u5b58\u5728\u65b0\u7684json\u7b49\uff0c\u4ee5\u53calatest.*\u7684\u66f4\u65b0\u65f6\u95f4 \u91cd\u65b0\u4ece\u5934\u8fd0\u884c\u5c0f\u7403\u5b9a\u4f4d\u4ee3\u7801 /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/multiview_scripts_dev/calibration.sh","title":"\u6570\u636e\u96c6\u5236\u4f5c&\u6a21\u578b\u66f4\u65b0"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#ball","text":"","title":"ball\u89c6\u9891\u7684\u6269\u589e\u8bad\u7ec3"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#_1","text":"\u5728pot player\u4e2d\u8fdb\u884c\u622a\u53d6\uff0c\u5b58\u653e\u81f3\u7edf\u4e00\u4f4d\u7f6e","title":"\u622a\u56fe"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#_2","text":"/home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/outlier_refine/process_ball_dzy.sh","title":"\u627e\u56de\u6e90\u89c6\u9891\u622a\u56fe"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#_3","text":"\u4f7f\u7528labelme\u8fdb\u884c\u6253\u6807\u3002\u8fd9\u662f\u4e2a labelme \u6807\u6ce8\u540e\u7684 json \u6587\u4ef6\u793a\u4f8b\u3002 { \"version\": \"4.2.5\", \"flags\": {}, \"shapes\": [ { \"label\": \"ball\", \"points\": [ [ 226.4642857142857, 410.74999999999994 ] ], \"group_id\": null, \"shape_type\": \"point\", \"flags\": {} } ], \"imagePath\": \"2024-02-27_21-59-28ball_bob_room2_pannel8_002675.jpg\", \"imageData\": null, \"imageHeight\": 800, \"imageWidth\": 1280 } \u91cd\u8981\u8b66\u544a \u8bf7\u4f7f\u7528labelme\u7684 point \u7c7b\u578b\uff0c\u800c\u4e0d\u662f rectangle \u7c7b\u578b\uff0c\u56e0\u4e3apoint\u7c7b\u578b\u53ef\u4ee5\u66f4\u7cbe\u786e\u5730\u6807\u6ce8\u5c0f\u7403\u7684\u4f4d\u7f6e\u3002\u6807\u7b7e\u547d\u540d\u4e3a ball \uff0c\u8bf7\u786e\u4fdd\u5728\u6253\u6807\u65f6\u4f7f\u7528\u6b63\u786e\u7684\u6807\u7b7e\u540d\u79f0\u3002","title":"\u6253\u6807"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#_4","text":"/home/liying_lab/chenxinfeng/DATA/mmpose/data/ball","title":"\u628a\u6570\u636e\u6587\u4ef6\u5939\u6539\u540d\u540e\u653e\u5165\u6307\u5b9a\u4f4d\u7f6e"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#labelme","text":"python -m lilab.cvutils.labelme_to_cocokeypoints_ball $LABEL_IMG_DIR","title":"labelme\u683c\u5f0f\u8f6c\u6362"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#_5","text":"/home/liying_lab/chenxinfeng/DATA/mmpose/res50_coco_ball_512x320_cam9.py \u4fee\u6539\u4ee3\u7801\uff0c\u5c06\u65b0\u589e\u7684\u6570\u636e\u6587\u4ef6\u5939\u548cjson\u6587\u4ef6\u5730\u5740\u6dfb\u52a0\u8fdb\u65b0\u7684dict cd /home/liying_lab/chenxinfeng/DATA/mmpose python tools/train.py res50_coco_ball_512x320_cam9.py","title":"\u8bad\u7ec3"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#_6","text":"/home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/mmpose_dev/convert_model.sh \u4fee\u6539\u5bf9\u5e94\u7684\u6a21\u578b\u6587\u4ef6\u540d\u5230\u53d8\u91cf\u4e2d","title":"\u6a21\u578b\u52a0\u901f"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#_7","text":"/home/liying_lab/chenxinfeng/DATA/mmpose/work_dirs \u4e2d\u662f\u5426\u5b58\u5728\u65b0\u7684json\u7b49\uff0c\u4ee5\u53calatest.*\u7684\u66f4\u65b0\u65f6\u95f4","title":"\u786e\u8ba4"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#_8","text":"/home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/multiview_scripts_dev/calibration.sh","title":"\u91cd\u65b0\u4ece\u5934\u8fd0\u884c\u5c0f\u7403\u5b9a\u4f4d\u4ee3\u7801"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/process/","text":"\u4ee3\u7801\u6d41\u7a0b \u591a\u76f8\u673a\u6a21\u578b\u7684\u6807\u5b9a\u3002\u8f93\u5165\u662f\u89c6\u9891\u6587\u4ef6\uff0c\u8f93\u51fa\u662f\u6807\u5b9a\u7ed3\u679c\u3002 #!/bin/bash conda activate mmdet vfile = '/PATH_to_ball/BALL____2024-01-22_14-34-01.mp4' LILAB_DIR = /home/liying_lab/chenxf/ml-project/LILAB-py/lilab bash $LILAB_DIR /multiview_scripts_dev/p_calibration.sh $vfile carl \u5176\u4e2d vfile \u662f OBS Studio \u8f6f\u4ef6\u5f55\u5236\u7684\u89c6\u9891\u6587\u4ef6\u8def\u5f84\uff0c carl \u662f\u76f8\u673a\u6807\u5b9a\u53c2\u6570\u3002\u811a\u672c\u4f1a\u81ea\u52a8\u89e3\u6790\u89c6\u9891\uff0c\u5e76\u751f\u6210\u6807\u5b9a\u7ed3\u679c\u3002 \u5e38\u7528\u7684 \u76f8\u673a\u6807\u5b9a\u53c2\u6570\u5305\u62ec\uff1a ana : \u5927\u9f20\u884c\u4e3a\u95f41 bob : \u5927\u9f20\u884c\u4e3a\u95f42 / \u5c0f\u6876 carl : \u5927\u9f20\u884c\u4e3a\u95f42 / \u4e2d&\u5927\u6876\u3002","title":"\u4ee3\u7801\u6d41\u7a0b"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/process/#_1","text":"\u591a\u76f8\u673a\u6a21\u578b\u7684\u6807\u5b9a\u3002\u8f93\u5165\u662f\u89c6\u9891\u6587\u4ef6\uff0c\u8f93\u51fa\u662f\u6807\u5b9a\u7ed3\u679c\u3002 #!/bin/bash conda activate mmdet vfile = '/PATH_to_ball/BALL____2024-01-22_14-34-01.mp4' LILAB_DIR = /home/liying_lab/chenxf/ml-project/LILAB-py/lilab bash $LILAB_DIR /multiview_scripts_dev/p_calibration.sh $vfile carl \u5176\u4e2d vfile \u662f OBS Studio \u8f6f\u4ef6\u5f55\u5236\u7684\u89c6\u9891\u6587\u4ef6\u8def\u5f84\uff0c carl \u662f\u76f8\u673a\u6807\u5b9a\u53c2\u6570\u3002\u811a\u672c\u4f1a\u81ea\u52a8\u89e3\u6790\u89c6\u9891\uff0c\u5e76\u751f\u6210\u6807\u5b9a\u7ed3\u679c\u3002 \u5e38\u7528\u7684 \u76f8\u673a\u6807\u5b9a\u53c2\u6570\u5305\u62ec\uff1a ana : \u5927\u9f20\u884c\u4e3a\u95f41 bob : \u5927\u9f20\u884c\u4e3a\u95f42 / \u5c0f\u6876 carl : \u5927\u9f20\u884c\u4e3a\u95f42 / \u4e2d&\u5927\u6876\u3002","title":"\u4ee3\u7801\u6d41\u7a0b"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/application/","text":"\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u91cd\u6784 \u539f\u59cb\u7684\u591a\u89c6\u89d2\u89c6\u9891\uff0c\u7ecf\u8fc7 \u5206\u5272 , \u5173\u952e\u70b9\u91cd\u6784 \u548c \u5e73\u6ed1 \u4e4b\u540e\uff0c\u83b7\u53d6\u7a33\u5b9a\u76843D\u59ff\u6001\u5750\u6807\u3002 \u539f\u59cb\u89c6\u9891 \u89c6\u9891\u6765\u81ea OBS Studio \u5f55\u5236\u76849\u89c6\u89d2\u76f8\u673a\u89c6\u9891\u3002\u591a\u76f8\u673a\u753b\u9762\u7ecf\u8fc7\u4e86\u65f6\u95f4\u540c\u6b65\uff0c\u8bef\u5dee\u57281\u5e27\u53ca\u4ee5\u5185\uff0c\u53ef\u4ee5\u5ffd\u7565\u3002 \u5206\u5272 \u4f7f\u7528Mask-RCNN\u6a21\u578b\uff0c\u8bc6\u522b\u9ed1\u3001\u767d\u9f20\u7684\u8eab\u4efd\uff0c\u5e76\u5206\u5272\u50cf\u7d20\u533a\u57df\u3002 \u5173\u952e\u70b9\u91cd\u6784 \u6267\u884c DANNCE \u5173\u952e\u70b9\u9884\u6d4b + \u795e\u7ecf\u7f51\u7edc\u5e73\u6ed1\uff0c\u83b7\u53d63D\u59ff\u6001\u3002","title":"\u5e94\u7528\u573a\u666f"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/application/#_1","text":"\u539f\u59cb\u7684\u591a\u89c6\u89d2\u89c6\u9891\uff0c\u7ecf\u8fc7 \u5206\u5272 , \u5173\u952e\u70b9\u91cd\u6784 \u548c \u5e73\u6ed1 \u4e4b\u540e\uff0c\u83b7\u53d6\u7a33\u5b9a\u76843D\u59ff\u6001\u5750\u6807\u3002","title":"\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u91cd\u6784"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/application/#_2","text":"\u89c6\u9891\u6765\u81ea OBS Studio \u5f55\u5236\u76849\u89c6\u89d2\u76f8\u673a\u89c6\u9891\u3002\u591a\u76f8\u673a\u753b\u9762\u7ecf\u8fc7\u4e86\u65f6\u95f4\u540c\u6b65\uff0c\u8bef\u5dee\u57281\u5e27\u53ca\u4ee5\u5185\uff0c\u53ef\u4ee5\u5ffd\u7565\u3002","title":"\u539f\u59cb\u89c6\u9891"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/application/#_3","text":"\u4f7f\u7528Mask-RCNN\u6a21\u578b\uff0c\u8bc6\u522b\u9ed1\u3001\u767d\u9f20\u7684\u8eab\u4efd\uff0c\u5e76\u5206\u5272\u50cf\u7d20\u533a\u57df\u3002","title":"\u5206\u5272"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/application/#_4","text":"\u6267\u884c DANNCE \u5173\u952e\u70b9\u9884\u6d4b + \u795e\u7ecf\u7f51\u7edc\u5e73\u6ed1\uff0c\u83b7\u53d63D\u59ff\u6001\u3002","title":"\u5173\u952e\u70b9\u91cd\u6784"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/","text":"\u6570\u636e\u96c6\u5236\u4f5c&\u6a21\u578b\u66f4\u65b0 \u6807\u6ce8\u5927\u9f20\u5206\u5272 \u9996\u5148\uff0c\u4f7f\u7528 Labelme \u8f6f\u4ef6\u8fdb\u884c\u6570\u636e\u6807\u6ce8\u3002\u7528 Polygon \u5de5\u5177\uff0c\u521b\u5efa\u9ed1\u9f20 rat_black \u548c\u767d\u9f20 rat_white \u7684\u6807\u7b7e\u3002 \u66f4\u65b0\u5206\u5272\u6a21\u578b \u9010\u884c\u8fd0\u884c\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u5176\u4e2d mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9.py \u662f\u6a21\u578b\u7684\u914d\u7f6e\u6587\u4ef6\uff08\u9ed8\u8ba4\uff0c\u63a8\u8350\uff09\u3002\u6709\u9700\u6c42\u53ef\u4ee5\u6539\u6210\u5176\u5b83\u7684\u6a21\u578b\u914d\u7f6e\u3002 # 1. \u6570\u636e\u5236\u5907\uff1a labelme to coco # su chenxinfeng conda activate DEEPLABCUT # \u5c06labelme\u6570\u636e\u6807\u6ce8\u7684\u6587\u4ef6\u5939\u9879\u76ee\u91cd\u547d\u540d\u3002 ## \u6ce8\u610f\u4e8b\u98791\uff1a\u6587\u4ef6\u5939\u4e0d\u8981\u6709\u4e2d\u6587\uff0c\u6253\u6807\u7684\u56fe\u7247\u4e0d\u8981\u6709\u4e2d\u6587 ## \u6ce8\u610f\u4e8b\u98792\uff1a\u6253\u6807\u7684\u56fe\u7247\u6570\u91cf n>20 \u4e3a\u4e86\u4fdd\u8bc1\u8bad\u7ec3\u6548\u679c LABEL_ME_POJECT = /mnt/liying.cibr.ac.cn_xxx/labelimages NEW_NAME = /mnt/liying.cibr.ac.cn_xxx/bw_rat_1280x800_20230524 mv $LABEL_ME_POJECT $NEW_NAME # \u5c06labelme\u6570\u636e\u6807\u6ce8\u7684\u6587\u4ef6\u5939\u9879\u76ee\u8f6c\u6362\u4e3acoco\u6570\u636e\u96c6\u683c\u5f0f\u3002 # \u6ce8\u610f\u4e8b\u9879\uff1a\u7c7b\u522b\u7684\u540d\u5b57\u8981\u53bb MMDET_DATA_TARGET \u91cc\u9762\u770b\uff0c\u4e0d\u8981\u81ea\u5df1\u4e71\u5199\u3002 python -m lilab.cvutils.labelme_to_coco $NEW_NAME # \u5c06coco\u6570\u636e\u96c6\u62c6\u5206\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u3002 -s \u53c2\u6570\u8868\u793a\u8bad\u7ec3\u96c6\u7684\u6bd4\u4f8b\uff0c0.8 \u6216 0.9\u4e3a\u5e38\u7528\u3002 python -m lilab.cvutils.coco_split -s 0 .9 ${ NEW_NAME } _trainval.json # \u62f7\u8d1d\u6253\u6807\u6570\u636e\u96c6\u5230 mmdet \u7684\u6570\u636e\u96c6\u76ee\u5f55\u4e0b MMDET_DATA_TARGET = /home/liying_lab/chenxinfeng/DATA/CBNetV2/data/rats cp -r ${ NEW_NAME } _trainval.json ${ NEW_NAME } _train.json ${ NEW_NAME } _val.json \\ ${ NEW_NAME } $MMDET_DATA_TARGET / # 2. \u6a21\u578b\u8bad\u7ec3 conda activate mmpose cd /home/liying_lab/chenxinfeng/DATA/CBNetV2/ # \u4fee\u6539\u914d\u7f6e\u6587\u4ef6\uff0c\u4f7f\u7528vscode\u6253\u5f00\u3002 # \u4fee\u6539\u5176\u4e2d\u7684 `data` \u5b57\u6bb5\uff0c\u6307\u5411\u521a\u521a\u62f7\u8d1d\u7684coco\u6570\u636e\u96c6\u76ee\u5f55\u3002 CONFIG = $PWD /mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9.py echo $CONFIG # \u4f7f\u7528\u591a GPU \u6216\u5355 GPU \u8bad\u7ec3\u6a21\u578b # tools/dist_train.sh $CONFIG 4 python tools/train.py $CONFIG # 3. \u6a21\u578b\u52a0\u901f python -m lilab.mmdet_dev.convert_mmdet2trt $CONFIG # 4. \u67e5\u770b\u6a21\u578b\u662f\u5426\u66f4\u65b0\u6210\u529f ls -lh work_dirs/mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9/latest.* \u6700\u540e\u5f97\u5230\u66f4\u65b0\u7684 latest.trt \u6a21\u578b\u6743\u91cd\u6587\u4ef6\u3002 \u6807\u6ce8\u5927\u9f203D\u5173\u952e\u70b9 \u9996\u5148\uff0c\u4f7f\u7528 Label3D_Manager \u8fdb\u884c\u6570\u636e\u6807\u6ce8\u3002Label3D_manager \u662f\u5728\u5b98\u65b9\u7248\u672c\u4e0a\u505a\u66f4\u6539\uff0c\u4ee5\u9002\u5e94OBS \u5f55\u5236\u7684\u89c6\u9891\uff0c\u5df2\u7ecf\u4f7f\u7528\u5927\u9f20\u768414\u4e2a\u5173\u952e\u70b9\u3002 \u5e94\u8be5\u5f97\u5230 anno.mat \u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542b\u6807\u6ce8\u76843D\u5173\u952e\u70b9\u4fe1\u606f\u3002 \u5236\u5907\u6570\u636e\u96c6 conda activate mmdet source='/mnt/liying.cibr.ac.cn_usb3/wsy/ysj/segpkl/outframes' datadir='/home/liying_lab/chenxinfeng/DATA/dannce/data/bw_rat_1280x800x9_2024-11-27_photometry_voxel' cp -r $source $datadir python -m lilab.dannce.s1_anno2dataset $datadir/anno.mat # \u627e\u5230\u751f\u6210\u7684*_voxel_anno_dannce.pkl\uff0c\u4f7f\u7528\u4ee3\u7801\u4fee\u6b63\u5176\u8eab\u4f53\u4e2d\u5fc3\u70b9\uff08\u4ee52D mask \u4e2d\u5fc3\u70b9\uff0c\u4e09\u89d2\u5316\u5f97\u52303D\u4e2d\u5fc3\u70b9\uff09\u3002 python -m lilab.dannce.p2_dataset_com3d_refine_byseg ${datadir}_anno_dannce.pkl \u8bad\u7ec3DANNCE\u6a21\u578b \u9010\u884c\u8fd0\u884c\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u7528\u4e8e\u8bad\u7ec3\u6a21\u578b\u3002\u5176\u4e2d rat14_1280x800x9_mono_young \u662f\u4e00\u4e2a\u5df2\u7ecf\u88ab\u521b\u5efa\u8fc7\u7684\u9879\u76ee\u73af\u5883\uff08\u63a8\u8350\uff09\u3002\u6839\u636e\u9700\u6c42\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9\u5176\u5b83\u9879\u76ee\u3002 # cd \u8fdb\u5165\u9879\u76ee\u8def\u5f84 cd /home/liying_lab/chenxinfeng/DATA/dannce/demo/rat14_1280x800x9_mono_young # \u6539\u53d8\u9879\u76ee\u914d\u7f6e\u6587\u4ef6\uff0c\u6dfb\u52a0 \u6570\u636e\u96c6\u8def\u5f84\u3002 echo io_max.yaml # \u4fee\u6539 io_max.yaml, \u6dfb\u52a0\u6570\u636e\u5230 exp/label3d_file python -m dannce.cli_train ../../configs/dannce_rat14_1280x800x9_max_config.yaml \u8f6c\u5316\u6a21\u578b\u4e3a tensorrt \u52a0\u901f\u7684\u6a21\u578b\u3002 # Offline \u573a\u666f\u3002 cd /home/liying_lab/chenxinfeng/DATA/dannce/demo/rat14_1280x800x9_mono_young/DANNCE/train_results/MAX python -m lilab.dannce.t1_keras2onnx latest.hdf5 choosecuda 3 ,0,1,2 polygraphy run /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/tensorrt/constrained_network.py \\ --precision-constraints obey \\ --trt-min-shapes input_1: [ 1 ,64,64,64,9 ] \\ --trt-max-shapes input_1: [ 4 ,64,64,64,9 ] \\ --trt-opt-shapes input_1: [ 2 ,64,64,64,9 ] \\ --trt --fp16 --save-engine latest_dynamic.engine & choosecuda 0 ,1,2,3 polygraphy run /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/tensorrt/constrained_network.py \\ --precision-constraints obey \\ --input-shapes input_1: [ 2 ,64,64,64,9 ] \\ --trt --fp16 --save-engine latest.engine & # Realtime \u573a\u666f python -m lilab.dannce.t1_keras2onnx_rt latest.hdf5 choosecuda 1 ,2,3,0 polygraphy run /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/tensorrt/constrained_network_rt.py \\ --precision-constraints obey \\ --trt-min-shapes input_1: [ 1 ,64,64,64,9 ] \\ --trt-max-shapes input_1: [ 2 ,64,64,64,9 ] \\ --trt-opt-shapes input_1: [ 1 ,64,64,64,9 ] \\ --trt --fp16 --save-engine latest.idx.engine wait \u6700\u540e\u5f97\u5230 latest_dynamic.engine \u548c latest.idx.engine \u3002","title":"\u6570\u636e\u96c6\u5236\u4f5c&\u6a21\u578b\u66f4\u65b0"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/#_1","text":"","title":"\u6570\u636e\u96c6\u5236\u4f5c&amp;\u6a21\u578b\u66f4\u65b0"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/#_2","text":"\u9996\u5148\uff0c\u4f7f\u7528 Labelme \u8f6f\u4ef6\u8fdb\u884c\u6570\u636e\u6807\u6ce8\u3002\u7528 Polygon \u5de5\u5177\uff0c\u521b\u5efa\u9ed1\u9f20 rat_black \u548c\u767d\u9f20 rat_white \u7684\u6807\u7b7e\u3002","title":"\u6807\u6ce8\u5927\u9f20\u5206\u5272"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/#_3","text":"\u9010\u884c\u8fd0\u884c\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u5176\u4e2d mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9.py \u662f\u6a21\u578b\u7684\u914d\u7f6e\u6587\u4ef6\uff08\u9ed8\u8ba4\uff0c\u63a8\u8350\uff09\u3002\u6709\u9700\u6c42\u53ef\u4ee5\u6539\u6210\u5176\u5b83\u7684\u6a21\u578b\u914d\u7f6e\u3002 # 1. \u6570\u636e\u5236\u5907\uff1a labelme to coco # su chenxinfeng conda activate DEEPLABCUT # \u5c06labelme\u6570\u636e\u6807\u6ce8\u7684\u6587\u4ef6\u5939\u9879\u76ee\u91cd\u547d\u540d\u3002 ## \u6ce8\u610f\u4e8b\u98791\uff1a\u6587\u4ef6\u5939\u4e0d\u8981\u6709\u4e2d\u6587\uff0c\u6253\u6807\u7684\u56fe\u7247\u4e0d\u8981\u6709\u4e2d\u6587 ## \u6ce8\u610f\u4e8b\u98792\uff1a\u6253\u6807\u7684\u56fe\u7247\u6570\u91cf n>20 \u4e3a\u4e86\u4fdd\u8bc1\u8bad\u7ec3\u6548\u679c LABEL_ME_POJECT = /mnt/liying.cibr.ac.cn_xxx/labelimages NEW_NAME = /mnt/liying.cibr.ac.cn_xxx/bw_rat_1280x800_20230524 mv $LABEL_ME_POJECT $NEW_NAME # \u5c06labelme\u6570\u636e\u6807\u6ce8\u7684\u6587\u4ef6\u5939\u9879\u76ee\u8f6c\u6362\u4e3acoco\u6570\u636e\u96c6\u683c\u5f0f\u3002 # \u6ce8\u610f\u4e8b\u9879\uff1a\u7c7b\u522b\u7684\u540d\u5b57\u8981\u53bb MMDET_DATA_TARGET \u91cc\u9762\u770b\uff0c\u4e0d\u8981\u81ea\u5df1\u4e71\u5199\u3002 python -m lilab.cvutils.labelme_to_coco $NEW_NAME # \u5c06coco\u6570\u636e\u96c6\u62c6\u5206\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u3002 -s \u53c2\u6570\u8868\u793a\u8bad\u7ec3\u96c6\u7684\u6bd4\u4f8b\uff0c0.8 \u6216 0.9\u4e3a\u5e38\u7528\u3002 python -m lilab.cvutils.coco_split -s 0 .9 ${ NEW_NAME } _trainval.json # \u62f7\u8d1d\u6253\u6807\u6570\u636e\u96c6\u5230 mmdet \u7684\u6570\u636e\u96c6\u76ee\u5f55\u4e0b MMDET_DATA_TARGET = /home/liying_lab/chenxinfeng/DATA/CBNetV2/data/rats cp -r ${ NEW_NAME } _trainval.json ${ NEW_NAME } _train.json ${ NEW_NAME } _val.json \\ ${ NEW_NAME } $MMDET_DATA_TARGET / # 2. \u6a21\u578b\u8bad\u7ec3 conda activate mmpose cd /home/liying_lab/chenxinfeng/DATA/CBNetV2/ # \u4fee\u6539\u914d\u7f6e\u6587\u4ef6\uff0c\u4f7f\u7528vscode\u6253\u5f00\u3002 # \u4fee\u6539\u5176\u4e2d\u7684 `data` \u5b57\u6bb5\uff0c\u6307\u5411\u521a\u521a\u62f7\u8d1d\u7684coco\u6570\u636e\u96c6\u76ee\u5f55\u3002 CONFIG = $PWD /mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9.py echo $CONFIG # \u4f7f\u7528\u591a GPU \u6216\u5355 GPU \u8bad\u7ec3\u6a21\u578b # tools/dist_train.sh $CONFIG 4 python tools/train.py $CONFIG # 3. \u6a21\u578b\u52a0\u901f python -m lilab.mmdet_dev.convert_mmdet2trt $CONFIG # 4. \u67e5\u770b\u6a21\u578b\u662f\u5426\u66f4\u65b0\u6210\u529f ls -lh work_dirs/mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9/latest.* \u6700\u540e\u5f97\u5230\u66f4\u65b0\u7684 latest.trt \u6a21\u578b\u6743\u91cd\u6587\u4ef6\u3002","title":"\u66f4\u65b0\u5206\u5272\u6a21\u578b"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/#3d","text":"\u9996\u5148\uff0c\u4f7f\u7528 Label3D_Manager \u8fdb\u884c\u6570\u636e\u6807\u6ce8\u3002Label3D_manager \u662f\u5728\u5b98\u65b9\u7248\u672c\u4e0a\u505a\u66f4\u6539\uff0c\u4ee5\u9002\u5e94OBS \u5f55\u5236\u7684\u89c6\u9891\uff0c\u5df2\u7ecf\u4f7f\u7528\u5927\u9f20\u768414\u4e2a\u5173\u952e\u70b9\u3002 \u5e94\u8be5\u5f97\u5230 anno.mat \u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542b\u6807\u6ce8\u76843D\u5173\u952e\u70b9\u4fe1\u606f\u3002","title":"\u6807\u6ce8\u5927\u9f203D\u5173\u952e\u70b9"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/#_4","text":"conda activate mmdet source='/mnt/liying.cibr.ac.cn_usb3/wsy/ysj/segpkl/outframes' datadir='/home/liying_lab/chenxinfeng/DATA/dannce/data/bw_rat_1280x800x9_2024-11-27_photometry_voxel' cp -r $source $datadir python -m lilab.dannce.s1_anno2dataset $datadir/anno.mat # \u627e\u5230\u751f\u6210\u7684*_voxel_anno_dannce.pkl\uff0c\u4f7f\u7528\u4ee3\u7801\u4fee\u6b63\u5176\u8eab\u4f53\u4e2d\u5fc3\u70b9\uff08\u4ee52D mask \u4e2d\u5fc3\u70b9\uff0c\u4e09\u89d2\u5316\u5f97\u52303D\u4e2d\u5fc3\u70b9\uff09\u3002 python -m lilab.dannce.p2_dataset_com3d_refine_byseg ${datadir}_anno_dannce.pkl","title":"\u5236\u5907\u6570\u636e\u96c6"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/#dannce","text":"\u9010\u884c\u8fd0\u884c\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u7528\u4e8e\u8bad\u7ec3\u6a21\u578b\u3002\u5176\u4e2d rat14_1280x800x9_mono_young \u662f\u4e00\u4e2a\u5df2\u7ecf\u88ab\u521b\u5efa\u8fc7\u7684\u9879\u76ee\u73af\u5883\uff08\u63a8\u8350\uff09\u3002\u6839\u636e\u9700\u6c42\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9\u5176\u5b83\u9879\u76ee\u3002 # cd \u8fdb\u5165\u9879\u76ee\u8def\u5f84 cd /home/liying_lab/chenxinfeng/DATA/dannce/demo/rat14_1280x800x9_mono_young # \u6539\u53d8\u9879\u76ee\u914d\u7f6e\u6587\u4ef6\uff0c\u6dfb\u52a0 \u6570\u636e\u96c6\u8def\u5f84\u3002 echo io_max.yaml # \u4fee\u6539 io_max.yaml, \u6dfb\u52a0\u6570\u636e\u5230 exp/label3d_file python -m dannce.cli_train ../../configs/dannce_rat14_1280x800x9_max_config.yaml \u8f6c\u5316\u6a21\u578b\u4e3a tensorrt \u52a0\u901f\u7684\u6a21\u578b\u3002 # Offline \u573a\u666f\u3002 cd /home/liying_lab/chenxinfeng/DATA/dannce/demo/rat14_1280x800x9_mono_young/DANNCE/train_results/MAX python -m lilab.dannce.t1_keras2onnx latest.hdf5 choosecuda 3 ,0,1,2 polygraphy run /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/tensorrt/constrained_network.py \\ --precision-constraints obey \\ --trt-min-shapes input_1: [ 1 ,64,64,64,9 ] \\ --trt-max-shapes input_1: [ 4 ,64,64,64,9 ] \\ --trt-opt-shapes input_1: [ 2 ,64,64,64,9 ] \\ --trt --fp16 --save-engine latest_dynamic.engine & choosecuda 0 ,1,2,3 polygraphy run /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/tensorrt/constrained_network.py \\ --precision-constraints obey \\ --input-shapes input_1: [ 2 ,64,64,64,9 ] \\ --trt --fp16 --save-engine latest.engine & # Realtime \u573a\u666f python -m lilab.dannce.t1_keras2onnx_rt latest.hdf5 choosecuda 1 ,2,3,0 polygraphy run /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/tensorrt/constrained_network_rt.py \\ --precision-constraints obey \\ --trt-min-shapes input_1: [ 1 ,64,64,64,9 ] \\ --trt-max-shapes input_1: [ 2 ,64,64,64,9 ] \\ --trt-opt-shapes input_1: [ 1 ,64,64,64,9 ] \\ --trt --fp16 --save-engine latest.idx.engine wait \u6700\u540e\u5f97\u5230 latest_dynamic.engine \u548c latest.idx.engine \u3002","title":"\u8bad\u7ec3DANNCE\u6a21\u578b"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset_pick/","text":"\u6570\u636e\u96c6\u5236\u4f5c\u65f6 1. \u5206\u5272\u56fe\u7247\u9009\u53d6 \u65b9\u6cd51\uff0c\u53ea\u6311\u9009\u9519\u8bef\u5e27\u6253\u6807\uff0c\u8fd9\u6837\u6548\u7387\u6bd4\u8f83\u9ad8\u3002\u4f7f\u7528Potplayer \u64ad\u653e *_mask.mp4 \uff0c\u622a\u56fe\u9519\u8bef\u5e27\uff0c\u8fdb\u884c\u622a\u53d6\uff0c\u5b58\u653e\u81f3\u7edf\u4e00\u4f4d\u7f6e\u3002\u5206\u9519\u8bef\u89c6\u89d2\u5e76\u6839\u636e\u5de6\u4e0a\u89d2\u5e27\u6570\u627e\u56de\u6e90\u89c6\u9891\u3002 \u65b9\u6cd52\uff0c\u968f\u673a\u62bd\u53d6\u6307\u5b9a\u6570\u76ee\u7684\u5e27\u5e76\u968f\u673a\u622a\u53d6\u4e00\u4e2a\u89c6\u89d2\uff0c\u6548\u7387\u6bd4\u8f83\u4f4e\u3002 \u53ef\u4ee5\u53c2\u8003\uff1a /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/outlier_refine/process_mmdet_dzy.sh 1. \u56fe\u7247\u6253\u6807 \u6dd8\u5b9d","title":"\u6570\u636e\u96c6\u5236\u4f5c\u65f6"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset_pick/#_1","text":"","title":"\u6570\u636e\u96c6\u5236\u4f5c\u65f6"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset_pick/#1","text":"\u65b9\u6cd51\uff0c\u53ea\u6311\u9009\u9519\u8bef\u5e27\u6253\u6807\uff0c\u8fd9\u6837\u6548\u7387\u6bd4\u8f83\u9ad8\u3002\u4f7f\u7528Potplayer \u64ad\u653e *_mask.mp4 \uff0c\u622a\u56fe\u9519\u8bef\u5e27\uff0c\u8fdb\u884c\u622a\u53d6\uff0c\u5b58\u653e\u81f3\u7edf\u4e00\u4f4d\u7f6e\u3002\u5206\u9519\u8bef\u89c6\u89d2\u5e76\u6839\u636e\u5de6\u4e0a\u89d2\u5e27\u6570\u627e\u56de\u6e90\u89c6\u9891\u3002 \u65b9\u6cd52\uff0c\u968f\u673a\u62bd\u53d6\u6307\u5b9a\u6570\u76ee\u7684\u5e27\u5e76\u968f\u673a\u622a\u53d6\u4e00\u4e2a\u89c6\u89d2\uff0c\u6548\u7387\u6bd4\u8f83\u4f4e\u3002 \u53ef\u4ee5\u53c2\u8003\uff1a /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/outlier_refine/process_mmdet_dzy.sh","title":"1. \u5206\u5272\u56fe\u7247\u9009\u53d6"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset_pick/#1_1","text":"\u6dd8\u5b9d","title":"1. \u56fe\u7247\u6253\u6807"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/process/","text":"\u4ee3\u7801\u6d41\u7a0b \u5f00\u53d1\u8005\uff1axxx \u7ef4\u62a4\uff1axxx \u5206\u5272\u591a\u52a8\u7269 # %% batch # step0 # conda activate mmdet source activate mmdet vdir = ` w2l '\\\\liying.cibr.ac.cn\\Data_Temp\\Chenxinfeng\\multiview_9\\chenxf\\00_BehaviorAnalysis-seq2seq\\SexMating' ` # \u9009\u62e9\u5f53\u5929\u7684\u5c0f\u7403\u77eb\u6b63\u6587\u4ef6\uff08\u591a\u76f8\u673a\u6a21\u578b\u6587\u4ef6\uff09\uff0c\u4f7f\u6570\u636e\u5177\u67093D\u4fe1\u606f\u3002 ball = ` w2l \"\\\\liying.cibr.ac.cn\\Data_Temp\\Chenxinfeng\\multiview_9\\chenxf\\carl\\2023-10-14-\\ball_2023-10-23_13-18-10.calibpkl\" ` config = /home/liying_lab/chenxinfeng/DATA/CBNetV2/mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9.py python -m lilab.mmdet_dev_multi.s1_mmdet_videos2segpkl_dilate_toCUDA $vdir --pannels carl --config $config #--maxlen 9000 python -m lilab.mmdet_dev.s3_segpkl_dilate2videoseg_canvas_mask $vdir --maxlen 9000 # check video # step2 com3d and create voxbox ls $vdir /*.segpkl | xargs -n 1 -I {} -P 4 python -m lilab.mmdet_dev.s4_segpkl_put_com3d_pro {} --calibpkl \" $ball \" # \u7ed8\u5236\u4f53\u7d20\u7a7a\u95f4\u7684\u89c6\u9891\uff08\u53ef\u9009\uff0c\u4e0d\u63a8\u8350\uff09 ls $vdir /*.segpkl | sed 's/.segpkl/.mp4/' | xargs -n 1 -P 8 -I {} python -m lilab.mmdet_dev.s4_segpkl_com3d_to_video {} --vox_size 230 # check video \u5176\u4e2d volsize \u8868\u793a\u5927\u9f20\u4f53\u7d20\u7a7a\u95f4\u7684\u8fb9\u957f\uff0c\u4f8b\u5982 xx_vol230.0.mp4 \u8868\u793a\u8fb9\u957f\u4e3a230mm\u3002\u8fb9\u957f\u6839\u636e\u5927\u9f20\u5e74\u9f84\u548c\u6027\u522b\u800c\u5b9a\uff0c\u63a8\u8350\u503c\u5982\u4e0b\uff1a Male Female DAY35 190 190 DAY50 230 220 DAY75 250 240 DAY\u6210\u5e74 260 240 \u6700\u540e\u5f97\u5230\u4e00\u7cfb\u5217\u89c6\u9891\u548c\u6587\u4ef6\uff0c\u5305\u62ec\uff1a xx_mask.mp4 - \u5206\u5272\u56fe\u50cf xx_vol230.0.mp4 - voxel \u4f53\u7d20\u7a7a\u95f4 xx.segpkl - \u5206\u5272\u7684Mask \u4e8c\u8fdb\u5236\u6570\u636e \u9a8c\u8bc1\uff1a\u6253\u5f00 xx_mask.mp4 \u89c6\u9891\uff0c\u67e5\u770b\u5206\u5272\u662f\u5426\u6b63\u786e\u3002\u6253\u5f00 xx_vol230.0.mp4 \u89c6\u9891\uff0c\u67e5\u770b voxel \u4f53\u7d20\u5c3a\u5bf8\u662f\u5426\u5339\u914d\u3002 \u63d0\u793a \u4e00\u6b21\u6027\u4e0d\u8981\u8dd1\u592a\u591a\u89c6\u9891\u3002\u5148\u8dd1\u51e0\u4e2a\u89c6\u9891\u8bd5\u8bd5\u770b\u3002\u6548\u679c\u4f73\uff0c\u5219\u53ef\u4ee5\u63a5\u7740\u8fd0\u884c\u5269\u4e0b\u7684\u89c6\u9891\u3002\u5982\u679c\u6548\u679c\u4e0d\u4f73\uff0c\u5219\u8981\u66f4\u65b0\u6a21\u578b\u540e\uff0c\u518d\u91cd\u65b0\u8dd1\u89c6\u9891\u3002 \u9519\u8bef \u5982\u679c\u5f00 xx_mask.mp4 \u89c6\u9891\u5206\u5272\u6548\u679c\u5dee\uff0c\u5219\u9700\u8981\u91cd\u4fee\u5206\u5272\u6807\u6ce8\uff0c\u66f4\u65b0\u6a21\u578b\u3002\u89c1\u6570\u636e\u4e0e\u6a21\u578b\u66f4\u65b0\u7ae0\u8282\u3002\u5982\u679c xx_vol230.0.mp4 \u4f53\u7d20\u65b9\u683c\u504f\u5dee\u8f83\u5927\uff0c\u8bf4\u660e\u5c0f\u7403\u77eb\u6b63\u7684\u6587\u4ef6\u6709\u9519\u8bef\uff0c\u9700\u8981\u4ece\u65b0\u77eb\u6b63\u3002 \u9884\u6d4b\u5173\u952e\u70b9 #!/bin/bash conda activate mmdet cd /home/liying_lab/chenxinfeng/DATA/dannce/demo/rat14_1280x800x9_mono_young # 1. \u51c6\u5907\u6570\u636e volsize_vfiles = \" 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-21_15-42-11D1bC1w.segpkl 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-21_15-16-15C1bD1w.segpkl 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-21_14-32-25A1bB1w.segpkl 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-21_14-54-14B1bA1w.segpkl 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-20_16-45-22D1bB2w.segpkl \" volsize_vfiles = $( echo \" $volsize_vfiles \" | grep -v '^[[:space:]]*$' ) #echo \"$volsize_vfiles\" vfiles = $( echo \" $volsize_vfiles \" | awk '{print $3}' ) #echo \"$vfiles\" # 2. \u7528DANNCE \u9884\u6d4b\u5f97\u52303D\u59ff\u6001, nGPU=4 echo \" $volsize_vfiles \" | sed 's/.segpkl/.mp4/' | cat -n | xargs -P 4 -l bash -c 'python -m dannce.cli_trt ../../configs/dannce_rat14_1280x800x9_max_config.yaml --vol-size-list $1 $2 --video-file $3 --gpu-id $(($0%4))' # xargs -P 2 \u8868\u793a\u4f7f\u75282\u4e2aGPU\uff0c\u914d\u5408 choosecuda 0,1,2,3 \u786e\u8ba4\u4f7f\u7528gpu\u6570\u91cf # 3. \u7ed8\u5236\u201c\u672a\u5e73\u6ed1\u201d\u7684\u59ff\u6001\u8f68\u8ff9 \uff08\u53ef\u9009\uff09 # echo \"$vfiles\" | sed 's/.segpkl/.matcalibpkl/' | xargs -P 6 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d $0 --iview 3' # 4. \u7ed8\u5236\u5e73\u6ed1\u540e\u7684\u59ff\u6001\u8f68\u8ff9 echo \" $vfiles \" | sed 's/.segpkl/.matcalibpkl/' | xargs -l -P 6 -r python -m lilab.smoothnet.s1_matcalibpkl2smooth_foot_dzy echo \" $vfiles \" | sed 's/.segpkl/.smoothed_foot.matcalibpkl/' | xargs -P 6 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d $0 --iview 3 --postfix smoothed_foot ' # 4B \u5c06\u4e24\u4e2a\u89c6\u89d2\u4e32\u8fde\u7ed8\u5236 \uff08\u53ef\u9009\uff09 # echo \"$vfiles\" | sed 's/.segpkl/.smoothed_foot.matcalibpkl/' | xargs -P 8 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d_2view $0 --postfix smoothed_foot' # 5 \u521b\u5efa400p \u7f29\u7565\u89c6\u9891\u6587\u4ef6\uff08\u53ef\u9009\uff09 # bash /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/openlabcluster_postprocess/create_400p.sh \\ # /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a \u5176\u4e2d volsize_vfiles \u8868\u793a\u4e00\u4e2a\u89c6\u9891\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u5206\u522b\u662f\u9ed1\u9f20\u7684voxelsize(280), \u767d\u9f20\u7684voxelsize(280) \u548c\u89c6\u9891\u540c\u540d\u7684\u5206\u5272\u6587\u4ef6 *.segpkl \u3002\u7528\u4e24\u4e2a\u4e0d\u540c\u7684voxel\uff0c\u53ef\u4ee5\u533a\u5206\u4e0d\u540c\u4f53\u578b\u7684\u9f20\uff0c\u4f8b\u5982\u96cc\u6027\u4e0e\u96c4\u6027\u3002 \u8b66\u544a \u592a\u5c0f\u7684voxelsize \u53ef\u80fd\u91c7\u96c6\u7684\u5927\u9f20\u56fe\u50cf\u4e0d\u5b8c\u6574\uff0c\u8ba9\u5173\u952e\u70b9\u8d8a\u754c\u3002\u592a\u5927\u7684voxelsize\u53ef\u80fd\u91c7\u96c6\u7684\u5927\u9f20\u56fe\u50cf\u592a\u6a21\u7cca\uff0c\u964d\u4f4e\u7cbe\u5ea6\u3002 \u5f97\u5230\u7ed3\u679c\uff1a xx.smoothed_foot.matcalibpkl - \u4e24\u53ea\u9f20\u76843D\u5173\u952e\u70b9\u5e8f\u5217\u3002 xx_3_sktdraw_smoothed_foot.mp4 - \u4e24\u53ea\u9f20\u76843D\u5173\u952e\u70b9\u89c6\u9891\u3002 xx_400p.mp4 - smoothed_foot.mp4 \u6587\u4ef6\u7684 400x400 \u5206\u8fa8\u7387\u538b\u7f29\uff0c\u51cf\u5c11\u6587\u4ef6\u5927\u5c0f\u548c\u54cd\u5e94\u901f\u5ea6\u3002 \u9a8c\u8bc1\uff1a\u6253\u5f00 xx_3_sktdraw_smoothed_foot.mp4 \u89c6\u9891\uff0c\u67e5\u770b\u5173\u952e\u70b9\u4f4d\u7f6e\u662f\u5426\u6b63\u786e\u3002\u4fdd\u5b58\u597d xx.smoothed_foot.matcalibpkl \uff0c\u8fd9\u662f\u5305\u542b\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u5750\u6807\u7684\u91cd\u8981\u6587\u4ef6\u3002 \u9519\u8bef \u5982\u679c\u5f00 xx_3_sktdraw_smoothed_foot.mp4 \u89c6\u9891\u5206\u5272\u6548\u679c\u5dee\uff0c\u53ef\u4ee5\u68c0\u67e5\u504f\u5dee\u5bf9\u5e94\u65f6\u523b\u7684\u5206\u5272\u89c6\u9891\uff0c\u610f\u89c1\u68c0\u67e5\u5c0f\u7403\u77eb\u6b63\u6587\u4ef6\u3002DANNCE\u6a21\u578b\u4e00\u822c\u6765\u8bf4\u975e\u5e38\u7a33\u5b9a\uff0cMASK-RCNN \u5206\u5272\u6a21\u578b\u5bb9\u6613\u6536\u5230\u73af\u5883\u5149\u548c\u80cc\u666f\u5f71\u54cd\uff0c\u9700\u8981\u7ecf\u5e38\u52a0\u8bad\u3002\u89c1\u6570\u636e\u4e0e\u6a21\u578b\u66f4\u65b0\u7ae0\u8282\u3002","title":"\u4ee3\u7801\u6d41\u7a0b"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/process/#_1","text":"\u5f00\u53d1\u8005\uff1axxx \u7ef4\u62a4\uff1axxx","title":"\u4ee3\u7801\u6d41\u7a0b"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/process/#_2","text":"# %% batch # step0 # conda activate mmdet source activate mmdet vdir = ` w2l '\\\\liying.cibr.ac.cn\\Data_Temp\\Chenxinfeng\\multiview_9\\chenxf\\00_BehaviorAnalysis-seq2seq\\SexMating' ` # \u9009\u62e9\u5f53\u5929\u7684\u5c0f\u7403\u77eb\u6b63\u6587\u4ef6\uff08\u591a\u76f8\u673a\u6a21\u578b\u6587\u4ef6\uff09\uff0c\u4f7f\u6570\u636e\u5177\u67093D\u4fe1\u606f\u3002 ball = ` w2l \"\\\\liying.cibr.ac.cn\\Data_Temp\\Chenxinfeng\\multiview_9\\chenxf\\carl\\2023-10-14-\\ball_2023-10-23_13-18-10.calibpkl\" ` config = /home/liying_lab/chenxinfeng/DATA/CBNetV2/mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9.py python -m lilab.mmdet_dev_multi.s1_mmdet_videos2segpkl_dilate_toCUDA $vdir --pannels carl --config $config #--maxlen 9000 python -m lilab.mmdet_dev.s3_segpkl_dilate2videoseg_canvas_mask $vdir --maxlen 9000 # check video # step2 com3d and create voxbox ls $vdir /*.segpkl | xargs -n 1 -I {} -P 4 python -m lilab.mmdet_dev.s4_segpkl_put_com3d_pro {} --calibpkl \" $ball \" # \u7ed8\u5236\u4f53\u7d20\u7a7a\u95f4\u7684\u89c6\u9891\uff08\u53ef\u9009\uff0c\u4e0d\u63a8\u8350\uff09 ls $vdir /*.segpkl | sed 's/.segpkl/.mp4/' | xargs -n 1 -P 8 -I {} python -m lilab.mmdet_dev.s4_segpkl_com3d_to_video {} --vox_size 230 # check video \u5176\u4e2d volsize \u8868\u793a\u5927\u9f20\u4f53\u7d20\u7a7a\u95f4\u7684\u8fb9\u957f\uff0c\u4f8b\u5982 xx_vol230.0.mp4 \u8868\u793a\u8fb9\u957f\u4e3a230mm\u3002\u8fb9\u957f\u6839\u636e\u5927\u9f20\u5e74\u9f84\u548c\u6027\u522b\u800c\u5b9a\uff0c\u63a8\u8350\u503c\u5982\u4e0b\uff1a Male Female DAY35 190 190 DAY50 230 220 DAY75 250 240 DAY\u6210\u5e74 260 240 \u6700\u540e\u5f97\u5230\u4e00\u7cfb\u5217\u89c6\u9891\u548c\u6587\u4ef6\uff0c\u5305\u62ec\uff1a xx_mask.mp4 - \u5206\u5272\u56fe\u50cf xx_vol230.0.mp4 - voxel \u4f53\u7d20\u7a7a\u95f4 xx.segpkl - \u5206\u5272\u7684Mask \u4e8c\u8fdb\u5236\u6570\u636e \u9a8c\u8bc1\uff1a\u6253\u5f00 xx_mask.mp4 \u89c6\u9891\uff0c\u67e5\u770b\u5206\u5272\u662f\u5426\u6b63\u786e\u3002\u6253\u5f00 xx_vol230.0.mp4 \u89c6\u9891\uff0c\u67e5\u770b voxel \u4f53\u7d20\u5c3a\u5bf8\u662f\u5426\u5339\u914d\u3002 \u63d0\u793a \u4e00\u6b21\u6027\u4e0d\u8981\u8dd1\u592a\u591a\u89c6\u9891\u3002\u5148\u8dd1\u51e0\u4e2a\u89c6\u9891\u8bd5\u8bd5\u770b\u3002\u6548\u679c\u4f73\uff0c\u5219\u53ef\u4ee5\u63a5\u7740\u8fd0\u884c\u5269\u4e0b\u7684\u89c6\u9891\u3002\u5982\u679c\u6548\u679c\u4e0d\u4f73\uff0c\u5219\u8981\u66f4\u65b0\u6a21\u578b\u540e\uff0c\u518d\u91cd\u65b0\u8dd1\u89c6\u9891\u3002 \u9519\u8bef \u5982\u679c\u5f00 xx_mask.mp4 \u89c6\u9891\u5206\u5272\u6548\u679c\u5dee\uff0c\u5219\u9700\u8981\u91cd\u4fee\u5206\u5272\u6807\u6ce8\uff0c\u66f4\u65b0\u6a21\u578b\u3002\u89c1\u6570\u636e\u4e0e\u6a21\u578b\u66f4\u65b0\u7ae0\u8282\u3002\u5982\u679c xx_vol230.0.mp4 \u4f53\u7d20\u65b9\u683c\u504f\u5dee\u8f83\u5927\uff0c\u8bf4\u660e\u5c0f\u7403\u77eb\u6b63\u7684\u6587\u4ef6\u6709\u9519\u8bef\uff0c\u9700\u8981\u4ece\u65b0\u77eb\u6b63\u3002","title":"\u5206\u5272\u591a\u52a8\u7269"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/process/#_3","text":"#!/bin/bash conda activate mmdet cd /home/liying_lab/chenxinfeng/DATA/dannce/demo/rat14_1280x800x9_mono_young # 1. \u51c6\u5907\u6570\u636e volsize_vfiles = \" 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-21_15-42-11D1bC1w.segpkl 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-21_15-16-15C1bD1w.segpkl 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-21_14-32-25A1bB1w.segpkl 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-21_14-54-14B1bA1w.segpkl 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-20_16-45-22D1bB2w.segpkl \" volsize_vfiles = $( echo \" $volsize_vfiles \" | grep -v '^[[:space:]]*$' ) #echo \"$volsize_vfiles\" vfiles = $( echo \" $volsize_vfiles \" | awk '{print $3}' ) #echo \"$vfiles\" # 2. \u7528DANNCE \u9884\u6d4b\u5f97\u52303D\u59ff\u6001, nGPU=4 echo \" $volsize_vfiles \" | sed 's/.segpkl/.mp4/' | cat -n | xargs -P 4 -l bash -c 'python -m dannce.cli_trt ../../configs/dannce_rat14_1280x800x9_max_config.yaml --vol-size-list $1 $2 --video-file $3 --gpu-id $(($0%4))' # xargs -P 2 \u8868\u793a\u4f7f\u75282\u4e2aGPU\uff0c\u914d\u5408 choosecuda 0,1,2,3 \u786e\u8ba4\u4f7f\u7528gpu\u6570\u91cf # 3. \u7ed8\u5236\u201c\u672a\u5e73\u6ed1\u201d\u7684\u59ff\u6001\u8f68\u8ff9 \uff08\u53ef\u9009\uff09 # echo \"$vfiles\" | sed 's/.segpkl/.matcalibpkl/' | xargs -P 6 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d $0 --iview 3' # 4. \u7ed8\u5236\u5e73\u6ed1\u540e\u7684\u59ff\u6001\u8f68\u8ff9 echo \" $vfiles \" | sed 's/.segpkl/.matcalibpkl/' | xargs -l -P 6 -r python -m lilab.smoothnet.s1_matcalibpkl2smooth_foot_dzy echo \" $vfiles \" | sed 's/.segpkl/.smoothed_foot.matcalibpkl/' | xargs -P 6 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d $0 --iview 3 --postfix smoothed_foot ' # 4B \u5c06\u4e24\u4e2a\u89c6\u89d2\u4e32\u8fde\u7ed8\u5236 \uff08\u53ef\u9009\uff09 # echo \"$vfiles\" | sed 's/.segpkl/.smoothed_foot.matcalibpkl/' | xargs -P 8 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d_2view $0 --postfix smoothed_foot' # 5 \u521b\u5efa400p \u7f29\u7565\u89c6\u9891\u6587\u4ef6\uff08\u53ef\u9009\uff09 # bash /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/openlabcluster_postprocess/create_400p.sh \\ # /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a \u5176\u4e2d volsize_vfiles \u8868\u793a\u4e00\u4e2a\u89c6\u9891\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u5206\u522b\u662f\u9ed1\u9f20\u7684voxelsize(280), \u767d\u9f20\u7684voxelsize(280) \u548c\u89c6\u9891\u540c\u540d\u7684\u5206\u5272\u6587\u4ef6 *.segpkl \u3002\u7528\u4e24\u4e2a\u4e0d\u540c\u7684voxel\uff0c\u53ef\u4ee5\u533a\u5206\u4e0d\u540c\u4f53\u578b\u7684\u9f20\uff0c\u4f8b\u5982\u96cc\u6027\u4e0e\u96c4\u6027\u3002 \u8b66\u544a \u592a\u5c0f\u7684voxelsize \u53ef\u80fd\u91c7\u96c6\u7684\u5927\u9f20\u56fe\u50cf\u4e0d\u5b8c\u6574\uff0c\u8ba9\u5173\u952e\u70b9\u8d8a\u754c\u3002\u592a\u5927\u7684voxelsize\u53ef\u80fd\u91c7\u96c6\u7684\u5927\u9f20\u56fe\u50cf\u592a\u6a21\u7cca\uff0c\u964d\u4f4e\u7cbe\u5ea6\u3002 \u5f97\u5230\u7ed3\u679c\uff1a xx.smoothed_foot.matcalibpkl - \u4e24\u53ea\u9f20\u76843D\u5173\u952e\u70b9\u5e8f\u5217\u3002 xx_3_sktdraw_smoothed_foot.mp4 - \u4e24\u53ea\u9f20\u76843D\u5173\u952e\u70b9\u89c6\u9891\u3002 xx_400p.mp4 - smoothed_foot.mp4 \u6587\u4ef6\u7684 400x400 \u5206\u8fa8\u7387\u538b\u7f29\uff0c\u51cf\u5c11\u6587\u4ef6\u5927\u5c0f\u548c\u54cd\u5e94\u901f\u5ea6\u3002 \u9a8c\u8bc1\uff1a\u6253\u5f00 xx_3_sktdraw_smoothed_foot.mp4 \u89c6\u9891\uff0c\u67e5\u770b\u5173\u952e\u70b9\u4f4d\u7f6e\u662f\u5426\u6b63\u786e\u3002\u4fdd\u5b58\u597d xx.smoothed_foot.matcalibpkl \uff0c\u8fd9\u662f\u5305\u542b\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u5750\u6807\u7684\u91cd\u8981\u6587\u4ef6\u3002 \u9519\u8bef \u5982\u679c\u5f00 xx_3_sktdraw_smoothed_foot.mp4 \u89c6\u9891\u5206\u5272\u6548\u679c\u5dee\uff0c\u53ef\u4ee5\u68c0\u67e5\u504f\u5dee\u5bf9\u5e94\u65f6\u523b\u7684\u5206\u5272\u89c6\u9891\uff0c\u610f\u89c1\u68c0\u67e5\u5c0f\u7403\u77eb\u6b63\u6587\u4ef6\u3002DANNCE\u6a21\u578b\u4e00\u822c\u6765\u8bf4\u975e\u5e38\u7a33\u5b9a\uff0cMASK-RCNN \u5206\u5272\u6a21\u578b\u5bb9\u6613\u6536\u5230\u73af\u5883\u5149\u548c\u80cc\u666f\u5f71\u54cd\uff0c\u9700\u8981\u7ecf\u5e38\u52a0\u8bad\u3002\u89c1\u6570\u636e\u4e0e\u6a21\u578b\u66f4\u65b0\u7ae0\u8282\u3002","title":"\u9884\u6d4b\u5173\u952e\u70b9"},{"location":"%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/application/","text":"\u793e\u4ea4\u6807\u7b7e\u5e8f\u5217\u5316 \u793e\u4ea4\u7279\u5f81\u8bbe\u8ba1 \u83b7\u53d6\u4e24\u53ea\u52a8\u7269\u957f\u65f6\u95f4\u8eab\u4f53\u5750\u6807\u70b9\uff0c\u5b83\u4eec\u7684\u8f68\u8ff9\u53d8\u5316\u4fe1\u606f\u4e3a\u6211\u4eec\u63a2\u7d22\u52a8\u7269\u793e\u4ea4\u7c7b\u578b\u63d0\u4f9b\u4e86\u57fa\u7840\u3002\u57fa\u4e8e\u8fd9\u4e9b\u5750\u6807\u70b9\uff0c\u6211\u4eec\u8bbe\u8ba1 \u4e86\u4e00\u7cfb\u5217\u7279\u5f81\uff08\u517132\u4e2a\uff09\uff0c\u66f4\u597d\u7684\u5c55\u793a\u793e\u4ea4\u7684\u7279\u70b9\u3002 \u5305\u62ec10\u4e2a\u52a8\u7269\u81ea\u8eab\u8fd0\u52a8\u7684\u7279\u5f81\u3002\u8003\u8651\u5230\u793e\u4ea4\u884c\u4e3a\u5177\u6709\u72ec\u7279\u7684\u4e92\u52a8\u6a21\u5f0f\uff0c \u6211\u4eec\u8fd8\u8bbe\u8ba1\u4e86\u4e24\u8005\u4ea4\u4e92\u768410\u4e2a\u7279\u5f81\u3002\u5927\u9f20\u5728\u793e\u4ea4\u63a2\u7d22\u8fc7\u7a0b\u4e2d\uff0c\u4f34\u968f\u8bb8\u591a\u5934\u90e8\u548c\u751f\u6b96\u817a\u55c5\u95fb\u884c \u4e3a\u4ee5\u719f\u6089\u5f7c\u6b64\uff0c\u56e0\u6b64\u6211\u4eec\u5212\u5b9a\u4e86\u5934\u90e8\u548c\u751f\u6b96\u817a\u7684\u5706\u5f62\u55c5\u95fb\u533a\u57df\uff0c\u5e76\u6784\u9020\u4e86 3 \u4e2a\u533a\u5206\u55c5 \u95fb\u4f4d\u70b9\u7684\u7279\u5f81\u3002\u5728\u73a9\u800d\u6253\u6597\u548c\u4ea4\u914d\u722c\u8de8\u65f6\uff0c\u5927\u9f20\u4f34\u968f\u7740\u8eab\u4f53\u8eaf\u5e72\u95f4\u7684\u4e0a\u4e0b\u91cd\u53e0\uff0c\u56e0\u6b64\u6211 \u4eec\u8bbe\u8ba1\u4e86 9 \u4e2a\u8eab\u4f53\u91cd\u53e0\u7279\u5f81\u3002 \u793e\u4ea4\u7279\u5f81\u805a\u7c7b \u6211\u4eec\u5c06\u793e\u4ea4\u89c6\u9891\u4ee50.8\u79d2\u65f6\u95f4\u7a97\u5207\u5272\uff0c\u5f97\u5230\uff0832\u7279\u5f81x24\u5e27\uff09\u7684\u9ad8\u7ef4\u7279\u5f81\u3002\u518d\u91c7\u7528\u4e86\u4e00\u4e2a\u57fa\u4e8e RNN \u7684\u81ea\u7f16\u7801\u5668\u6a21\u578bSeq2Seq\uff0c\u63d0\u53d6\u884c\u4e3a\u7684\u7a7a\u95f4\u548c\u65f6\u95f4\u7279\u5f81\uff0c\u53ef\u4ee5\u533a\u5206\u5916\u89c2\u548c\u8fd0\u52a8\u6709\u5dee\u5f02\u7684\u884c\u4e3a\u7c7b\u578b\u3002\u518d\u5c06Decoder\u7f16\u7801\u7684\u6f5c\u7279\u5f81\u7528PCA\u964d\u7ef4\u523090%\u7684\u65b9\u5dee\u53ef\u89e3\u91ca\u6027\uff08\u524d12\u7ef4PC\uff09\u3002\u4f7f\u7528 K-means \u65e0\u76d1\u7763\u805a\u7c7b\uff0c\u5f97\u5230\u7ea640-50\u4e2a\u884c\u4e3a\u7c7b\u522b\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u884c\u4e3a\u7c7b\u522b\uff0c\u6211\u4eec\u89c2\u5bdf\u4e86\u5178\u578b\u7684\u89c6\u9891\u7247\u6bb5\u5e76\u8fdb\u884c\u4e86\u4eba\u5de5\u6ce8\u89e3\u3002\u901a\u8fc7\u8fd9\u4e00\u8fc7\u7a0b\uff0c\u8bb8\u591a\u719f\u6089\u7684\u793e\u4ea4\u884c\u4e3a\u7c7b\u578b\u88ab\u6210\u529f\u805a\u7c7b\uff0c\u5982\u55c5\u63a2\u3001\u8ffd\u9010\u3001\u63a5\u8fd1\u3001\u79bb\u5f00\u548c\u73a9\u800d\uff0c\u8f83\u4e3a\u5168\u9762\u5730\u8986\u76d6\u4e86\u5927\u9f20\u7684\u793e\u4ea4\u6a21\u5f0f\u3002\u901a\u8fc7\u5c06\u884c\u4e3a\u7c7b\u522b\u6295\u5f71\u5728\u4e8c\u7ef4 UMAP \u7a7a\u95f4\u4e2d\uff0c\u6784\u6210\u4e86\u66f4\u4fbf\u4e8e\u53ef\u89c6\u5316\u7684\u793e\u4ea4\u884c\u4e3a\u56fe\u8c31\u3002\u5728 UMAP \u793e\u4ea4\u56fe\u8c31 \u4e2d\uff0c\u4e0d\u540c\u5927\u7c7b\u7684\u884c\u4e3a\u88ab\u5206\u9694\u5728\u5404\u81ea\u7684\u533a\u57df\uff0c\u76f8\u90bb\u533a\u57df\u7684\u884c\u4e3a\u6bd4\u8f83\u76f8\u4f3c\u3002\u53ca\u65f6\u76f8\u4f3c\u7684\u884c\u4e3a\uff0c\u5728\u7ec6\u5fae\u7684\u7279\u5f81\u4e0a\u6709\u6240\u533a\u522b\uff0c\u6bd4\u8ba4\u4e3a\u8bbe\u5b9a\u66f4\u4e3a\u7ec6\u81f4\u3002\u56e0\u6b64\uff0c\u81ea\u52a8\u5316\u805a\u7c7b\u7684\u65b9\u6cd5\uff0c\u65e0\u9700\u4eba\u5de5\u6807\u6ce8\uff0c\u53ef\u4ee5\u90e8\u5206\u66ff\u4ee3\u4eba\u5de5\u5bf9\u884c\u4e3a\u7684\u89c2\u5bdf\u3002 \u793e\u4ea4\u4e00\u81f4\u6027\u7684\u805a\u7c7b\u4f18\u5316 \u5728\u5bf9\u884c\u4e3a\u5206\u7c7b\u7ed3\u679c\u7684\u89c6\u9891\u7247\u6bb5\u8fdb\u884c\u8be6\u5c3d\u5ba1\u67e5\u7684\u8fc7\u7a0b\u4e2d\uff0c\u672c\u7814\u7a76\u8bc6\u522b\u51fa\u90e8\u5206\u7c7b\u522b\u4e2d\u5b58\u5728\u4e0e\u4eba\u5de5\u6807\u6ce8\u9884\u671f\u884c\u4e3a\u4e0d\u4e00\u81f4\u7684\u975e\u5178\u578b\u7247\u6bb5\u3002\u793e\u4ea4\u884c\u4e3a\u7684\u56fa\u6709\u7279\u6027\u4e3a\u4f18\u5316\u7b97\u6cd5\u63d0\u4f9b\u4e86\u72ec\u7279\u6761\u4ef6\uff0c\u5b83\u5141\u8bb8\u4ece\u4e0d\u540c\u4e2a\u4f53\u7684\u89c6\u89d2\u5ba1\u89c6\u540c\u4e00\u793e\u4ea4\u4e92\u52a8\u3002\u540c\u4e00\u793e\u4ea4\u4e92\u52a8\u7247\u6bb5\u5728\u4e24\u4e2a\u4e0d\u540c\u89d2\u8272\u89c6\u89d2\u4e0b\u5206\u522b\u8ba1\u7b97\u6807\u7b7e\uff082\u4efd\u6807\u7b7e\uff09\uff0c\u6807\u7b7e\u4e00\u81f4\u65f6\u8be5\u7247\u6bb5\u7684\u5206\u7c7b\u66f4\u53ef\u9760\u3002\u672c\u7814\u7a76\u4ece\u767d\u9f20\u548c\u9ed1\u9f20\u7684\u89c6\u89d2\u5206\u522b\u5bf9\u793e\u4ea4\u884c\u4e3a\u8fdb\u884c\u5f52\u7c7b\uff0c\u5f97\u5230\u53cc\u91cd\u6807\u7b7e\uff0c\u5e76\u8bc6\u522b\u8fd9\u4e9b\u6807\u7b7e\u7684\u4e00\u81f4\u6027\u5339\u914d\u5173\u7cfb\u3002\u5728 42 \u4e2a\u884c\u4e3a\u7c7b\u522b\u4e2d\u81ea\u52a8\u7b5b\u9009\u51fa 36 \u79cd\u5177\u6709\u4e92\u8865\u6027\u7684\u884c\u4e3a\u3002\u8fd9 36 \u7c7b\u884c\u4e3a\u88ab\u79f0\u4e3a\u53ef\u9760\u7684\u805a\u7c7b\u7c7b\u522b\u3002\u518d\u8bad\u7ec3\u795e\u7ecf\u7f51\u7edc\uff0c\u91cd\u65b0\u5c06\u6240\u6709\u89c6\u9891\u7247\u6bb5\u5212\u5206\u5230 36 \u7c7b\u53ef\u9760\u805a\u7c7b\u4e2d\u3002","title":"\u5e94\u7528\u573a\u666f"},{"location":"%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/application/#_1","text":"","title":"\u793e\u4ea4\u6807\u7b7e\u5e8f\u5217\u5316"},{"location":"%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/application/#_2","text":"\u83b7\u53d6\u4e24\u53ea\u52a8\u7269\u957f\u65f6\u95f4\u8eab\u4f53\u5750\u6807\u70b9\uff0c\u5b83\u4eec\u7684\u8f68\u8ff9\u53d8\u5316\u4fe1\u606f\u4e3a\u6211\u4eec\u63a2\u7d22\u52a8\u7269\u793e\u4ea4\u7c7b\u578b\u63d0\u4f9b\u4e86\u57fa\u7840\u3002\u57fa\u4e8e\u8fd9\u4e9b\u5750\u6807\u70b9\uff0c\u6211\u4eec\u8bbe\u8ba1 \u4e86\u4e00\u7cfb\u5217\u7279\u5f81\uff08\u517132\u4e2a\uff09\uff0c\u66f4\u597d\u7684\u5c55\u793a\u793e\u4ea4\u7684\u7279\u70b9\u3002 \u5305\u62ec10\u4e2a\u52a8\u7269\u81ea\u8eab\u8fd0\u52a8\u7684\u7279\u5f81\u3002\u8003\u8651\u5230\u793e\u4ea4\u884c\u4e3a\u5177\u6709\u72ec\u7279\u7684\u4e92\u52a8\u6a21\u5f0f\uff0c \u6211\u4eec\u8fd8\u8bbe\u8ba1\u4e86\u4e24\u8005\u4ea4\u4e92\u768410\u4e2a\u7279\u5f81\u3002\u5927\u9f20\u5728\u793e\u4ea4\u63a2\u7d22\u8fc7\u7a0b\u4e2d\uff0c\u4f34\u968f\u8bb8\u591a\u5934\u90e8\u548c\u751f\u6b96\u817a\u55c5\u95fb\u884c \u4e3a\u4ee5\u719f\u6089\u5f7c\u6b64\uff0c\u56e0\u6b64\u6211\u4eec\u5212\u5b9a\u4e86\u5934\u90e8\u548c\u751f\u6b96\u817a\u7684\u5706\u5f62\u55c5\u95fb\u533a\u57df\uff0c\u5e76\u6784\u9020\u4e86 3 \u4e2a\u533a\u5206\u55c5 \u95fb\u4f4d\u70b9\u7684\u7279\u5f81\u3002\u5728\u73a9\u800d\u6253\u6597\u548c\u4ea4\u914d\u722c\u8de8\u65f6\uff0c\u5927\u9f20\u4f34\u968f\u7740\u8eab\u4f53\u8eaf\u5e72\u95f4\u7684\u4e0a\u4e0b\u91cd\u53e0\uff0c\u56e0\u6b64\u6211 \u4eec\u8bbe\u8ba1\u4e86 9 \u4e2a\u8eab\u4f53\u91cd\u53e0\u7279\u5f81\u3002","title":"\u793e\u4ea4\u7279\u5f81\u8bbe\u8ba1"},{"location":"%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/application/#_3","text":"\u6211\u4eec\u5c06\u793e\u4ea4\u89c6\u9891\u4ee50.8\u79d2\u65f6\u95f4\u7a97\u5207\u5272\uff0c\u5f97\u5230\uff0832\u7279\u5f81x24\u5e27\uff09\u7684\u9ad8\u7ef4\u7279\u5f81\u3002\u518d\u91c7\u7528\u4e86\u4e00\u4e2a\u57fa\u4e8e RNN \u7684\u81ea\u7f16\u7801\u5668\u6a21\u578bSeq2Seq\uff0c\u63d0\u53d6\u884c\u4e3a\u7684\u7a7a\u95f4\u548c\u65f6\u95f4\u7279\u5f81\uff0c\u53ef\u4ee5\u533a\u5206\u5916\u89c2\u548c\u8fd0\u52a8\u6709\u5dee\u5f02\u7684\u884c\u4e3a\u7c7b\u578b\u3002\u518d\u5c06Decoder\u7f16\u7801\u7684\u6f5c\u7279\u5f81\u7528PCA\u964d\u7ef4\u523090%\u7684\u65b9\u5dee\u53ef\u89e3\u91ca\u6027\uff08\u524d12\u7ef4PC\uff09\u3002\u4f7f\u7528 K-means \u65e0\u76d1\u7763\u805a\u7c7b\uff0c\u5f97\u5230\u7ea640-50\u4e2a\u884c\u4e3a\u7c7b\u522b\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u884c\u4e3a\u7c7b\u522b\uff0c\u6211\u4eec\u89c2\u5bdf\u4e86\u5178\u578b\u7684\u89c6\u9891\u7247\u6bb5\u5e76\u8fdb\u884c\u4e86\u4eba\u5de5\u6ce8\u89e3\u3002\u901a\u8fc7\u8fd9\u4e00\u8fc7\u7a0b\uff0c\u8bb8\u591a\u719f\u6089\u7684\u793e\u4ea4\u884c\u4e3a\u7c7b\u578b\u88ab\u6210\u529f\u805a\u7c7b\uff0c\u5982\u55c5\u63a2\u3001\u8ffd\u9010\u3001\u63a5\u8fd1\u3001\u79bb\u5f00\u548c\u73a9\u800d\uff0c\u8f83\u4e3a\u5168\u9762\u5730\u8986\u76d6\u4e86\u5927\u9f20\u7684\u793e\u4ea4\u6a21\u5f0f\u3002\u901a\u8fc7\u5c06\u884c\u4e3a\u7c7b\u522b\u6295\u5f71\u5728\u4e8c\u7ef4 UMAP \u7a7a\u95f4\u4e2d\uff0c\u6784\u6210\u4e86\u66f4\u4fbf\u4e8e\u53ef\u89c6\u5316\u7684\u793e\u4ea4\u884c\u4e3a\u56fe\u8c31\u3002\u5728 UMAP \u793e\u4ea4\u56fe\u8c31 \u4e2d\uff0c\u4e0d\u540c\u5927\u7c7b\u7684\u884c\u4e3a\u88ab\u5206\u9694\u5728\u5404\u81ea\u7684\u533a\u57df\uff0c\u76f8\u90bb\u533a\u57df\u7684\u884c\u4e3a\u6bd4\u8f83\u76f8\u4f3c\u3002\u53ca\u65f6\u76f8\u4f3c\u7684\u884c\u4e3a\uff0c\u5728\u7ec6\u5fae\u7684\u7279\u5f81\u4e0a\u6709\u6240\u533a\u522b\uff0c\u6bd4\u8ba4\u4e3a\u8bbe\u5b9a\u66f4\u4e3a\u7ec6\u81f4\u3002\u56e0\u6b64\uff0c\u81ea\u52a8\u5316\u805a\u7c7b\u7684\u65b9\u6cd5\uff0c\u65e0\u9700\u4eba\u5de5\u6807\u6ce8\uff0c\u53ef\u4ee5\u90e8\u5206\u66ff\u4ee3\u4eba\u5de5\u5bf9\u884c\u4e3a\u7684\u89c2\u5bdf\u3002","title":"\u793e\u4ea4\u7279\u5f81\u805a\u7c7b"},{"location":"%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/application/#_4","text":"\u5728\u5bf9\u884c\u4e3a\u5206\u7c7b\u7ed3\u679c\u7684\u89c6\u9891\u7247\u6bb5\u8fdb\u884c\u8be6\u5c3d\u5ba1\u67e5\u7684\u8fc7\u7a0b\u4e2d\uff0c\u672c\u7814\u7a76\u8bc6\u522b\u51fa\u90e8\u5206\u7c7b\u522b\u4e2d\u5b58\u5728\u4e0e\u4eba\u5de5\u6807\u6ce8\u9884\u671f\u884c\u4e3a\u4e0d\u4e00\u81f4\u7684\u975e\u5178\u578b\u7247\u6bb5\u3002\u793e\u4ea4\u884c\u4e3a\u7684\u56fa\u6709\u7279\u6027\u4e3a\u4f18\u5316\u7b97\u6cd5\u63d0\u4f9b\u4e86\u72ec\u7279\u6761\u4ef6\uff0c\u5b83\u5141\u8bb8\u4ece\u4e0d\u540c\u4e2a\u4f53\u7684\u89c6\u89d2\u5ba1\u89c6\u540c\u4e00\u793e\u4ea4\u4e92\u52a8\u3002\u540c\u4e00\u793e\u4ea4\u4e92\u52a8\u7247\u6bb5\u5728\u4e24\u4e2a\u4e0d\u540c\u89d2\u8272\u89c6\u89d2\u4e0b\u5206\u522b\u8ba1\u7b97\u6807\u7b7e\uff082\u4efd\u6807\u7b7e\uff09\uff0c\u6807\u7b7e\u4e00\u81f4\u65f6\u8be5\u7247\u6bb5\u7684\u5206\u7c7b\u66f4\u53ef\u9760\u3002\u672c\u7814\u7a76\u4ece\u767d\u9f20\u548c\u9ed1\u9f20\u7684\u89c6\u89d2\u5206\u522b\u5bf9\u793e\u4ea4\u884c\u4e3a\u8fdb\u884c\u5f52\u7c7b\uff0c\u5f97\u5230\u53cc\u91cd\u6807\u7b7e\uff0c\u5e76\u8bc6\u522b\u8fd9\u4e9b\u6807\u7b7e\u7684\u4e00\u81f4\u6027\u5339\u914d\u5173\u7cfb\u3002\u5728 42 \u4e2a\u884c\u4e3a\u7c7b\u522b\u4e2d\u81ea\u52a8\u7b5b\u9009\u51fa 36 \u79cd\u5177\u6709\u4e92\u8865\u6027\u7684\u884c\u4e3a\u3002\u8fd9 36 \u7c7b\u884c\u4e3a\u88ab\u79f0\u4e3a\u53ef\u9760\u7684\u805a\u7c7b\u7c7b\u522b\u3002\u518d\u8bad\u7ec3\u795e\u7ecf\u7f51\u7edc\uff0c\u91cd\u65b0\u5c06\u6240\u6709\u89c6\u9891\u7247\u6bb5\u5212\u5206\u5230 36 \u7c7b\u53ef\u9760\u805a\u7c7b\u4e2d\u3002","title":"\u793e\u4ea4\u4e00\u81f4\u6027\u7684\u805a\u7c7b\u4f18\u5316"},{"location":"%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/dataset/","text":"\u4ece\u96f6\u5236\u4f5c\u793e\u4ea4\u805a\u7c7b\u7684\u6a21\u677f \u4ece\u5173\u952e\u70b9\u6587\u4ef6+\u89c6\u9891\u5230\u793e\u4ea4\u7279\u5f81\u548c\u884c\u4e3a\u6807\u7b7e \u5728\u8fdb\u884c\u201c\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u91cd\u6784\u201d\u4e4b\u540e\uff0c\u5e94\u8be5\u4f1a\u6709 \u201c smoothed_foot.matcalibpkl\u201d \u5173\u952e\u70b9\u6587\u4ef6\u548c\u201c _sktdraw_smoothed_foot.mp4\u201d \u89c6\u9891\u6587\u4ef6\u3002 \u5c06\u6240\u6709\u8fd9\u4e24\u7c7b\u89c6\u9891\u548c\u6570\u636e\u6587\u4ef6\u62f7\u8d1d\u5230\u4e00\u4e2a\u6587\u4ef6\u5939\u4e2d\u3002\u6267\u884c\u4e0b\u9762\u547d\u4ee4\uff0c\u5c06\u9010\u6b21 \u8ba1\u7b97\u793e\u4ea4\u7279\u5f81 - \u5bcc\u96c6\u8fd1\u8ddd\u79bb\u793e\u4ea4\u5e76\u62c6\u5206\u7247\u6bb5 - Seq2Seq\u6a21\u578b\u62bd\u63d0\u793e\u4ea4\u7684\u65f6\u7a7a\u7279\u5f81 - \u793e\u4ea4Cluster - \u7ed8\u5236\u89c6\u9891 \u3002 \u8bf7\u5c06\u8be5\u4ee3\u7801\u9010\u884c\u8fd0\u884c\u3002 #!/bin/bash conda activate OpenLabCluster # \u4ee3\u7801\u5b58\u653e\u7684\u8def\u5f84 \uff08by\u9676\u73b0\u660e\uff09 cd /DATA/taoxianming/rat/script/openlabcluster/pc_feats41_DecSeqCluster_better_20231102 pathFeats = /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/Shank3HETxWT_202309/MM_FF # ResPath \u4e0d\u8981\u7528\u4e91\u76d8\uff0c\u6587\u4ef6\u592a\u7410\u788e\uff0c\u4f7f\u7528\u4e91\u76d8\u6162 bhvResPath = ~/DATA/Shank3HETxWT_202309_MM_FF_openlabcluster today = 2023 -11-09 ##always date format mkdir -p $bhvResPath ## create 400p bash /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/openlabcluster_postprocess/create_400p.sh $pathFeats ## Calculate raw features python 01_1_feats41fromPoints-IDswitch_mp.py $pathFeats ## minmax and get close segments python 01_2_featsMM_clipsInCloseSegs_mp.py $pathFeats python 02_1_prepare_featureFiles_forOpenLabCluster.py $pathFeats $bhvResPath ## split train:test=9:1 python 02_2_makeProject_trainTest.py $bhvResPath $today ## training Seq2Seq gpuID = 0 python 02_3_seq2seq_training-decSeq.py $bhvResPath $gpuID $today ## behavior clustering python 03_1_decSeqFeats_PCA-balanceCluster.py $bhvResPath $today ## Dec features in space, colored by cluster NO python 03_2_plot_decSeqFeatsPCS-trajectoryColorByLabels.py $bhvResPath $today ## plot mp4 videos of each behavior cluster python 04_1_plot_decSeqCluster-Videos.py $pathFeats $bhvResPath $today ## get behavior cluster sequence of each video python 04_2_getBhvClusterSeqs_eachVideo.py $pathFeats $bhvResPath $today \u5f97\u5230 *_sequences.pkl \u548c *_bio_labels.npz \u4e24\u4e2a\u884c\u4e3a\u89c6\u9891\u6807\u7b7e\u6587\u4ef6; FWPCA*_blackFirst/svm_clu*_400p.mp4 \u6bcf\u7c7b\u884c\u4e3a\u5bf9\u5e94\u7684\u89c6\u9891\u6587\u4ef6\u3002 \u7ed8\u56fe & \u8ba1\u7b97\u4e3b\u88ab\u52a8\u4e00\u81f4\u6027 \u8bf7\u5c06\u8be5\u4ee3\u7801\u9010\u884c\u8fd0\u884c\u3002 #!/bin/bash conda activate mmdet cd /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/ ## 1. \u5408\u5e76\u6587\u4ef6\uff0c\u751f\u6210 clippredpkl \u6587\u4ef6 python -m lilab.openlabcluster_postprocess.s1_merge_3_file . ## 2. Embedding \u7684 UMAP \u4e0e Kmeans \u8fb9\u754c python -m lilab.openlabcluster_postprocess.s2_decisionBoundary_masaik_plot *.clippredpkl ## 3A. Kmeans \u5c42\u6b21\u805a\u7c7b # \u51c6\u5907\u5de5\u4f5c\u3002\u9996\u5148\u5148\u7ed9\u6bcf\u4e2acluster\u53d6\u540d\u5b57. \u6253\u5f00\u8be5\u811a\u672c\uff0c\u628a \u7c7b\u522b\u540d\u79f0 \u8d34\u5728\u811a\u672c\u4e2d\uff1b\u8fd0\u884c\u3002\u6700\u7ec8\uff0c\u7c7b\u522b\u540d\u79f0\u5c31\u6dfb\u52a0\u5230\u6765 *.clippredpkl\u3002 # python -m lilab.openlabcluster_postprocess.s3a_cluster_givename_mergefile *.clippredpkl ## 3B. \u6216\u8005\u6682\u65f6\u4e0d\u6807\u51c6\u7c7b\u547d python -m lilab.openlabcluster_postprocess.s3a_cluster_givename_mergefile *.clippredpkl --auto-label ## 4. \u7136\u540e\u8fd0\u884c\u5c42\u6b21\u805a\u7c7b\u7684\u753b\u56fe python -m lilab.openlabcluster_postprocess.s3b_hiecluster_plot *.clippredpkl & python -m lilab.openlabcluster_postprocess.s3b_hiecluster_plot_pro *.clippredpkl & ## 5. Mirror \u6216 Mutual \u7c7b\u522b\u7684\u754c\u5b9a python -m lilab.openlabcluster_postprocess.s3c_mirror_mutual_matrix_plot *.clippredpkl ## 6.\u53ef\u4ee5\u5408\u5e76\u6807\u7b7e\u3002\u6bd4\u5982\u4e3b\u88ab\u52a8\uff0c\u6bd4\u5982\u6811\u72b6\u56fe\u76f8\u90bb\u7684\u7c7b\u3002[\u53ef\u9009\uff0c\u4e0d\u5efa\u8bae] # \u51c6\u5907\u5de5\u4f5c\u3002\u6253\u5f00\u8be5\u811a\u672c\uff0c\u628a\u53ef\u4ee5\u5408\u5e76\u7684\u7c7b\u522b \u5199\u5728\u811a\u672c\u4e2d\uff1b\u8fd0\u884c\u3002\u6700\u7ec8\uff0c\u7c7b\u522b\u540d\u79f0\u7684\u5408\u5e76\u5c31\u6dfb\u52a0\u5230\u6765 *.clippredpkl\u3002 # python -m lilab.openlabcluster_postprocess.s3a2_cluster_nodemerge *.clippredpkl ## 7. \u53ef\u9009\u7ed8\u56fe\u3002Moseq-like Motif \u7684\u7ed8\u5236 # \u9700\u8981\u627e\u5230\u539f\u59cb\u7684\u5173\u952e\u70b9\u5750\u6807\u6587\u4ef6\uff08\u90fd\u5b58\u653e\u5728SmoothFootPkl_DIR\u6587\u4ef6\u5939\uff09\uff0c\u624d\u80fd\u7ed8\u5236\u3002\u8fd0\u884c\u4e0b\u9762\u4ee3\u7801\u3002\u5728\u540c\u7ea7\u76ee\u5f55\u4e0b\uff0c\u4f1a\u751f\u6210 motifshowmulti \u7684\u7ed3\u679c\u6587\u4ef6\u5939\u3002 SmoothFootPkl_DIR = /A/B/C python -m lilab.openlabcluster_postprocess.s4_moseq_like_motif_plot *.clippredpkl $SmoothFootPkl_DIR \u5229\u7528\u4e3b\u88ab\u52a8\u4e00\u81f4\u6027\uff0c\u91c7\u7528 Active-Learning \u4f18\u5316\u805a\u7c7b conda activate mmdet # \u66f4\u6362\u76ee\u5f55\u5230 kmeans \u805a\u7c7b\u7ed3\u679c\u8def\u5f84 cd /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/ #1. \u91cd\u65b0\u8ba1\u7b97\u955c\u50cf\uff0c\u5e76\u5bfc\u51fa\u955c\u50cf\u7c7b\u522b\u77e9\u9635\u70ed\u56fe & \u955c\u50cf\u8868 python -m lilab.OpenLabCluster_train.a0_mirror_mutual_matrix_plot *.clippredpkl #2. \u7b5b\u9009 representitives \u7247\u6bb5\uff0c\u6210\u4e3a\u65b0\u7684 clippredpkl python -m lilab.OpenLabCluster_train.a1_mirror_mutual_filt_clippredpkl *.clippredpkl cd ./representitive_*_filt_perc* #3. \u4e4b\u524d\u65e0\u76d1\u7763\u7684\u5e38\u89c4\u5206\u6790\u6d41\u7a0b -- \u753b\u56fe\u68c0\u67e5\u4e00\u904d #3-1. Embedding \u7684 UMAP \u4e0e Kmeans \u8fb9\u754c python -m lilab.openlabcluster_postprocess.s2_decisionBoundary_masaik_plot *.clippredpkl #3-2. \u7136\u540e\u8fd0\u884c\u5c42\u6b21\u805a\u7c7b\u7684\u753b\u56fe python -m lilab.openlabcluster_postprocess.s3b_hiecluster_plot_pro *.clippredpkl #3-3. Mirror \u6216 Mutual \u7c7b\u522b\u7684\u754c\u5b9a python -m lilab.openlabcluster_postprocess.s3c_mirror_mutual_matrix_plot *.clippredpkl #B1. \u521b\u5efa openlabcluster semi_seq2seq \u9879\u76ee\uff0c\u4eceseq2seq\u91cc\u9762\u62f7\u8d1d\u51fa\u6765 conda activate OpenLabCluster PROJECT_SEQ2SEQ = /DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32_k36/feats32-2024-04-11 PROJECT_REPR = /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32_k36 PROJECT_SEMISEQ2SEQ = ` python -m lilab.OpenLabCluster_train.a2_semiseqseq_data_prepare $PROJECT_REPR $PROJECT_SEQ2SEQ ` cd $PROJECT_SEMISEQ2SEQ #B2. \u521d\u59cb\u5316 seq2seq python -m lilab.OpenLabCluster_train.a3_semiseqseq_init_train_seqseq $PROJECT_SEMISEQ2SEQ --epoch 3 #\u7b2c\u4e00\u6b21\u8fed\u4ee3\uff0c\u4eceseq2seq \u5230semiseq2seq # PROJECT_SEMISEQ2SEQ=/DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/semiseq2seq_iter0 # PROJECT_REPR=/mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/representitive_*_filt_perc* PROJECT_SEMISEQ2SEQ = /DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32_k36/semiseq2seq_iter1 python -m lilab.OpenLabCluster_train.a5b_export_latent_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --modeltype SemiSeq2SeqLite #--modeltype SemiSeq2SeqLite \u9ed8\u8ba4\u4e0d\u9009 # \u4f7f\u7528 SemiSeq2Seq \u6a21\u578b\u8bad\u7ec3\u6807\u7b7e\u8bc6\u522b python -m lilab.OpenLabCluster_train.a4_semiseqseq_train $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-now 0 --modeltype SemiSeq2SeqLite # \u6839\u636e SemiSeq2Seq \u6a21\u578b\u9884\u6d4b\u6240\u6709\u7247\u6bb5\u7684\u6807\u7b7e python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter 0 --modeltype SemiSeq2SeqLite # \u4ece\u7247\u6bb5\u96c6\u4e2d\u7b5b\u9009\u51fa\u7684 representative \u6807\u7b7e\uff0c\u751f\u6210\u65b0\u7684\u6570\u636e\u96c6 python -m lilab.OpenLabCluster_train.a2a_clippredfile_refine $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter0-epoch5/*.clippredpkl $PROJECT_REPR /*.clippredpkl python -m lilab.OpenLabCluster_train.a2b_iter_data_prepare $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-from 0 #create new data for iter1 #\u5f00\u59cbiter python -m lilab.OpenLabCluster_train.a4_semiseqseq_train $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-now 1 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter 1 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a2a_clippredfile_refine $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter1-epoch5/*.clippredpkl $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter0-epoch5/*.clippredpkl python -m lilab.OpenLabCluster_train.a2b_iter_data_prepare $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-from 1 #create new data for iter2 python -m lilab.OpenLabCluster_train.a4_semiseqseq_train $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-now 2 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter 2 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a2a_clippredfile_refine $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter2-epoch5/*.clippredpkl $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter1-epoch5/*.clippredpkl python -m lilab.OpenLabCluster_train.a2b_iter_data_prepare $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-from 2 #create new data for iter3 python -m lilab.OpenLabCluster_train.a4_semiseqseq_train $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-now 3 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter 3 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a2a_clippredfile_refine $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter3-epoch5/*.clippredpkl $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter2-epoch5/*.clippredpkl python -m lilab.OpenLabCluster_train.a2b_iter_data_prepare $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-from 3 #create new data for iter3 # 4. \u8fed\u4ee3\u7ed3\u675f\uff0c\u753b\u56fe ITER = 3 EPOCH = 6 #\u753b400p conda activate mmdet DIR_400p = /DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/data python -m lilab.OpenLabCluster_train.a6b_clippredpkl_2_cluster400p $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter $ITER -epoch $EPOCH /*.clippredpkl $DIR_400p #clippredpkl \u8f6c seqencepkl python -m lilab.OpenLabCluster_train.a6_clippredpkl_2_seqencepkl $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter $ITER -epoch $EPOCH /*.clippredpkl #\u8ba1\u7b97 chi dbi \u805a\u7c7b\u5ea6\u91cf ls $PROJECT_SEMISEQ2SEQ /output/*/*.clippredpkl | xargs -n 1 -P 8 -I {} python -m lilab.OpenLabCluster_train.b1_chi_dbi {} --PCA 12 # \u53c2\u8003\u805a\u7c7b\u89c6\u9891\u548c\u4e3b\u88ab\u52a8\u4e00\u81f4\u6027\uff0c\u7ed9\u4e88\u91cd\u65b0\u547d\u4ee4\u3002\u6253\u5f00\u811a\u672c\uff0c\u4fee\u6539\u5176\u4e2d\u7c7b\u522b\u540d\u5b57 ls $PROJECT_SEMISEQ2SEQ /output/semi*/*.clippredpkl | xargs -n 1 -P 8 -I {} python -m lilab.OpenLabCluster_train.t1_cluster_name_rename {} ##\u9884\u6d4b\u6570\u636e\u96c6\uff0c\u751f\u6210\u5230 Data.H5 \u6587\u4ef6\u5373\u53ef ##\u9700\u8981\u66f4\u6539config.yaml\u6587\u4ef6\u4e2d feature_length: 32\uff08feature\u4e2a\u6570\uff09,cla_dim: - 36 num_class: - 36(\u8bad\u7ec3\u96c6\u6700\u7ec8cluster\u6570) conda activate OpenLabCluster ITER = 3 EPOCH = 5 PROJECT_SEQ2SEQ = /DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32_k36/semiseq2seq_iter1 PROJECT_REPR = /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/representitive_k36_filt_perc65 CLIPPREDPKL = $PROJECT_SEQ2SEQ /output/semisupervise-decSeq-iter $ITER -epoch $EPOCH /*.clippredpkl python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEQ2SEQ --epoch 3 --iter 3 python -m lilab.OpenLabCluster_train.a6_clippredpkl_2_seqencepkl $CLIPPREDPKL # python -m lilab.OpenLabCluster_train.t1_cluster_name_rename $CLIPPREDPKL #3. \u4e4b\u524d\u65e0\u76d1\u7763\u7684\u5e38\u89c4\u5206\u6790\u6d41\u7a0b -- \u753b\u56fe\u68c0\u67e5\u4e00\u904d python -m lilab.openlabcluster_postprocess.s2_decisionBoundary_masaik_plot $CLIPPREDPKL python -m lilab.openlabcluster_postprocess.s3b_hiecluster_plot_pro $CLIPPREDPKL python -m lilab.openlabcluster_postprocess.s3c_mirror_mutual_matrix_plot $CLIPPREDPKL #\u5408\u5e76\u4e3b\u88ab\u52a8\uff0c\u518d\u805a\u7c7b [\u53ef\u9009] python -m lilab.OpenLabCluster_train.t2_halfmirror_hierachy $CLIPPREDPKL","title":"\u805a\u7c7b\u548c\u6a21\u677f\u5236\u4f5c"},{"location":"%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/dataset/#_1","text":"","title":"\u4ece\u96f6\u5236\u4f5c\u793e\u4ea4\u805a\u7c7b\u7684\u6a21\u677f"},{"location":"%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/dataset/#_2","text":"\u5728\u8fdb\u884c\u201c\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u91cd\u6784\u201d\u4e4b\u540e\uff0c\u5e94\u8be5\u4f1a\u6709 \u201c smoothed_foot.matcalibpkl\u201d \u5173\u952e\u70b9\u6587\u4ef6\u548c\u201c _sktdraw_smoothed_foot.mp4\u201d \u89c6\u9891\u6587\u4ef6\u3002 \u5c06\u6240\u6709\u8fd9\u4e24\u7c7b\u89c6\u9891\u548c\u6570\u636e\u6587\u4ef6\u62f7\u8d1d\u5230\u4e00\u4e2a\u6587\u4ef6\u5939\u4e2d\u3002\u6267\u884c\u4e0b\u9762\u547d\u4ee4\uff0c\u5c06\u9010\u6b21 \u8ba1\u7b97\u793e\u4ea4\u7279\u5f81 - \u5bcc\u96c6\u8fd1\u8ddd\u79bb\u793e\u4ea4\u5e76\u62c6\u5206\u7247\u6bb5 - Seq2Seq\u6a21\u578b\u62bd\u63d0\u793e\u4ea4\u7684\u65f6\u7a7a\u7279\u5f81 - \u793e\u4ea4Cluster - \u7ed8\u5236\u89c6\u9891 \u3002 \u8bf7\u5c06\u8be5\u4ee3\u7801\u9010\u884c\u8fd0\u884c\u3002 #!/bin/bash conda activate OpenLabCluster # \u4ee3\u7801\u5b58\u653e\u7684\u8def\u5f84 \uff08by\u9676\u73b0\u660e\uff09 cd /DATA/taoxianming/rat/script/openlabcluster/pc_feats41_DecSeqCluster_better_20231102 pathFeats = /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/Shank3HETxWT_202309/MM_FF # ResPath \u4e0d\u8981\u7528\u4e91\u76d8\uff0c\u6587\u4ef6\u592a\u7410\u788e\uff0c\u4f7f\u7528\u4e91\u76d8\u6162 bhvResPath = ~/DATA/Shank3HETxWT_202309_MM_FF_openlabcluster today = 2023 -11-09 ##always date format mkdir -p $bhvResPath ## create 400p bash /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/openlabcluster_postprocess/create_400p.sh $pathFeats ## Calculate raw features python 01_1_feats41fromPoints-IDswitch_mp.py $pathFeats ## minmax and get close segments python 01_2_featsMM_clipsInCloseSegs_mp.py $pathFeats python 02_1_prepare_featureFiles_forOpenLabCluster.py $pathFeats $bhvResPath ## split train:test=9:1 python 02_2_makeProject_trainTest.py $bhvResPath $today ## training Seq2Seq gpuID = 0 python 02_3_seq2seq_training-decSeq.py $bhvResPath $gpuID $today ## behavior clustering python 03_1_decSeqFeats_PCA-balanceCluster.py $bhvResPath $today ## Dec features in space, colored by cluster NO python 03_2_plot_decSeqFeatsPCS-trajectoryColorByLabels.py $bhvResPath $today ## plot mp4 videos of each behavior cluster python 04_1_plot_decSeqCluster-Videos.py $pathFeats $bhvResPath $today ## get behavior cluster sequence of each video python 04_2_getBhvClusterSeqs_eachVideo.py $pathFeats $bhvResPath $today \u5f97\u5230 *_sequences.pkl \u548c *_bio_labels.npz \u4e24\u4e2a\u884c\u4e3a\u89c6\u9891\u6807\u7b7e\u6587\u4ef6; FWPCA*_blackFirst/svm_clu*_400p.mp4 \u6bcf\u7c7b\u884c\u4e3a\u5bf9\u5e94\u7684\u89c6\u9891\u6587\u4ef6\u3002","title":"\u4ece\u5173\u952e\u70b9\u6587\u4ef6+\u89c6\u9891\u5230\u793e\u4ea4\u7279\u5f81\u548c\u884c\u4e3a\u6807\u7b7e"},{"location":"%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/dataset/#_3","text":"\u8bf7\u5c06\u8be5\u4ee3\u7801\u9010\u884c\u8fd0\u884c\u3002 #!/bin/bash conda activate mmdet cd /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/ ## 1. \u5408\u5e76\u6587\u4ef6\uff0c\u751f\u6210 clippredpkl \u6587\u4ef6 python -m lilab.openlabcluster_postprocess.s1_merge_3_file . ## 2. Embedding \u7684 UMAP \u4e0e Kmeans \u8fb9\u754c python -m lilab.openlabcluster_postprocess.s2_decisionBoundary_masaik_plot *.clippredpkl ## 3A. Kmeans \u5c42\u6b21\u805a\u7c7b # \u51c6\u5907\u5de5\u4f5c\u3002\u9996\u5148\u5148\u7ed9\u6bcf\u4e2acluster\u53d6\u540d\u5b57. \u6253\u5f00\u8be5\u811a\u672c\uff0c\u628a \u7c7b\u522b\u540d\u79f0 \u8d34\u5728\u811a\u672c\u4e2d\uff1b\u8fd0\u884c\u3002\u6700\u7ec8\uff0c\u7c7b\u522b\u540d\u79f0\u5c31\u6dfb\u52a0\u5230\u6765 *.clippredpkl\u3002 # python -m lilab.openlabcluster_postprocess.s3a_cluster_givename_mergefile *.clippredpkl ## 3B. \u6216\u8005\u6682\u65f6\u4e0d\u6807\u51c6\u7c7b\u547d python -m lilab.openlabcluster_postprocess.s3a_cluster_givename_mergefile *.clippredpkl --auto-label ## 4. \u7136\u540e\u8fd0\u884c\u5c42\u6b21\u805a\u7c7b\u7684\u753b\u56fe python -m lilab.openlabcluster_postprocess.s3b_hiecluster_plot *.clippredpkl & python -m lilab.openlabcluster_postprocess.s3b_hiecluster_plot_pro *.clippredpkl & ## 5. Mirror \u6216 Mutual \u7c7b\u522b\u7684\u754c\u5b9a python -m lilab.openlabcluster_postprocess.s3c_mirror_mutual_matrix_plot *.clippredpkl ## 6.\u53ef\u4ee5\u5408\u5e76\u6807\u7b7e\u3002\u6bd4\u5982\u4e3b\u88ab\u52a8\uff0c\u6bd4\u5982\u6811\u72b6\u56fe\u76f8\u90bb\u7684\u7c7b\u3002[\u53ef\u9009\uff0c\u4e0d\u5efa\u8bae] # \u51c6\u5907\u5de5\u4f5c\u3002\u6253\u5f00\u8be5\u811a\u672c\uff0c\u628a\u53ef\u4ee5\u5408\u5e76\u7684\u7c7b\u522b \u5199\u5728\u811a\u672c\u4e2d\uff1b\u8fd0\u884c\u3002\u6700\u7ec8\uff0c\u7c7b\u522b\u540d\u79f0\u7684\u5408\u5e76\u5c31\u6dfb\u52a0\u5230\u6765 *.clippredpkl\u3002 # python -m lilab.openlabcluster_postprocess.s3a2_cluster_nodemerge *.clippredpkl ## 7. \u53ef\u9009\u7ed8\u56fe\u3002Moseq-like Motif \u7684\u7ed8\u5236 # \u9700\u8981\u627e\u5230\u539f\u59cb\u7684\u5173\u952e\u70b9\u5750\u6807\u6587\u4ef6\uff08\u90fd\u5b58\u653e\u5728SmoothFootPkl_DIR\u6587\u4ef6\u5939\uff09\uff0c\u624d\u80fd\u7ed8\u5236\u3002\u8fd0\u884c\u4e0b\u9762\u4ee3\u7801\u3002\u5728\u540c\u7ea7\u76ee\u5f55\u4e0b\uff0c\u4f1a\u751f\u6210 motifshowmulti \u7684\u7ed3\u679c\u6587\u4ef6\u5939\u3002 SmoothFootPkl_DIR = /A/B/C python -m lilab.openlabcluster_postprocess.s4_moseq_like_motif_plot *.clippredpkl $SmoothFootPkl_DIR","title":"\u7ed8\u56fe &amp; \u8ba1\u7b97\u4e3b\u88ab\u52a8\u4e00\u81f4\u6027"},{"location":"%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/dataset/#active-learning","text":"conda activate mmdet # \u66f4\u6362\u76ee\u5f55\u5230 kmeans \u805a\u7c7b\u7ed3\u679c\u8def\u5f84 cd /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/ #1. \u91cd\u65b0\u8ba1\u7b97\u955c\u50cf\uff0c\u5e76\u5bfc\u51fa\u955c\u50cf\u7c7b\u522b\u77e9\u9635\u70ed\u56fe & \u955c\u50cf\u8868 python -m lilab.OpenLabCluster_train.a0_mirror_mutual_matrix_plot *.clippredpkl #2. \u7b5b\u9009 representitives \u7247\u6bb5\uff0c\u6210\u4e3a\u65b0\u7684 clippredpkl python -m lilab.OpenLabCluster_train.a1_mirror_mutual_filt_clippredpkl *.clippredpkl cd ./representitive_*_filt_perc* #3. \u4e4b\u524d\u65e0\u76d1\u7763\u7684\u5e38\u89c4\u5206\u6790\u6d41\u7a0b -- \u753b\u56fe\u68c0\u67e5\u4e00\u904d #3-1. Embedding \u7684 UMAP \u4e0e Kmeans \u8fb9\u754c python -m lilab.openlabcluster_postprocess.s2_decisionBoundary_masaik_plot *.clippredpkl #3-2. \u7136\u540e\u8fd0\u884c\u5c42\u6b21\u805a\u7c7b\u7684\u753b\u56fe python -m lilab.openlabcluster_postprocess.s3b_hiecluster_plot_pro *.clippredpkl #3-3. Mirror \u6216 Mutual \u7c7b\u522b\u7684\u754c\u5b9a python -m lilab.openlabcluster_postprocess.s3c_mirror_mutual_matrix_plot *.clippredpkl #B1. \u521b\u5efa openlabcluster semi_seq2seq \u9879\u76ee\uff0c\u4eceseq2seq\u91cc\u9762\u62f7\u8d1d\u51fa\u6765 conda activate OpenLabCluster PROJECT_SEQ2SEQ = /DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32_k36/feats32-2024-04-11 PROJECT_REPR = /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32_k36 PROJECT_SEMISEQ2SEQ = ` python -m lilab.OpenLabCluster_train.a2_semiseqseq_data_prepare $PROJECT_REPR $PROJECT_SEQ2SEQ ` cd $PROJECT_SEMISEQ2SEQ #B2. \u521d\u59cb\u5316 seq2seq python -m lilab.OpenLabCluster_train.a3_semiseqseq_init_train_seqseq $PROJECT_SEMISEQ2SEQ --epoch 3 #\u7b2c\u4e00\u6b21\u8fed\u4ee3\uff0c\u4eceseq2seq \u5230semiseq2seq # PROJECT_SEMISEQ2SEQ=/DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/semiseq2seq_iter0 # PROJECT_REPR=/mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/representitive_*_filt_perc* PROJECT_SEMISEQ2SEQ = /DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32_k36/semiseq2seq_iter1 python -m lilab.OpenLabCluster_train.a5b_export_latent_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --modeltype SemiSeq2SeqLite #--modeltype SemiSeq2SeqLite \u9ed8\u8ba4\u4e0d\u9009 # \u4f7f\u7528 SemiSeq2Seq \u6a21\u578b\u8bad\u7ec3\u6807\u7b7e\u8bc6\u522b python -m lilab.OpenLabCluster_train.a4_semiseqseq_train $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-now 0 --modeltype SemiSeq2SeqLite # \u6839\u636e SemiSeq2Seq \u6a21\u578b\u9884\u6d4b\u6240\u6709\u7247\u6bb5\u7684\u6807\u7b7e python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter 0 --modeltype SemiSeq2SeqLite # \u4ece\u7247\u6bb5\u96c6\u4e2d\u7b5b\u9009\u51fa\u7684 representative \u6807\u7b7e\uff0c\u751f\u6210\u65b0\u7684\u6570\u636e\u96c6 python -m lilab.OpenLabCluster_train.a2a_clippredfile_refine $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter0-epoch5/*.clippredpkl $PROJECT_REPR /*.clippredpkl python -m lilab.OpenLabCluster_train.a2b_iter_data_prepare $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-from 0 #create new data for iter1 #\u5f00\u59cbiter python -m lilab.OpenLabCluster_train.a4_semiseqseq_train $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-now 1 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter 1 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a2a_clippredfile_refine $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter1-epoch5/*.clippredpkl $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter0-epoch5/*.clippredpkl python -m lilab.OpenLabCluster_train.a2b_iter_data_prepare $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-from 1 #create new data for iter2 python -m lilab.OpenLabCluster_train.a4_semiseqseq_train $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-now 2 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter 2 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a2a_clippredfile_refine $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter2-epoch5/*.clippredpkl $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter1-epoch5/*.clippredpkl python -m lilab.OpenLabCluster_train.a2b_iter_data_prepare $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-from 2 #create new data for iter3 python -m lilab.OpenLabCluster_train.a4_semiseqseq_train $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-now 3 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter 3 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a2a_clippredfile_refine $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter3-epoch5/*.clippredpkl $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter2-epoch5/*.clippredpkl python -m lilab.OpenLabCluster_train.a2b_iter_data_prepare $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-from 3 #create new data for iter3 # 4. \u8fed\u4ee3\u7ed3\u675f\uff0c\u753b\u56fe ITER = 3 EPOCH = 6 #\u753b400p conda activate mmdet DIR_400p = /DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/data python -m lilab.OpenLabCluster_train.a6b_clippredpkl_2_cluster400p $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter $ITER -epoch $EPOCH /*.clippredpkl $DIR_400p #clippredpkl \u8f6c seqencepkl python -m lilab.OpenLabCluster_train.a6_clippredpkl_2_seqencepkl $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter $ITER -epoch $EPOCH /*.clippredpkl #\u8ba1\u7b97 chi dbi \u805a\u7c7b\u5ea6\u91cf ls $PROJECT_SEMISEQ2SEQ /output/*/*.clippredpkl | xargs -n 1 -P 8 -I {} python -m lilab.OpenLabCluster_train.b1_chi_dbi {} --PCA 12 # \u53c2\u8003\u805a\u7c7b\u89c6\u9891\u548c\u4e3b\u88ab\u52a8\u4e00\u81f4\u6027\uff0c\u7ed9\u4e88\u91cd\u65b0\u547d\u4ee4\u3002\u6253\u5f00\u811a\u672c\uff0c\u4fee\u6539\u5176\u4e2d\u7c7b\u522b\u540d\u5b57 ls $PROJECT_SEMISEQ2SEQ /output/semi*/*.clippredpkl | xargs -n 1 -P 8 -I {} python -m lilab.OpenLabCluster_train.t1_cluster_name_rename {} ##\u9884\u6d4b\u6570\u636e\u96c6\uff0c\u751f\u6210\u5230 Data.H5 \u6587\u4ef6\u5373\u53ef ##\u9700\u8981\u66f4\u6539config.yaml\u6587\u4ef6\u4e2d feature_length: 32\uff08feature\u4e2a\u6570\uff09,cla_dim: - 36 num_class: - 36(\u8bad\u7ec3\u96c6\u6700\u7ec8cluster\u6570) conda activate OpenLabCluster ITER = 3 EPOCH = 5 PROJECT_SEQ2SEQ = /DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32_k36/semiseq2seq_iter1 PROJECT_REPR = /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/representitive_k36_filt_perc65 CLIPPREDPKL = $PROJECT_SEQ2SEQ /output/semisupervise-decSeq-iter $ITER -epoch $EPOCH /*.clippredpkl python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEQ2SEQ --epoch 3 --iter 3 python -m lilab.OpenLabCluster_train.a6_clippredpkl_2_seqencepkl $CLIPPREDPKL # python -m lilab.OpenLabCluster_train.t1_cluster_name_rename $CLIPPREDPKL #3. \u4e4b\u524d\u65e0\u76d1\u7763\u7684\u5e38\u89c4\u5206\u6790\u6d41\u7a0b -- \u753b\u56fe\u68c0\u67e5\u4e00\u904d python -m lilab.openlabcluster_postprocess.s2_decisionBoundary_masaik_plot $CLIPPREDPKL python -m lilab.openlabcluster_postprocess.s3b_hiecluster_plot_pro $CLIPPREDPKL python -m lilab.openlabcluster_postprocess.s3c_mirror_mutual_matrix_plot $CLIPPREDPKL #\u5408\u5e76\u4e3b\u88ab\u52a8\uff0c\u518d\u805a\u7c7b [\u53ef\u9009] python -m lilab.OpenLabCluster_train.t2_halfmirror_hierachy $CLIPPREDPKL","title":"\u5229\u7528\u4e3b\u88ab\u52a8\u4e00\u81f4\u6027\uff0c\u91c7\u7528 Active-Learning \u4f18\u5316\u805a\u7c7b"},{"location":"%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/postprocess/","text":"","title":"Postprocess"},{"location":"%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/process/","text":"conda activate OpenLabCluster PROEJECT_DIR = /mnt/liying.cibr.ac.cn_Data_Temp_ZZC/2024-ChR2rat/2410shank3/400p # \u52a8\u7269\u5728\u6bcf\u4e2avideo\u91cc\u9762\u7b97\u4f53\u957f\uff0c\u7b97sniffzone # \u5f97\u5230 'bodylength.pkl', 'rawfeat.pkl' python -m lilab.lstm_bhv_bodylennorm_classify.s0_prepare_body_length $PROEJECT_DIR #--skip-frames 1800 python -m lilab.lstm_bhv_bodylennorm_classify.s01_matcalibpkl2rawfeatpkl $PROEJECT_DIR # \u6309\u901f\u5ea6 95% \u5206\u4f4d\u6570\u5f52\u4e00\u5316 # \u5f97\u5230 rawfeat_norm.pkl python -m lilab.lstm_bhv_bodylennorm_classify.s02_rawfeatpkl_to_norm $PROEJECT_DIR #--setspeed 0.05 #--skip-frames 1800 # \u4ece3D\u5173\u952e\u70b9\u51fa\u53d1\uff0c\u52a0\u4e0a\u4f53\u957f\u4fe1\u606f\uff0c\u7b97\u51fa\u884c\u4e3a\u5206\u7c7b # --use-normed \u4f7f\u7528\u901f\u5ea6\u5f52\u4e00\u5316\u540e\u7684\u7279\u5f81 # \u5f97\u5230 out_semiseq2seq_norm/lstm_offline.clippredpkl python -m lilab.lstm_bhv_bodylennorm_classify.s1_matcalibpkl2clippredpkl_semiseq2seq $PROEJECT_DIR --use-normed # \u5bc6\u96c6\u9884\u6d4b 10Hz, stride=3 # python -m lilab.lstm_bhv_bodylennorm_classify.s1_matcalibpkl2clippredpkl_semiseq2seq $PROEJECT_DIR --use-normed --stride 3 # \u53ea\u770b\u955c\u50cf\u4e00\u81f4\u6027\u7684\u89c6\u9891\u7247\u6bb5\uff0crepresentative # \u5f97\u5230 out_semiseq2seq_norm/representitive_k36_filt_perc*/*.clippredpkl \u548c .seqencepkl conda activate mmdet python -m lilab.OpenLabCluster_train.a6_clippredpkl_2_seqencepkl $PROEJECT_DIR /out_semiseq2seq_norm/*.clippredpkl python -m lilab.OpenLabCluster_train.a1_mirror_mutual_filt_clippredpkl $PROEJECT_DIR /out_semiseq2seq_norm/lstm_offline.clippredpkl --already-mirrored python -m lilab.OpenLabCluster_train.a6_clippredpkl_2_seqencepkl $PROEJECT_DIR /out_semiseq2seq_norm/representitive_k36_filt_perc*/*.clippredpkl --autoEnd # \u753b\u51fa\u6bcf\u4e2a\u7c7b\u522b\u7684\u89c6\u9891\u7247\u6bb5 [\u53ef\u9009] # python -m lilab.OpenLabCluster_train.a6b_clippredpkl_2_cluster400p \\ # $PROEJECT_DIR/out_semiseq2seq_norm/representitive_k36_filt_perc*/Representive_K36.clippredpkl \\ # $PROEJECT_DIR","title":"\u4ee3\u7801\u6d41\u7a0b"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/OBS_%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/","text":"OBS \u8f6f\u4ef6\u5b89\u88c5 \u89c6\u9891\u6559\u7a0b\uff1axxx \u7cfb\u7edf\u91c7\u7528 OBS Studio\uff08\u7248\u672c 29.0 \uff09\u8fdb\u884c\u89c6\u9891\u5f55\u5236\u3002OBS \u4ee5\u5176\u4f18\u79c0\u7684\u53ef\u914d\u7f6e\u6027\u3001\u7a33\u5b9a\u6027\u548c\u5f00\u6e90\u7279\u6027\u5728\u89c6\u9891\u76f4\u64ad\u548c\u5f55\u5236\u9886\u57df\u5e7f\u6cdb\u5e94\u7528\u3002\u8be5\u8f6f\u4ef6\u652f\u6301\u591a\u79cd\u6765\u6e90\u8f93\u5165\uff0c\u5305\u62ec\u56fe\u50cf\u3001\u6587\u672c\u3001\u6d4f\u89c8\u5668\u7a97\u53e3\u3001\u6444\u50cf\u5934\u548c\u9ea6\u514b\u98ce\u7b49\uff0c \u6709\u6548\u7b80\u5316\u4e86\u591a\u76f8\u673a\u540c\u6b65\u5f55\u5236\u7684\u590d\u6742\u6027 \u3002\u5176\u591a\u7ebf\u7a0b\u8d1f\u8f7d\u4f18\u5316\u548c GPU \u89c6\u9891\u7f16\u89e3\u7801\u5177\u6709 \u51fa\u8272\u7684\u6027\u80fd\u8868\u73b0 \u3002\u5728\u672c\u5e73\u53f0\u4e2d\uff0cOBS \u63d0\u4f9b\u4e86\u5b9e\u65f6\u9884\u89c8\u3001\u591a\u76f8\u673a\u5e03\u5c40\u3001\u5206\u8fa8\u7387\u8c03\u6574\u548c\u7f16\u7a0b\u63a5\u53e3\u7b49\u5168\u9762\u800c\u7075\u6d3b\u7684\u89c6\u9891\u5f55\u5236\u89e3\u51b3\u65b9\u6848\u3002OBS \u7684\u5177\u4f53\u914d\u7f6e\u8be6\u89c1\u4e0b\u8868\u3002 OBS \u7248\u672c29.0, \u4e0b\u8f7d\u5730\u5740\uff1a https://obsproject.com/download \u5bf9\u8c61 \u4e3b\u8981\u529f\u80fd \u53c2\u6570 \u6765\u6e90 > \u6dfb\u52a0 > \u89c6\u9891\u91c7\u96c6\u8bbe\u5907 \u6dfb\u52a0 9 \u4e2aK1S293\u76f8\u673a \u5355\u4e2a\u76f8\u673a\u5206\u8fa8\u7387\u4e0b\u62c9\u5217\u8868\u4e2d\uff0c\u9009\u62e9 1280\u00d7800\uff0c\u5e27\u7387\u4e3a\u6700\u9ad8 (\u5373120fps)\uff0c\u5e27\u7f16\u7801\u4e3aMJPEG \u8bbe\u7f6e> \u8f93\u51fa> \u5f55\u50cf \u5f55\u50cf\u6587\u4ef6\u683c\u5f0f \u7c7b\u578b\u4e3a\u6807\u51c6\uff1b \u6587\u4ef6\u540d\u4e3a\u65e0\u7a7a\u683c\uff1b \u8f93\u51fa\u5bb9\u5668\u4e3a MP4\uff1b \u7f16\u7801\u5668\u4e3a NVIDIA NVENC HEVC; \u7801\u7387\u4e3a30 Mbps\uff1b\u9884\u8bbe\u4e3a\u9ad8\u8d28\u91cf\u3002 \u8bbe\u7f6e> \u89c6\u9891 \u753b\u5e03\u5206\u8fa8\u7387\u548c\u5e27\u7387 \u753b\u5e03\u5206\u8fa8\u7387 3840\u00d72400\uff0c\u4e3a 9 \u4e2a\u76f8\u673a\u62fc\u63a5\u540e\u7684\u50cf\u7d20\u548c\uff1b\u4e0d\u7f29\u653e\uff1b\u5e27\u7387 30 fps\u3002 \u83dc\u5355 > \u5de5\u5177 > WebSocket \u670d\u52a1\u5668 \u5916\u90e8\u4ee3\u7801\u63a7\u5236 OBS \u5f55\u5236\u5f00\u5173 \u7aef\u53e3\u53f7 4455; \u4e0d\u4f7f\u7528\u5bc6\u7801\uff08\u53d6\u6d88\u6743\u9274\u6846\uff09\uff1b\u63a8\u8350\u914d\u5408F2 \u540c\u6b65\u52a9\u624b\u4f7f\u7528 \u5728 OBS \u8f6f\u4ef6\u7684\u5177\u4f53\u914d\u7f6e\u8fc7\u7a0b\u4e2d\uff0c\u9700\u91cd\u70b9\u5173\u6ce8\u4ee5\u4e0b\u6280\u672f\u7ec6\u8282\uff1a \u5728\u5c06\u591a\u76f8\u673a\u89c6\u9891\u6d41\u6dfb\u52a0\u81f3 OBS \u753b\u5e03\u65f6\uff0c\u5e94\u907f\u514d\u5bf9\u76f8\u673a\u89c6\u89d2\u8fdb\u884c\u62c9\u4f38\u6216\u88c1\u526a\uff0c\u4ee5\u9632\u6b62\u56fe\u50cf\u6570\u636e\u4e22\u5931\u5e76\u786e\u4fdd\u540e\u7eed\u591a\u76f8\u673a\u56fe\u50cf\u8bfb\u53d6\u7684\u51c6\u786e\u5b9a\u4f4d\u3002 \u591a\u76f8\u673a\u56fe\u50cf\u5728 OBS \u753b\u5e03\u4e2d\u5e94\u7d27\u5bc6\u6392\u5217\uff0c\u76f8\u673a\u7f16\u53f7\u9700\u9075\u5faa\u4ece\u5de6\u5230\u53f3\u3001\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u3002 \u6709\u4e9b\u76f8\u673a\u62cd\u6444\u7684\u56fe\u50cf\u4e0a\u4e0b\u98a0\u5012\uff0c\u9700\u5728 OBS \u8f6f\u4ef6\u4e0a\u8fdb\u884c 180\u00b0\u65cb\u8f6c\u4fee\u6b63\uff0c\u4f46\u4e0d\u8981\u4f7f\u7528\u955c\u50cf\u3002 \u5b8c\u6210\u4e0a\u8ff0\u914d\u7f6e\u540e\uff0c\u5373\u53ef\u901a\u8fc7 OBS \u754c\u9762\u542f\u52a8\u5f55\u5236\uff0c\u540c\u6b65\u8bb0\u5f55 9 \u4e2a\u76f8\u673a\u7684\u884c\u4e3a\u5b9e\u9a8c\u89c6\u9891\u3002\u901a\u5e38\uff0c15\u5206\u949f\u7684\u5b9e\u9a8c\u89c6\u9891\u7ea6\u4e3a3.4GB\u3002\u4f7f\u7528 Potplayer \u6216\u8005 VLC \u7b49\u64ad\u653e\u5668\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5730\u67e5\u770b\u89c6\u9891\u3002","title":"OBS\u8f6f\u4ef6\u5b89\u88c5"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/OBS_%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/#obs","text":"\u89c6\u9891\u6559\u7a0b\uff1axxx \u7cfb\u7edf\u91c7\u7528 OBS Studio\uff08\u7248\u672c 29.0 \uff09\u8fdb\u884c\u89c6\u9891\u5f55\u5236\u3002OBS \u4ee5\u5176\u4f18\u79c0\u7684\u53ef\u914d\u7f6e\u6027\u3001\u7a33\u5b9a\u6027\u548c\u5f00\u6e90\u7279\u6027\u5728\u89c6\u9891\u76f4\u64ad\u548c\u5f55\u5236\u9886\u57df\u5e7f\u6cdb\u5e94\u7528\u3002\u8be5\u8f6f\u4ef6\u652f\u6301\u591a\u79cd\u6765\u6e90\u8f93\u5165\uff0c\u5305\u62ec\u56fe\u50cf\u3001\u6587\u672c\u3001\u6d4f\u89c8\u5668\u7a97\u53e3\u3001\u6444\u50cf\u5934\u548c\u9ea6\u514b\u98ce\u7b49\uff0c \u6709\u6548\u7b80\u5316\u4e86\u591a\u76f8\u673a\u540c\u6b65\u5f55\u5236\u7684\u590d\u6742\u6027 \u3002\u5176\u591a\u7ebf\u7a0b\u8d1f\u8f7d\u4f18\u5316\u548c GPU \u89c6\u9891\u7f16\u89e3\u7801\u5177\u6709 \u51fa\u8272\u7684\u6027\u80fd\u8868\u73b0 \u3002\u5728\u672c\u5e73\u53f0\u4e2d\uff0cOBS \u63d0\u4f9b\u4e86\u5b9e\u65f6\u9884\u89c8\u3001\u591a\u76f8\u673a\u5e03\u5c40\u3001\u5206\u8fa8\u7387\u8c03\u6574\u548c\u7f16\u7a0b\u63a5\u53e3\u7b49\u5168\u9762\u800c\u7075\u6d3b\u7684\u89c6\u9891\u5f55\u5236\u89e3\u51b3\u65b9\u6848\u3002OBS \u7684\u5177\u4f53\u914d\u7f6e\u8be6\u89c1\u4e0b\u8868\u3002 OBS \u7248\u672c29.0, \u4e0b\u8f7d\u5730\u5740\uff1a https://obsproject.com/download \u5bf9\u8c61 \u4e3b\u8981\u529f\u80fd \u53c2\u6570 \u6765\u6e90 > \u6dfb\u52a0 > \u89c6\u9891\u91c7\u96c6\u8bbe\u5907 \u6dfb\u52a0 9 \u4e2aK1S293\u76f8\u673a \u5355\u4e2a\u76f8\u673a\u5206\u8fa8\u7387\u4e0b\u62c9\u5217\u8868\u4e2d\uff0c\u9009\u62e9 1280\u00d7800\uff0c\u5e27\u7387\u4e3a\u6700\u9ad8 (\u5373120fps)\uff0c\u5e27\u7f16\u7801\u4e3aMJPEG \u8bbe\u7f6e> \u8f93\u51fa> \u5f55\u50cf \u5f55\u50cf\u6587\u4ef6\u683c\u5f0f \u7c7b\u578b\u4e3a\u6807\u51c6\uff1b \u6587\u4ef6\u540d\u4e3a\u65e0\u7a7a\u683c\uff1b \u8f93\u51fa\u5bb9\u5668\u4e3a MP4\uff1b \u7f16\u7801\u5668\u4e3a NVIDIA NVENC HEVC; \u7801\u7387\u4e3a30 Mbps\uff1b\u9884\u8bbe\u4e3a\u9ad8\u8d28\u91cf\u3002 \u8bbe\u7f6e> \u89c6\u9891 \u753b\u5e03\u5206\u8fa8\u7387\u548c\u5e27\u7387 \u753b\u5e03\u5206\u8fa8\u7387 3840\u00d72400\uff0c\u4e3a 9 \u4e2a\u76f8\u673a\u62fc\u63a5\u540e\u7684\u50cf\u7d20\u548c\uff1b\u4e0d\u7f29\u653e\uff1b\u5e27\u7387 30 fps\u3002 \u83dc\u5355 > \u5de5\u5177 > WebSocket \u670d\u52a1\u5668 \u5916\u90e8\u4ee3\u7801\u63a7\u5236 OBS \u5f55\u5236\u5f00\u5173 \u7aef\u53e3\u53f7 4455; \u4e0d\u4f7f\u7528\u5bc6\u7801\uff08\u53d6\u6d88\u6743\u9274\u6846\uff09\uff1b\u63a8\u8350\u914d\u5408F2 \u540c\u6b65\u52a9\u624b\u4f7f\u7528 \u5728 OBS \u8f6f\u4ef6\u7684\u5177\u4f53\u914d\u7f6e\u8fc7\u7a0b\u4e2d\uff0c\u9700\u91cd\u70b9\u5173\u6ce8\u4ee5\u4e0b\u6280\u672f\u7ec6\u8282\uff1a \u5728\u5c06\u591a\u76f8\u673a\u89c6\u9891\u6d41\u6dfb\u52a0\u81f3 OBS \u753b\u5e03\u65f6\uff0c\u5e94\u907f\u514d\u5bf9\u76f8\u673a\u89c6\u89d2\u8fdb\u884c\u62c9\u4f38\u6216\u88c1\u526a\uff0c\u4ee5\u9632\u6b62\u56fe\u50cf\u6570\u636e\u4e22\u5931\u5e76\u786e\u4fdd\u540e\u7eed\u591a\u76f8\u673a\u56fe\u50cf\u8bfb\u53d6\u7684\u51c6\u786e\u5b9a\u4f4d\u3002 \u591a\u76f8\u673a\u56fe\u50cf\u5728 OBS \u753b\u5e03\u4e2d\u5e94\u7d27\u5bc6\u6392\u5217\uff0c\u76f8\u673a\u7f16\u53f7\u9700\u9075\u5faa\u4ece\u5de6\u5230\u53f3\u3001\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u3002 \u6709\u4e9b\u76f8\u673a\u62cd\u6444\u7684\u56fe\u50cf\u4e0a\u4e0b\u98a0\u5012\uff0c\u9700\u5728 OBS \u8f6f\u4ef6\u4e0a\u8fdb\u884c 180\u00b0\u65cb\u8f6c\u4fee\u6b63\uff0c\u4f46\u4e0d\u8981\u4f7f\u7528\u955c\u50cf\u3002 \u5b8c\u6210\u4e0a\u8ff0\u914d\u7f6e\u540e\uff0c\u5373\u53ef\u901a\u8fc7 OBS \u754c\u9762\u542f\u52a8\u5f55\u5236\uff0c\u540c\u6b65\u8bb0\u5f55 9 \u4e2a\u76f8\u673a\u7684\u884c\u4e3a\u5b9e\u9a8c\u89c6\u9891\u3002\u901a\u5e38\uff0c15\u5206\u949f\u7684\u5b9e\u9a8c\u89c6\u9891\u7ea6\u4e3a3.4GB\u3002\u4f7f\u7528 Potplayer \u6216\u8005 VLC \u7b49\u64ad\u653e\u5668\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5730\u67e5\u770b\u89c6\u9891\u3002","title":"OBS \u8f6f\u4ef6\u5b89\u88c5"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/shopping_list/","text":"\u8bbe\u5907\u7ec4\u88c5\u548c\u6e05\u5355 \u5305\u542b\u76f8\u673a\u5b9e\u9a8c\u7bb1\uff0c\u5b9e\u9a8c\u7535\u8111\uff0c\u5206\u6790\u670d\u52a1\u5668\u3002\u89c6\u9891\u6559\u7a0b\uff1axxx \u76f8\u673a\u5b9e\u9a8c\u7bb1 \u8868\u683c\u4e2d\u5217\u51fa\u4e86\u76f8\u673a\u5b9e\u9a8c\u7bb1\u4e2d\u4f7f\u7528\u7684\u6240\u6709\u76f8\u673a\u548c\u6750\u6599\u3002 \u540d\u79f0 \u53c2\u6570 \u6570\u91cf \u8d2d\u4e70\u94fe\u63a5 K1S293 \u76f8\u673a 1280x800\u5206\u8fa8\u7387\uff0c120fps\uff0c\u9ed1\u767d 9 \u6dd8\u5b9d\u8d2d\u4e70\u94fe\u63a5 \u94dd\u578b\u6750\u652f\u67b6 \u516d\u8fb9\u5f62\uff0c\u53cc\u5c42\u652f\u67b6 1 \u81ea\u884c\u52a0\u5de5- \u4e91\u53f0\u548c\u6ed1\u8f68 9\u4e2a 9 \u6dd8\u5b9d\u8d2d\u4e70\u94fe\u63a5 \u7ea2\u5149\u7167\u660eLED \u73af\u5883\u5149\u7167\u660e 6 \u6dd8\u5b9d\u8d2d\u4e70\u94fe\u63a5 \u6c27\u5316\u94dd\u6807\u5b9a\u677f \u68cb\u76d8\uff0c\u76f8\u673a\u6807\u5b9a\uff1b\u578b\u53f7GP290 12x9 1 \u6dd8\u5b9d\u8d2d\u4e70\u94fe\u63a5 \u91d1\u5c5e\u5c0f\u7403 \u7528\u4e8e\u76f8\u673a\u5916\u53c2\u6807\u5b9a\uff0c\u76f4\u5f84 <2 cm 1 \u968f\u4fbf\u627e \u4e9a\u514b\u529b\u906e\u5149\u677f \u7528\u4e8e\u906e\u6321\u80cc\u666f\u6742\u7269\uff0c\u9632\u6b62\u56fe\u50cf\u5e72\u6270\u3002\u5c3a\u5bf8\u6839\u636e\u5b9e\u9a8c\u9700\u6c42\u3002 7 \u6dd8\u5b9d\u8d2d\u4e70\u94fe\u63a5 \u6ce8\u610f\u4e8b\u9879\uff1a - \u76f8\u673a\u7684\u955c\u5934\u5408\u9002\u7126\u8ddd\u9700\u8981\u81ea\u5df1\u6d4b\u8bd5\uff0c\u76f8\u673a\u8fdc\u8fd1\u3001\u8bd5\u9a8c\u7bb1\u5927\u5c0f\u7b49\u56e0\u7d20\u4f1a\u5f71\u54cd\u7126\u8ddd\u9009\u62e9\u3002 - \u5efa\u8bae\u8ba9\u76f8\u673a\u5382\u5bb6\u7ed9\u6bcf\u4e2a\u76f8\u673a\u4e0d\u540c\u7684\u8f6f\u4ef6\u6807\u5fd7\u7b26\uff08\u4e0d\u540c\u547d\u540d\uff09\uff0c\u65b9\u4fbf\u533a\u5206\u3002 - \u6ed1\u8f68\u4e0d\u662f\u90a3\u4e48\u5fc5\u8981\uff0c\u56e0\u4e3a\u53ef\u4ee5\u7528\u7126\u8ddd\u6765\u8c03\u6574\u76f8\u673a\u62cd\u6444\u89c6\u91ce\u3002\u4f46\u662f\u4e91\u53f0\u662f\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u9700\u8981\u8c03\u6574\u76f8\u673a\u7684\u89d2\u5ea6\u3002 - \u7ea2\u5149\u7167\u660eLED\u653e\u5728\u652f\u67b66\u4e2a\u89d2\u843d\u4e0a\uff0c\u5747\u5300\u7167\u660e\u3002\u5426\u5219\u5355\u4e00\u5149\u6e90\u5bb9\u6613\u5bfc\u81f4\u56fe\u50cf\u9634\u5f71\uff0c\u5bfc\u81f4\u540e\u7eed\u52a8\u7269\u5206\u6790\u7cbe\u5ea6\u4e0b\u964d\u3002\u706f\u5149\u5f3a\u5ea6\u8f83\u9ad8\uff0c\u9700\u8981\u7528\u906e\u6321\u4e00\u90e8\u5206\uff0c\u4f7f\u5f97\u6700\u540e\u7684\u5149\u7167\u572820lux\u5de6\u53f3\u3002 - \u76f8\u673a\u4e0d\u8981\u76f4\u8fde\u7535\u8111\u7684USB\u53e3\uff0c\u56e0\u4e3a\u4e3b\u677f\u7684USB\u5e26\u5bbd\u4e25\u91cd\u53d7\u9650\uff0c\u4e0d\u80fd\u540c\u65f6\u8fde\u591a\u76f8\u673a\u3002\u8bf7\u4f7f\u7528\u4e13\u4e1a\u7ea7PCIE-USB\u62d3\u5c55\u5361\uff08U3412U\uff09\uff01\uff01 \u5b9e\u9a8c\u7535\u8111\u786c\u4ef6\u914d\u7f6e \u7528\u4e8e\u91c7\u96c6\u591a\u76f8\u673a\u89c6\u9891\u6570\u636e\uff0c\u5e76\u4f7f\u7528OBS Studio\u8fdb\u884c\u89c6\u9891\u5f55\u5236\u3002 \u540d\u79f0 \u578b\u53f7 \u5907\u6ce8 \u64cd\u4f5c\u7cfb\u7edf Windows 10 - CPU Intel Core i7-12700 - GPU NVIDIA RTX 3060 OBS Studio\u8c03\u7528\u5176 HEVC \u89c6\u9891\u7f16\u7801\u5668 \u5185\u5b58 32GB DDR4 3200MHz - \u5b58\u50a8 SSD 1TB; HDD 8TB - PCIE-USB \u62d3\u5c55\u5361 \u6df1\u5733\u5e02\u901f\u901f\u4f18\u79d1\u6280 U3412U \uff0c 6\u53e3USB \u5f3a\u70c8\u63a8\u8350\uff0c\u6570\u91cfx2 \u4e91\u8ba1\u7b97\u5e73\u53f0\u786c\u4ef6\u914d\u7f6e \u7528\u4e8e\u8bad\u7ec3\u6a21\u578b\uff0c\u63a8\u7406\u6a21\u578b\uff1b\u6570\u636e\u5206\u6790\uff0c\u53ef\u89c6\u5316\uff1b\u95ed\u73af\u884c\u4e3a\u5e72\u9884\u7684\u4e91\u8ba1\u7b97\u5e73\u53f0\u3002 \u540d\u79f0 \u578b\u53f7 \u5907\u6ce8 \u5382\u5bb6 \u6d6a\u6f6e - \u64cd\u4f5c\u7cfb\u7edf Ubuntu 18.04 - CPU Intel Xeon 4314 dual \u53cc\u8defCPU GPU NVIDIA RTX 3090 \u6570\u91cfx4 \u5185\u5b58 256GB DDR4 3200MHz - \u5b58\u50a8 SSD 1TB; HDD 8TB - \uff08\u53ef\u9009\uff09\u4e91\u5b58\u50a8\u786c\u4ef6\uff08NAS\uff09\u914d\u7f6e \u7528\u4e8e\u5b58\u50a8\u5927\u91cf\u5b9e\u9a8c\u89c6\u9891\u6570\u636e\u548c\u5206\u6790\u7ed3\u679c\uff0c\u5e76\u652f\u6301\u591a\u7528\u6237\u540c\u65f6\u8bbf\u95ee\u3002 \u540d\u79f0 \u578b\u53f7 \u5907\u6ce8 \u7fa4\u8f891 DS2419+\uff0c 96 TB - \u7fa4\u8f892 RS2821RP+\uff0c 200 TB -","title":"\u786c\u4ef6\u6e05\u5355"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/shopping_list/#_1","text":"\u5305\u542b\u76f8\u673a\u5b9e\u9a8c\u7bb1\uff0c\u5b9e\u9a8c\u7535\u8111\uff0c\u5206\u6790\u670d\u52a1\u5668\u3002\u89c6\u9891\u6559\u7a0b\uff1axxx","title":"\u8bbe\u5907\u7ec4\u88c5\u548c\u6e05\u5355"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/shopping_list/#_2","text":"\u8868\u683c\u4e2d\u5217\u51fa\u4e86\u76f8\u673a\u5b9e\u9a8c\u7bb1\u4e2d\u4f7f\u7528\u7684\u6240\u6709\u76f8\u673a\u548c\u6750\u6599\u3002 \u540d\u79f0 \u53c2\u6570 \u6570\u91cf \u8d2d\u4e70\u94fe\u63a5 K1S293 \u76f8\u673a 1280x800\u5206\u8fa8\u7387\uff0c120fps\uff0c\u9ed1\u767d 9 \u6dd8\u5b9d\u8d2d\u4e70\u94fe\u63a5 \u94dd\u578b\u6750\u652f\u67b6 \u516d\u8fb9\u5f62\uff0c\u53cc\u5c42\u652f\u67b6 1 \u81ea\u884c\u52a0\u5de5- \u4e91\u53f0\u548c\u6ed1\u8f68 9\u4e2a 9 \u6dd8\u5b9d\u8d2d\u4e70\u94fe\u63a5 \u7ea2\u5149\u7167\u660eLED \u73af\u5883\u5149\u7167\u660e 6 \u6dd8\u5b9d\u8d2d\u4e70\u94fe\u63a5 \u6c27\u5316\u94dd\u6807\u5b9a\u677f \u68cb\u76d8\uff0c\u76f8\u673a\u6807\u5b9a\uff1b\u578b\u53f7GP290 12x9 1 \u6dd8\u5b9d\u8d2d\u4e70\u94fe\u63a5 \u91d1\u5c5e\u5c0f\u7403 \u7528\u4e8e\u76f8\u673a\u5916\u53c2\u6807\u5b9a\uff0c\u76f4\u5f84 <2 cm 1 \u968f\u4fbf\u627e \u4e9a\u514b\u529b\u906e\u5149\u677f \u7528\u4e8e\u906e\u6321\u80cc\u666f\u6742\u7269\uff0c\u9632\u6b62\u56fe\u50cf\u5e72\u6270\u3002\u5c3a\u5bf8\u6839\u636e\u5b9e\u9a8c\u9700\u6c42\u3002 7 \u6dd8\u5b9d\u8d2d\u4e70\u94fe\u63a5 \u6ce8\u610f\u4e8b\u9879\uff1a - \u76f8\u673a\u7684\u955c\u5934\u5408\u9002\u7126\u8ddd\u9700\u8981\u81ea\u5df1\u6d4b\u8bd5\uff0c\u76f8\u673a\u8fdc\u8fd1\u3001\u8bd5\u9a8c\u7bb1\u5927\u5c0f\u7b49\u56e0\u7d20\u4f1a\u5f71\u54cd\u7126\u8ddd\u9009\u62e9\u3002 - \u5efa\u8bae\u8ba9\u76f8\u673a\u5382\u5bb6\u7ed9\u6bcf\u4e2a\u76f8\u673a\u4e0d\u540c\u7684\u8f6f\u4ef6\u6807\u5fd7\u7b26\uff08\u4e0d\u540c\u547d\u540d\uff09\uff0c\u65b9\u4fbf\u533a\u5206\u3002 - \u6ed1\u8f68\u4e0d\u662f\u90a3\u4e48\u5fc5\u8981\uff0c\u56e0\u4e3a\u53ef\u4ee5\u7528\u7126\u8ddd\u6765\u8c03\u6574\u76f8\u673a\u62cd\u6444\u89c6\u91ce\u3002\u4f46\u662f\u4e91\u53f0\u662f\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u9700\u8981\u8c03\u6574\u76f8\u673a\u7684\u89d2\u5ea6\u3002 - \u7ea2\u5149\u7167\u660eLED\u653e\u5728\u652f\u67b66\u4e2a\u89d2\u843d\u4e0a\uff0c\u5747\u5300\u7167\u660e\u3002\u5426\u5219\u5355\u4e00\u5149\u6e90\u5bb9\u6613\u5bfc\u81f4\u56fe\u50cf\u9634\u5f71\uff0c\u5bfc\u81f4\u540e\u7eed\u52a8\u7269\u5206\u6790\u7cbe\u5ea6\u4e0b\u964d\u3002\u706f\u5149\u5f3a\u5ea6\u8f83\u9ad8\uff0c\u9700\u8981\u7528\u906e\u6321\u4e00\u90e8\u5206\uff0c\u4f7f\u5f97\u6700\u540e\u7684\u5149\u7167\u572820lux\u5de6\u53f3\u3002 - \u76f8\u673a\u4e0d\u8981\u76f4\u8fde\u7535\u8111\u7684USB\u53e3\uff0c\u56e0\u4e3a\u4e3b\u677f\u7684USB\u5e26\u5bbd\u4e25\u91cd\u53d7\u9650\uff0c\u4e0d\u80fd\u540c\u65f6\u8fde\u591a\u76f8\u673a\u3002\u8bf7\u4f7f\u7528\u4e13\u4e1a\u7ea7PCIE-USB\u62d3\u5c55\u5361\uff08U3412U\uff09\uff01\uff01","title":"\u76f8\u673a\u5b9e\u9a8c\u7bb1"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/shopping_list/#_3","text":"\u7528\u4e8e\u91c7\u96c6\u591a\u76f8\u673a\u89c6\u9891\u6570\u636e\uff0c\u5e76\u4f7f\u7528OBS Studio\u8fdb\u884c\u89c6\u9891\u5f55\u5236\u3002 \u540d\u79f0 \u578b\u53f7 \u5907\u6ce8 \u64cd\u4f5c\u7cfb\u7edf Windows 10 - CPU Intel Core i7-12700 - GPU NVIDIA RTX 3060 OBS Studio\u8c03\u7528\u5176 HEVC \u89c6\u9891\u7f16\u7801\u5668 \u5185\u5b58 32GB DDR4 3200MHz - \u5b58\u50a8 SSD 1TB; HDD 8TB - PCIE-USB \u62d3\u5c55\u5361 \u6df1\u5733\u5e02\u901f\u901f\u4f18\u79d1\u6280 U3412U \uff0c 6\u53e3USB \u5f3a\u70c8\u63a8\u8350\uff0c\u6570\u91cfx2","title":"\u5b9e\u9a8c\u7535\u8111\u786c\u4ef6\u914d\u7f6e"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/shopping_list/#_4","text":"\u7528\u4e8e\u8bad\u7ec3\u6a21\u578b\uff0c\u63a8\u7406\u6a21\u578b\uff1b\u6570\u636e\u5206\u6790\uff0c\u53ef\u89c6\u5316\uff1b\u95ed\u73af\u884c\u4e3a\u5e72\u9884\u7684\u4e91\u8ba1\u7b97\u5e73\u53f0\u3002 \u540d\u79f0 \u578b\u53f7 \u5907\u6ce8 \u5382\u5bb6 \u6d6a\u6f6e - \u64cd\u4f5c\u7cfb\u7edf Ubuntu 18.04 - CPU Intel Xeon 4314 dual \u53cc\u8defCPU GPU NVIDIA RTX 3090 \u6570\u91cfx4 \u5185\u5b58 256GB DDR4 3200MHz - \u5b58\u50a8 SSD 1TB; HDD 8TB -","title":"\u4e91\u8ba1\u7b97\u5e73\u53f0\u786c\u4ef6\u914d\u7f6e"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/shopping_list/#nas","text":"\u7528\u4e8e\u5b58\u50a8\u5927\u91cf\u5b9e\u9a8c\u89c6\u9891\u6570\u636e\u548c\u5206\u6790\u7ed3\u679c\uff0c\u5e76\u652f\u6301\u591a\u7528\u6237\u540c\u65f6\u8bbf\u95ee\u3002 \u540d\u79f0 \u578b\u53f7 \u5907\u6ce8 \u7fa4\u8f891 DS2419+\uff0c 96 TB - \u7fa4\u8f892 RS2821RP+\uff0c 200 TB -","title":"\uff08\u53ef\u9009\uff09\u4e91\u5b58\u50a8\u786c\u4ef6\uff08NAS\uff09\u914d\u7f6e"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"\u670d\u52a1\u5668\u73af\u5883\u914d\u7f6e \u53ea\u6709\u914d\u7f6e\u597d\u670d\u52a1\u5668\u73af\u5883\uff0c\u624d\u80fd\u987a\u5229\u8fd0\u884c\u672c\u9879\u76ee\uff0c\u5305\u62ec\u6a21\u578b\u8bad\u7ec3\u3001\u63a8\u7406\uff0c\u52a8\u7269\u884c\u4e3a\u5206\u6790\u6d41\u7a0b\u3002 \u8bba\u6587\u56fe\u8868\u590d\u73b0\ud83d\udd17 \u4e0d\u9700\u8981\u914d\u7f6e\u670d\u52a1\u5668\u73af\u5883\uff0c\u53ea\u9700\u8981\u914d\u7f6e\u672c\u5730\u73af\u5883\u5373\u53ef\u3002 \u670d\u52a1\u5668\u73af\u5883\u914d\u7f6e\u6ce8\u610f \u6df1\u5ea6\u5b66\u4e60\u73af\u5883\u662f\u672c\u9879\u76ee\u7684\u6838\u5fc3\u57fa\u7840\u3002\u6211\u4eec\u7406\u89e3\u73af\u5883\u642d\u5efa\u53ef\u80fd\u662f\u4e00\u4e2a\u590d\u6742\u4e14\u5177\u6709\u6311\u6218\u6027\u7684\u8fc7\u7a0b\uff0c\u8fd9\u4e5f\u662f\u6574\u4e2aAI\u9886\u57df\u666e\u904d\u9762\u4e34\u7684\u96be\u9898\u3002 \u867d\u7136\u6211\u4eec\u5728\u6301\u7eed\u4f18\u5316\u90e8\u7f72\u6d41\u7a0b\uff0c\u4f46\u5f53\u524d\u9879\u76ee\u4ecd\u5b58\u5728\u4e00\u4e9b\u7248\u672c\u517c\u5bb9\u6027\u95ee\u9898\u3002\u6211\u4eec\u5efa\u8bae\u60a8\u5728\u914d\u7f6e\u73af\u5883\u65f6\u4fdd\u6301\u8010\u5fc3\uff0c\u5e76\u5177\u5907\u4e00\u5b9a\u7684\u6280\u672f\u94bb\u7814\u7cbe\u795e\uff0c\u4ee5\u5e94\u5bf9\u53ef\u80fd\u51fa\u73b0\u7684\u6311\u6218\u3002 \u786c\u4ef6\u914d\u7f6e \u670d\u52a1\u5668\u786c\u4ef6\u914d\u7f6e\u5305\u62ec\uff1a CPU : Intel Xeon 4314 \u5185\u5b58 : 256 GB GPU : 4 \u5757 NVIDIA GeForce RTX 3090 \u5b58\u50a8 : 1 TB \u56fa\u6001\u786c\u76d8 + 8 TB \u673a\u68b0\u786c\u76d8 \u8f6f\u4ef6\u73af\u5883 \u8f6f\u4ef6\u73af\u5883\u5305\u62ec\uff1a \u64cd\u4f5c\u7cfb\u7edf : Ubuntu 18.04 \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 : CUDA 11.4\u3001cuDNN 8.8\u3001TensorRT 8.6 \u5f00\u53d1\u5de5\u5177 : Python 3.7.16\u3001OpenCV-Python 4.8.0\u3001TensorFlow 2.7.0\u3001PyTorch 1.11.0 \u7528\u4e8e\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u8bad\u7ec3\u548c\u6570\u636e\u5206\u6790\u3002 \u91cd\u8981\u8b66\u544a \u76ee\u524d\u4ec5\u652f\u6301 Ubuntu \u7cfb\u7edf\u548c NVIDIA \u663e\u5361\uff0c\u5176\u4ed6\u7cfb\u7edf\u8bf7\u81ea\u884c\u67e5\u9605\u76f8\u5173\u8d44\u6599\u3002 \u91cd\u8981\u8b66\u544a \u7531\u4e8e\u8f6f\u4ef6\u662f\u57282019\u5e74\u914d\u7f6e\u7684\uff0c\u56e0\u6b64\u90e8\u5206\u8f6f\u4ef6\u7248\u672c\u53ef\u80fd\u5df2\u7ecf\u8fc7\u65f6\uff0c\u5efa\u8bae\u6839\u636e\u5b9e\u9645\u9700\u6c42\u9009\u62e9\u6700\u65b0\u7248\u672c\u3002\u5927\u90e8\u5206 Python \u5e93\u53ef\u4ee5\u5728 pip \u548c conda \u4e2d\u627e\u5230\uff0c\u4f46\u662f\u90e8\u5206\u5e93\u53ef\u80fd\u96be\u4ee5\u517c\u5bb9\u5b89\u88c5\u3002\u672c\u6587\u6863\u96be\u4ee5\u517c\u987e\u6240\u6709\u8f6f\u4ef6\u7684\u6700\u65b0\u7248\u672c\uff0c\u8bf7\u81ea\u884c\u67e5\u9605\u76f8\u5173\u8d44\u6599\u3002 \u5f3a\u70c8\u5efa\u8bae\u5b89\u88c5\u8f6f\u4ef6\u5217\u8868 \u8f6f\u4ef6\u540d\u79f0 \u672c\u673a\u6d4b\u8bd5\u7248\u672c\u53f7\uff082022\u5e74\uff09 2025\u5e74\u7248\u672c\uff0c\u672a\u6d4b\u8bd5 \u5907\u6ce8 Ubuntu 18.04 24.04 \u64cd\u4f5c\u7cfb\u7edf\uff0c\u63a8\u8350 Python 3.7.16 3.12 \u5f00\u53d1\u8bed\u8a00\uff0c\u5fc5\u987b CUDA 11.4 12.9 \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff0c\u5fc5\u987b cuDNN 8.8 8.9 \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff0c\u5fc5\u987b TensorRT 8.6 10.13 \u63a8\u7406\u52a0\u901f\uff0c\u5fc5\u987b OpenCV-Python 4.8.0 4.12.0 \u56fe\u50cf\u5904\u7406\uff0c\u5fc5\u987b TensorFlow 2.7.0 2.16.0 DANNCE \u6a21\u578b\uff0c\u5fc5\u987b PyTorch 1.11.0 2.7.1 \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff0c\u5fc5\u987b Docker 24.0.6 28.3.0 \u5bb9\u5668\u5316\uff0c\u7528\u4e8e Mediamtx FFmpeg 4.x 6.x \u89c6\u9891\u8bfb\u5199 Mediamtx - - \u89c6\u9891\u6d41\u670d\u52a1\u5668\uff0c\u7528\u4e8e\u95ed\u73af\u884c\u4e3a\u5e72\u9884 \u6d4b\u8bd5\u5b89\u88c5\u73af\u5883 \u6240\u6709\u8f6f\u4ef6\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u9700\u8981\u8fdb\u884c\u6d4b\u8bd5\uff0c\u4ee5\u786e\u4fdd\u5b89\u88c5\u6210\u529f\u3002\u6d4b\u8bd5\u65b9\u6cd5\u5982\u4e0b\uff1a \u6d4b\u8bd5 nvidia cuda driver $ nvidia-smi \u6d4b\u8bd5 Nvidia Cuda Compiler $ nvcc --version \u6d4b\u8bd5 TensorRT \u547d\u4ee4\u884c\u5de5\u5177 $ trtexec --onnx = /path/to/model.onnx --saveEngine = /path/to/model.engine \u6d4b\u8bd5 polygraphy (NVIDIA \u5b98\u65b9\u5de5\u5177) \u547d\u4ee4\u884c\u5de5\u5177 $ polygraphy inspect model --onnx = /path/to/model.onnx \u6d4b\u8bd5 FFmpeg \u547d\u4ee4\u884c\u5de5\u5177 # ffmpeg generate a 640x480 video, 30 fps, 1 minute $ ffmpeg -f lavfi -i testsrc = duration = 60 :size = 640x480:rate = 30 -c:v libx264 -pix_fmt yuv420p -f mp4 /path/to/test.mp4 # convert it to hevc by NVIDIA HEVC encoder $ ffmpeg -i /path/to/test.mp4 -c:v hevc_nvenc -pix_fmt yuv420p -f mp4 /path/to/test_hevc.mp4 \u6d4b\u8bd5 Docker \u547d\u4ee4\u884c\u5de5\u5177 $ docker run hello-world $ docker run --rm -it -e MTX_PROTOCOLS = tcp -p 8554 :8554 -p 1935 :1935 bluenviron/mediamtx \u4e09\u65b9\u6df1\u5ea6\u5b66\u4e60\u5de5\u5177\u5305 1. OPEN-MMLAB/MMDETECTION \u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u63d0\u4f9b\u4e86 MaskRCNN \u7684\u5f00\u6e90\u9879\u76ee\uff0c\u7528\u4e8e\u76ee\u6807\u68c0\u6d4b\u548c\u5206\u5272\u3002\u6211\u4eec\u8fdb\u884c\u4e86 fork (2022\u5e74\uff09\uff0c\u5e76\u6dfb\u52a0\u4e86\u81ea\u5b9a\u4e49\u7684\u6a21\u578b\u548c\u914d\u7f6e\u6587\u4ef6\uff0c\u4ee5\u5b9e\u73b0\u591a\u5927\u9f20\u5206\u5272\u3002 \u5b89\u88c5\u65b9\u6cd5\u8bf7\u53c2\u8003 MMdetection \u7684 \u5b98\u65b9\u6587\u6863 \u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/mmdetection.git \u91cd\u8981\u8b66\u544a \u6211\u4eec fork \u7684\u662f MMDET 1.x \u7248\u672c\uff0c\u76ee\u524d\u652f\u6301 python3.7\uff1b\u5b98\u7f51\u6700\u65b0\u7684 MMDET \u662f 3.x \u7248\u672c\uff0c\u53ef\u80fd\u5b58\u5728\u4e25\u91cd\u7684\u517c\u5bb9\u6027\u95ee\u9898\u3002\u8bf7\u6839\u636e\u5b9e\u9645\u9700\u6c42\u9009\u62e9\u5408\u9002\u7684\u7248\u672c\u3002 2. OPEN-MMLAB/MMPOSE \u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u63d0\u4f9b\u4e86 MaskRCNN \u7684\u5f00\u6e90\u9879\u76ee\uff0c\u7528\u4e8e\u4eba\u4f53\u59ff\u6001\u5173\u952e\u70b9\u68c0\u6d4b\u3002\u6211\u4eec\u8fdb\u884c\u4e86 fork\uff082022\u5e74\uff09\uff0c\u5e76\u6dfb\u52a0\u4e86\u81ea\u5b9a\u4e49\u7684\u6a21\u578b\u548c\u914d\u7f6e\u6587\u4ef6\uff0c\u4ee5\u5b9e\u73b0\u5c0f\u7403\u68c0\u6d4b\u3002 \u5b89\u88c5\u65b9\u6cd5\u8bf7\u53c2\u8003 MMpose \u7684 \u5b98\u65b9\u6587\u6863 \u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/mmpose.git \u91cd\u8981\u8b66\u544a \u6211\u4eec fork \u7684\u662f MMPOSE 0.x \u7248\u672c\u3002\u65b0\u7248\u672c\u548c\u73af\u5883\u53ef\u80fd\u5b58\u5728\u517c\u5bb9\u6027\u95ee\u9898\u3002\u8bf7\u6839\u636e\u5b9e\u9645\u9700\u6c42\u9009\u62e9\u5408\u9002\u7684\u7248\u672c\u3002 3. YOLO-v8 \u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u76ee\u6807\u68c0\u6d4b\uff0c\u5b9e\u4f8b\u5206\u5272\u7684\u5f00\u6e90\u9879\u76ee\u3002\u6211\u4eec\u8fdb\u884c\u4e86 fork\uff082024\u5e74\uff09\uff0c\u5e76\u6dfb\u52a0\u4e86\u81ea\u5b9a\u4e49\u7684\u6a21\u578b\u548c\u914d\u7f6e\u6587\u4ef6\uff0c\u4ee5\u5b9e\u73b0\u5b9e\u65f6\u591a\u5927\u9f20\u5206\u5272\u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/ultralytics.git \u91cd\u8981\u8b66\u544a \u6211\u4eec fork \u7684\u7248\u672c\uff0c\u4e0e\u6700\u65b0\u7248\u672c\u53ef\u80fd\u5b58\u5728\u517c\u5bb9\u6027\u95ee\u9898\u3002\u8bf7\u6839\u636e\u5b9e\u9645\u9700\u6c42\u9009\u62e9\u5408\u9002\u7684\u7248\u672c\u3002 4. DANNCE \u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u591a\u89c6\u89d2\u52a8\u7269\u59ff\u6001\u4f30\u8ba1\u7684\u5e93\u3002\u6211\u4eec\u8fdb\u884c\u4e86 fork\uff082022\u5e74\uff09\uff0c\u5e76\u6dfb\u52a0\u4e86\u81ea\u5b9a\u4e49\u7684\u6a21\u578b\u548c\u914d\u7f6e\u6587\u4ef6\uff0c\u4ee5\u5b9e\u73b0\u5b9e\u65f6\u591a\u5927\u9f203D\u5173\u952e\u70b9\u8bc6\u522b\u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/dannce.git \u91cd\u8981\u8b66\u544a \u6211\u4eec fork \u7684\u7248\u672c\uff0c\u4e0e\u6700\u65b0\u7248\u672c\u53ef\u80fd\u5b58\u5728\u517c\u5bb9\u6027\u95ee\u9898\u3002\u800c\u4e14\uff0c\u8be5\u5e93\u7684\u9884\u6d4b\u7cbe\u5ea6\u9ad8\uff0c\u4f46\u901f\u5ea6\u6162\u3002\u6211\u4eec\u8fdb\u884c\u4e86\u901f\u5ea6\u4f18\u5316\uff0c\u5bfc\u81f4\u4e0e\u539f\u59cb\u4ee3\u7801\u5b58\u5728\u4e00\u4e9b\u5dee\u5f02\uff0c\u4ee5\u53ca\u66f4\u591a\u7684\u517c\u5bb9\u6027\u95ee\u9898\u3002\u5b89\u88c5\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6211\u4eec\u6b63\u5728\u4f18\u5316\u5b89\u88c5\u6587\u6863\u3002 5. SmoothNet \u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u59ff\u6001\u65f6\u95f4\u5e73\u6ed1\u7684\u5e93\u3002\u6211\u4eec\u8fdb\u884c\u4e86 fork\uff082022\u5e74\uff09\uff0c\u5e76\u6dfb\u52a0\u4e86\u81ea\u5b9a\u4e49\u7684\u6a21\u578b\u548c\u914d\u7f6e\u6587\u4ef6\uff0c\u4ee5\u5b9e\u73b0\u5b9e\u65f6\u591a\u5927\u9f203D\u5173\u952e\u70b9\u5e73\u6ed1\u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/SmoothNet.git \u91cd\u8981\u8b66\u544a \u6211\u4eec fork \u7684\u7248\u672c\uff0c\u4e0e\u6700\u65b0\u7248\u672c\u53ef\u80fd\u5b58\u5728\u517c\u5bb9\u6027\u95ee\u9898\u3002\u8bf7\u6839\u636e\u5b9e\u9645\u9700\u6c42\u9009\u62e9\u5408\u9002\u7684\u7248\u672c\u3002 \u5b89\u88c5\u672c\u9879\u76ee\u521b\u5efa\u548c\u6539\u9020\u7684 python \u5305 1. LILAB \u5206\u6790\u5de5\u5177\u5305 \u5305\u542b\u4e86\u5e38\u89c1\u7684\u5206\u6790\u5de5\u5177\uff0c\u5982\u76f8\u673a\u6807\u5b9a\u6d41\u7a0b\uff0c\u5927\u9f20\u5206\u5272\u3001\u59ff\u6001\u4f30\u8ba1\u6d41\u7a0b\uff0c\u884c\u4e3a\u8bc6\u522b\u6d41\u7a0b\uff0c\u5927\u6570\u636e\u6316\u6398\u76f8\u5173\u5de5\u5177\u7b49\u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/LILAB-py.git \u5b89\u88c5\u65b9\u6cd5\uff1a git clone https://github.com/chenxinfeng4/LILAB-py.git cd LILAB-py pip install -e . \u91cd\u8981\u8b66\u544a \u5305\u542b\u8bb8\u591a\u6d41\u7a0b\u5de5\u5177\uff0c\u4f9d\u8d56\u8fc7\u4e8e\u5e9e\u5927\uff0c\u56e0\u6b64\u4e0d\u8fdb\u884c\u81ea\u52a8\u4f9d\u8d56\u5b89\u88c5\u3002\u5982\u679c import \u62a5\u9519\uff0c\u5219\u9700\u8981\u624b\u52a8\u5b89\u88c5\u4f9d\u8d56\u3002 2. FFMPEGCV \u5de5\u5177\u5305 GPU \u52a0\u901f\u7684\u89c6\u9891\u5904\u7406\u5de5\u5177\u5305\uff0c\u65b9\u4fbf\u591a\u76f8\u673a\u89c6\u9891\u8bfb\u5199\uff0c\u67d0\u4e9b\u573a\u666f\u4e0b\u6bd4 OpenCV \u5feb 9 \u500d\u3002\u6211\u5f00\u6e90\u4e4b\u540e\uff0c\u5e74\u4e0b\u8f7d\u91cf 7 \u4e07\u6b21 \u3002\u67e5\u770b\u5bf9\u5e94 \u6587\u6863 \u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/ffmpegcv.git \u5b89\u88c5\u65b9\u6cd5\uff1a pip install ffmpegcv \u91cd\u8981\u8b66\u544a \u4f7f\u7528 GPU \u52a0\u901f\uff0c\u9700\u8981\u6709 NVIDIA-driver\u3002 3. multiview_calib \u5de5\u5177\u5305 \u76f8\u673a\u5916\u53c2\u6807\u5b9a\uff08\u5c0f\u7403\u6807\u5b9a\uff09\u7684\u5de5\u5177\u5305\u3002\u5728\u4e09\u65b9\u5e93\u57fa\u7840\u4e0a\uff0c\u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u5e76\u6dfb\u52a0\u4e86\u81ea\u5b9a\u4e49\u7684\u6807\u5b9a\u6d41\u7a0b\u3002\u67e5\u770b\u5bf9\u5e94 \u6587\u6863 \u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/multiview_calib.git \u5b89\u88c5\u65b9\u6cd5\uff1a pip install git+https://github.com/chenxinfeng4/multiview_calib.git # \u5c0f\u7403\u6807\u5b9a\u7b80\u6613\u6559\u7a0b git clone https://github.com/chenxinfeng4/multiview_ball_calib 4. \u5176\u5b83\u6539\u9020\u5de5\u5177\u5305 torch2trt : torch2trt \u6539\u9020\uff0c\u652f\u6301 engine \u6587\u4ef6\u76f4\u63a5\u8f7d\u5165\u3002 pip install git+https://github.com/chenxinfeng4/torch2trt cocoapi : \u5c06 cocoapi \u8fdb\u884c\u591a\u7ebf\u7a0b\u6539\u9020\uff0c\u63d0\u5347\u901f\u5ea6\u3002 pip install git+https://github.com/chenxinfeng4/cocoapi mmdetection-to-tensorrt : Mask-RCNN \u6a21\u578b\u8f6c\u6362\u4e3a tensorrt \u6a21\u578b\u3002 pip install git+https://github.com/chenxinfeng4/mmdetection-to-tensorrt","title":"\u670d\u52a1\u5668\u73af\u5883\u914d\u7f6e"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_1","text":"\u53ea\u6709\u914d\u7f6e\u597d\u670d\u52a1\u5668\u73af\u5883\uff0c\u624d\u80fd\u987a\u5229\u8fd0\u884c\u672c\u9879\u76ee\uff0c\u5305\u62ec\u6a21\u578b\u8bad\u7ec3\u3001\u63a8\u7406\uff0c\u52a8\u7269\u884c\u4e3a\u5206\u6790\u6d41\u7a0b\u3002 \u8bba\u6587\u56fe\u8868\u590d\u73b0\ud83d\udd17 \u4e0d\u9700\u8981\u914d\u7f6e\u670d\u52a1\u5668\u73af\u5883\uff0c\u53ea\u9700\u8981\u914d\u7f6e\u672c\u5730\u73af\u5883\u5373\u53ef\u3002 \u670d\u52a1\u5668\u73af\u5883\u914d\u7f6e\u6ce8\u610f \u6df1\u5ea6\u5b66\u4e60\u73af\u5883\u662f\u672c\u9879\u76ee\u7684\u6838\u5fc3\u57fa\u7840\u3002\u6211\u4eec\u7406\u89e3\u73af\u5883\u642d\u5efa\u53ef\u80fd\u662f\u4e00\u4e2a\u590d\u6742\u4e14\u5177\u6709\u6311\u6218\u6027\u7684\u8fc7\u7a0b\uff0c\u8fd9\u4e5f\u662f\u6574\u4e2aAI\u9886\u57df\u666e\u904d\u9762\u4e34\u7684\u96be\u9898\u3002 \u867d\u7136\u6211\u4eec\u5728\u6301\u7eed\u4f18\u5316\u90e8\u7f72\u6d41\u7a0b\uff0c\u4f46\u5f53\u524d\u9879\u76ee\u4ecd\u5b58\u5728\u4e00\u4e9b\u7248\u672c\u517c\u5bb9\u6027\u95ee\u9898\u3002\u6211\u4eec\u5efa\u8bae\u60a8\u5728\u914d\u7f6e\u73af\u5883\u65f6\u4fdd\u6301\u8010\u5fc3\uff0c\u5e76\u5177\u5907\u4e00\u5b9a\u7684\u6280\u672f\u94bb\u7814\u7cbe\u795e\uff0c\u4ee5\u5e94\u5bf9\u53ef\u80fd\u51fa\u73b0\u7684\u6311\u6218\u3002","title":"\u670d\u52a1\u5668\u73af\u5883\u914d\u7f6e"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_2","text":"\u670d\u52a1\u5668\u786c\u4ef6\u914d\u7f6e\u5305\u62ec\uff1a CPU : Intel Xeon 4314 \u5185\u5b58 : 256 GB GPU : 4 \u5757 NVIDIA GeForce RTX 3090 \u5b58\u50a8 : 1 TB \u56fa\u6001\u786c\u76d8 + 8 TB \u673a\u68b0\u786c\u76d8","title":"\u786c\u4ef6\u914d\u7f6e"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_3","text":"\u8f6f\u4ef6\u73af\u5883\u5305\u62ec\uff1a \u64cd\u4f5c\u7cfb\u7edf : Ubuntu 18.04 \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 : CUDA 11.4\u3001cuDNN 8.8\u3001TensorRT 8.6 \u5f00\u53d1\u5de5\u5177 : Python 3.7.16\u3001OpenCV-Python 4.8.0\u3001TensorFlow 2.7.0\u3001PyTorch 1.11.0 \u7528\u4e8e\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u8bad\u7ec3\u548c\u6570\u636e\u5206\u6790\u3002 \u91cd\u8981\u8b66\u544a \u76ee\u524d\u4ec5\u652f\u6301 Ubuntu \u7cfb\u7edf\u548c NVIDIA \u663e\u5361\uff0c\u5176\u4ed6\u7cfb\u7edf\u8bf7\u81ea\u884c\u67e5\u9605\u76f8\u5173\u8d44\u6599\u3002 \u91cd\u8981\u8b66\u544a \u7531\u4e8e\u8f6f\u4ef6\u662f\u57282019\u5e74\u914d\u7f6e\u7684\uff0c\u56e0\u6b64\u90e8\u5206\u8f6f\u4ef6\u7248\u672c\u53ef\u80fd\u5df2\u7ecf\u8fc7\u65f6\uff0c\u5efa\u8bae\u6839\u636e\u5b9e\u9645\u9700\u6c42\u9009\u62e9\u6700\u65b0\u7248\u672c\u3002\u5927\u90e8\u5206 Python \u5e93\u53ef\u4ee5\u5728 pip \u548c conda \u4e2d\u627e\u5230\uff0c\u4f46\u662f\u90e8\u5206\u5e93\u53ef\u80fd\u96be\u4ee5\u517c\u5bb9\u5b89\u88c5\u3002\u672c\u6587\u6863\u96be\u4ee5\u517c\u987e\u6240\u6709\u8f6f\u4ef6\u7684\u6700\u65b0\u7248\u672c\uff0c\u8bf7\u81ea\u884c\u67e5\u9605\u76f8\u5173\u8d44\u6599\u3002","title":"\u8f6f\u4ef6\u73af\u5883"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_4","text":"\u8f6f\u4ef6\u540d\u79f0 \u672c\u673a\u6d4b\u8bd5\u7248\u672c\u53f7\uff082022\u5e74\uff09 2025\u5e74\u7248\u672c\uff0c\u672a\u6d4b\u8bd5 \u5907\u6ce8 Ubuntu 18.04 24.04 \u64cd\u4f5c\u7cfb\u7edf\uff0c\u63a8\u8350 Python 3.7.16 3.12 \u5f00\u53d1\u8bed\u8a00\uff0c\u5fc5\u987b CUDA 11.4 12.9 \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff0c\u5fc5\u987b cuDNN 8.8 8.9 \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff0c\u5fc5\u987b TensorRT 8.6 10.13 \u63a8\u7406\u52a0\u901f\uff0c\u5fc5\u987b OpenCV-Python 4.8.0 4.12.0 \u56fe\u50cf\u5904\u7406\uff0c\u5fc5\u987b TensorFlow 2.7.0 2.16.0 DANNCE \u6a21\u578b\uff0c\u5fc5\u987b PyTorch 1.11.0 2.7.1 \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff0c\u5fc5\u987b Docker 24.0.6 28.3.0 \u5bb9\u5668\u5316\uff0c\u7528\u4e8e Mediamtx FFmpeg 4.x 6.x \u89c6\u9891\u8bfb\u5199 Mediamtx - - \u89c6\u9891\u6d41\u670d\u52a1\u5668\uff0c\u7528\u4e8e\u95ed\u73af\u884c\u4e3a\u5e72\u9884","title":"\u5f3a\u70c8\u5efa\u8bae\u5b89\u88c5\u8f6f\u4ef6\u5217\u8868"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_5","text":"\u6240\u6709\u8f6f\u4ef6\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u9700\u8981\u8fdb\u884c\u6d4b\u8bd5\uff0c\u4ee5\u786e\u4fdd\u5b89\u88c5\u6210\u529f\u3002\u6d4b\u8bd5\u65b9\u6cd5\u5982\u4e0b\uff1a","title":"\u6d4b\u8bd5\u5b89\u88c5\u73af\u5883"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#nvidia-cuda-driver","text":"$ nvidia-smi","title":"\u6d4b\u8bd5 nvidia cuda driver"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#nvidia-cuda-compiler","text":"$ nvcc --version","title":"\u6d4b\u8bd5 Nvidia Cuda Compiler"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#tensorrt","text":"$ trtexec --onnx = /path/to/model.onnx --saveEngine = /path/to/model.engine","title":"\u6d4b\u8bd5 TensorRT \u547d\u4ee4\u884c\u5de5\u5177"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#polygraphy-nvidia","text":"$ polygraphy inspect model --onnx = /path/to/model.onnx","title":"\u6d4b\u8bd5 polygraphy (NVIDIA \u5b98\u65b9\u5de5\u5177) \u547d\u4ee4\u884c\u5de5\u5177"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ffmpeg","text":"# ffmpeg generate a 640x480 video, 30 fps, 1 minute $ ffmpeg -f lavfi -i testsrc = duration = 60 :size = 640x480:rate = 30 -c:v libx264 -pix_fmt yuv420p -f mp4 /path/to/test.mp4 # convert it to hevc by NVIDIA HEVC encoder $ ffmpeg -i /path/to/test.mp4 -c:v hevc_nvenc -pix_fmt yuv420p -f mp4 /path/to/test_hevc.mp4","title":"\u6d4b\u8bd5 FFmpeg \u547d\u4ee4\u884c\u5de5\u5177"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#docker","text":"$ docker run hello-world $ docker run --rm -it -e MTX_PROTOCOLS = tcp -p 8554 :8554 -p 1935 :1935 bluenviron/mediamtx","title":"\u6d4b\u8bd5 Docker \u547d\u4ee4\u884c\u5de5\u5177"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_6","text":"","title":"\u4e09\u65b9\u6df1\u5ea6\u5b66\u4e60\u5de5\u5177\u5305"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#1-open-mmlabmmdetection","text":"\u8fd9\u662f\u4e00\u4e2a\u63d0\u4f9b\u4e86 MaskRCNN \u7684\u5f00\u6e90\u9879\u76ee\uff0c\u7528\u4e8e\u76ee\u6807\u68c0\u6d4b\u548c\u5206\u5272\u3002\u6211\u4eec\u8fdb\u884c\u4e86 fork (2022\u5e74\uff09\uff0c\u5e76\u6dfb\u52a0\u4e86\u81ea\u5b9a\u4e49\u7684\u6a21\u578b\u548c\u914d\u7f6e\u6587\u4ef6\uff0c\u4ee5\u5b9e\u73b0\u591a\u5927\u9f20\u5206\u5272\u3002 \u5b89\u88c5\u65b9\u6cd5\u8bf7\u53c2\u8003 MMdetection \u7684 \u5b98\u65b9\u6587\u6863 \u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/mmdetection.git \u91cd\u8981\u8b66\u544a \u6211\u4eec fork \u7684\u662f MMDET 1.x \u7248\u672c\uff0c\u76ee\u524d\u652f\u6301 python3.7\uff1b\u5b98\u7f51\u6700\u65b0\u7684 MMDET \u662f 3.x \u7248\u672c\uff0c\u53ef\u80fd\u5b58\u5728\u4e25\u91cd\u7684\u517c\u5bb9\u6027\u95ee\u9898\u3002\u8bf7\u6839\u636e\u5b9e\u9645\u9700\u6c42\u9009\u62e9\u5408\u9002\u7684\u7248\u672c\u3002","title":"1. OPEN-MMLAB/MMDETECTION \u6a21\u578b"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#2-open-mmlabmmpose","text":"\u8fd9\u662f\u4e00\u4e2a\u63d0\u4f9b\u4e86 MaskRCNN \u7684\u5f00\u6e90\u9879\u76ee\uff0c\u7528\u4e8e\u4eba\u4f53\u59ff\u6001\u5173\u952e\u70b9\u68c0\u6d4b\u3002\u6211\u4eec\u8fdb\u884c\u4e86 fork\uff082022\u5e74\uff09\uff0c\u5e76\u6dfb\u52a0\u4e86\u81ea\u5b9a\u4e49\u7684\u6a21\u578b\u548c\u914d\u7f6e\u6587\u4ef6\uff0c\u4ee5\u5b9e\u73b0\u5c0f\u7403\u68c0\u6d4b\u3002 \u5b89\u88c5\u65b9\u6cd5\u8bf7\u53c2\u8003 MMpose \u7684 \u5b98\u65b9\u6587\u6863 \u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/mmpose.git \u91cd\u8981\u8b66\u544a \u6211\u4eec fork \u7684\u662f MMPOSE 0.x \u7248\u672c\u3002\u65b0\u7248\u672c\u548c\u73af\u5883\u53ef\u80fd\u5b58\u5728\u517c\u5bb9\u6027\u95ee\u9898\u3002\u8bf7\u6839\u636e\u5b9e\u9645\u9700\u6c42\u9009\u62e9\u5408\u9002\u7684\u7248\u672c\u3002","title":"2. OPEN-MMLAB/MMPOSE \u6a21\u578b"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#3-yolo-v8","text":"\u8fd9\u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u76ee\u6807\u68c0\u6d4b\uff0c\u5b9e\u4f8b\u5206\u5272\u7684\u5f00\u6e90\u9879\u76ee\u3002\u6211\u4eec\u8fdb\u884c\u4e86 fork\uff082024\u5e74\uff09\uff0c\u5e76\u6dfb\u52a0\u4e86\u81ea\u5b9a\u4e49\u7684\u6a21\u578b\u548c\u914d\u7f6e\u6587\u4ef6\uff0c\u4ee5\u5b9e\u73b0\u5b9e\u65f6\u591a\u5927\u9f20\u5206\u5272\u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/ultralytics.git \u91cd\u8981\u8b66\u544a \u6211\u4eec fork \u7684\u7248\u672c\uff0c\u4e0e\u6700\u65b0\u7248\u672c\u53ef\u80fd\u5b58\u5728\u517c\u5bb9\u6027\u95ee\u9898\u3002\u8bf7\u6839\u636e\u5b9e\u9645\u9700\u6c42\u9009\u62e9\u5408\u9002\u7684\u7248\u672c\u3002","title":"3. YOLO-v8 \u6a21\u578b"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#4-dannce","text":"\u8fd9\u662f\u4e00\u4e2a\u591a\u89c6\u89d2\u52a8\u7269\u59ff\u6001\u4f30\u8ba1\u7684\u5e93\u3002\u6211\u4eec\u8fdb\u884c\u4e86 fork\uff082022\u5e74\uff09\uff0c\u5e76\u6dfb\u52a0\u4e86\u81ea\u5b9a\u4e49\u7684\u6a21\u578b\u548c\u914d\u7f6e\u6587\u4ef6\uff0c\u4ee5\u5b9e\u73b0\u5b9e\u65f6\u591a\u5927\u9f203D\u5173\u952e\u70b9\u8bc6\u522b\u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/dannce.git \u91cd\u8981\u8b66\u544a \u6211\u4eec fork \u7684\u7248\u672c\uff0c\u4e0e\u6700\u65b0\u7248\u672c\u53ef\u80fd\u5b58\u5728\u517c\u5bb9\u6027\u95ee\u9898\u3002\u800c\u4e14\uff0c\u8be5\u5e93\u7684\u9884\u6d4b\u7cbe\u5ea6\u9ad8\uff0c\u4f46\u901f\u5ea6\u6162\u3002\u6211\u4eec\u8fdb\u884c\u4e86\u901f\u5ea6\u4f18\u5316\uff0c\u5bfc\u81f4\u4e0e\u539f\u59cb\u4ee3\u7801\u5b58\u5728\u4e00\u4e9b\u5dee\u5f02\uff0c\u4ee5\u53ca\u66f4\u591a\u7684\u517c\u5bb9\u6027\u95ee\u9898\u3002\u5b89\u88c5\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6211\u4eec\u6b63\u5728\u4f18\u5316\u5b89\u88c5\u6587\u6863\u3002","title":"4. DANNCE \u6a21\u578b"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#5-smoothnet","text":"\u8fd9\u662f\u4e00\u4e2a\u59ff\u6001\u65f6\u95f4\u5e73\u6ed1\u7684\u5e93\u3002\u6211\u4eec\u8fdb\u884c\u4e86 fork\uff082022\u5e74\uff09\uff0c\u5e76\u6dfb\u52a0\u4e86\u81ea\u5b9a\u4e49\u7684\u6a21\u578b\u548c\u914d\u7f6e\u6587\u4ef6\uff0c\u4ee5\u5b9e\u73b0\u5b9e\u65f6\u591a\u5927\u9f203D\u5173\u952e\u70b9\u5e73\u6ed1\u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/SmoothNet.git \u91cd\u8981\u8b66\u544a \u6211\u4eec fork \u7684\u7248\u672c\uff0c\u4e0e\u6700\u65b0\u7248\u672c\u53ef\u80fd\u5b58\u5728\u517c\u5bb9\u6027\u95ee\u9898\u3002\u8bf7\u6839\u636e\u5b9e\u9645\u9700\u6c42\u9009\u62e9\u5408\u9002\u7684\u7248\u672c\u3002","title":"5. SmoothNet \u6a21\u578b"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#python","text":"","title":"\u5b89\u88c5\u672c\u9879\u76ee\u521b\u5efa\u548c\u6539\u9020\u7684 python \u5305"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#1-lilab","text":"\u5305\u542b\u4e86\u5e38\u89c1\u7684\u5206\u6790\u5de5\u5177\uff0c\u5982\u76f8\u673a\u6807\u5b9a\u6d41\u7a0b\uff0c\u5927\u9f20\u5206\u5272\u3001\u59ff\u6001\u4f30\u8ba1\u6d41\u7a0b\uff0c\u884c\u4e3a\u8bc6\u522b\u6d41\u7a0b\uff0c\u5927\u6570\u636e\u6316\u6398\u76f8\u5173\u5de5\u5177\u7b49\u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/LILAB-py.git \u5b89\u88c5\u65b9\u6cd5\uff1a git clone https://github.com/chenxinfeng4/LILAB-py.git cd LILAB-py pip install -e . \u91cd\u8981\u8b66\u544a \u5305\u542b\u8bb8\u591a\u6d41\u7a0b\u5de5\u5177\uff0c\u4f9d\u8d56\u8fc7\u4e8e\u5e9e\u5927\uff0c\u56e0\u6b64\u4e0d\u8fdb\u884c\u81ea\u52a8\u4f9d\u8d56\u5b89\u88c5\u3002\u5982\u679c import \u62a5\u9519\uff0c\u5219\u9700\u8981\u624b\u52a8\u5b89\u88c5\u4f9d\u8d56\u3002","title":"1. LILAB \u5206\u6790\u5de5\u5177\u5305"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#2-ffmpegcv","text":"GPU \u52a0\u901f\u7684\u89c6\u9891\u5904\u7406\u5de5\u5177\u5305\uff0c\u65b9\u4fbf\u591a\u76f8\u673a\u89c6\u9891\u8bfb\u5199\uff0c\u67d0\u4e9b\u573a\u666f\u4e0b\u6bd4 OpenCV \u5feb 9 \u500d\u3002\u6211\u5f00\u6e90\u4e4b\u540e\uff0c\u5e74\u4e0b\u8f7d\u91cf 7 \u4e07\u6b21 \u3002\u67e5\u770b\u5bf9\u5e94 \u6587\u6863 \u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/ffmpegcv.git \u5b89\u88c5\u65b9\u6cd5\uff1a pip install ffmpegcv \u91cd\u8981\u8b66\u544a \u4f7f\u7528 GPU \u52a0\u901f\uff0c\u9700\u8981\u6709 NVIDIA-driver\u3002","title":"2. FFMPEGCV \u5de5\u5177\u5305"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#3-multiview_calib","text":"\u76f8\u673a\u5916\u53c2\u6807\u5b9a\uff08\u5c0f\u7403\u6807\u5b9a\uff09\u7684\u5de5\u5177\u5305\u3002\u5728\u4e09\u65b9\u5e93\u57fa\u7840\u4e0a\uff0c\u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u5e76\u6dfb\u52a0\u4e86\u81ea\u5b9a\u4e49\u7684\u6807\u5b9a\u6d41\u7a0b\u3002\u67e5\u770b\u5bf9\u5e94 \u6587\u6863 \u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/multiview_calib.git \u5b89\u88c5\u65b9\u6cd5\uff1a pip install git+https://github.com/chenxinfeng4/multiview_calib.git # \u5c0f\u7403\u6807\u5b9a\u7b80\u6613\u6559\u7a0b git clone https://github.com/chenxinfeng4/multiview_ball_calib","title":"3. multiview_calib \u5de5\u5177\u5305"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#4","text":"torch2trt : torch2trt \u6539\u9020\uff0c\u652f\u6301 engine \u6587\u4ef6\u76f4\u63a5\u8f7d\u5165\u3002 pip install git+https://github.com/chenxinfeng4/torch2trt cocoapi : \u5c06 cocoapi \u8fdb\u884c\u591a\u7ebf\u7a0b\u6539\u9020\uff0c\u63d0\u5347\u901f\u5ea6\u3002 pip install git+https://github.com/chenxinfeng4/cocoapi mmdetection-to-tensorrt : Mask-RCNN \u6a21\u578b\u8f6c\u6362\u4e3a tensorrt \u6a21\u578b\u3002 pip install git+https://github.com/chenxinfeng4/mmdetection-to-tensorrt","title":"4. \u5176\u5b83\u6539\u9020\u5de5\u5177\u5305"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/application/","text":"\u95ed\u73af\u884c\u4e3a\u63a7\u5236 \u26a1\ufe0f \u5229\u7528\u5149\u9057\u4f20\u6280\u672f\u5b9e\u73b0\u7cbe\u51c6\u884c\u4e3a\u63a7\u5236\uff0c\u901a\u8fc7\u5b9e\u65f6\u884c\u4e3a\u5206\u6790\u5f62\u6210\u95ed\u73af\u53cd\u9988\u7cfb\u7edf\u3002 \u2753 \u6311\u6218 \uff1a\u5b9e\u65f6\u884c\u4e3a\u8bc6\u522b\u8ba1\u7b97\u91cf\u5927\uff0c\u5b8c\u6574\u6a21\u578b\u96be\u4ee5\u5728\u5b9e\u9a8c\u73af\u5883\u90e8\u7f72\uff1b\u8fb9\u7f18\u8bbe\u5907\u5c0f\u6a21\u578b\u7cbe\u5ea6\u4e0d\u8db3\uff1b\u975e\u7279\u5f02\u6027\u591a\u5df4\u80fa\u523a\u6fc0\u5bf9\u5b64\u72ec\u75c7\u884c\u4e3a\u6539\u5584\u6548\u679c\u6709\u9650\u3002 \ud83d\udca1 \u89e3\u51b3\u65b9\u6848 \uff1a\u91c7\u7528\u4e91\u8ba1\u7b97\u8fdb\u884c\u884c\u4e3a\u8bc6\u522b\uff0c\u5b9e\u9a8c\u89c6\u9891\u4e0a\u4f20\u81f3\u4e91\u5e73\u53f0\u5904\u7406\u5e76\u8fd4\u56de\u7ed3\u679c\u3002\u901a\u8fc7\u6a21\u578b\u8f7b\u91cf\u5316\u548cGPU\u6d41\u6c34\u7ebf\u5e76\u884c\u4f18\u5316\u964d\u4f4e\u5ef6\u8fdf\uff0c\u5e76\u5efa\u7acb\u5b64\u72ec\u75c7\u884c\u4e3a-\u5149\u9057\u4f20\u5f3a\u5316\u5b66\u4e60\u8303\u5f0f\uff0c\u5728\u8bc6\u522b\u5230\u73a9\u800d\u884c\u4e3a\u65f6\u7ed9\u4e88\u7279\u5f02\u6027\u591a\u5df4\u80fa\u5149\u523a\u6fc0\u3002 \ud83c\udf89 \u6548\u679c \uff1a\u884c\u4e3a\u8bc6\u522b\u5ef6\u8fdf\u4ec5266ms\uff0c\u51c6\u786e\u7387\u8fbe80%\u3002\u7279\u5f02\u6027\u5149\u9057\u4f20\u5f3a\u5316\u5b66\u4e60\u663e\u8457\u6539\u5584\u5b64\u72ec\u75c7\u5927\u9f20\uff08Shank3+/-\uff09\u7684\u73a9\u800d\u884c\u4e3a\uff0c\u589e\u5f3a\u793e\u4ea4\u80fd\u529b\u5e76\u51cf\u5c11\u975e\u793e\u4ea4\u884c\u4e3a\u3002 \u8bbe\u8ba1\u539f\u7406\u548c\u7cbe\u5ea6\u6d4b\u91cf \u5c06\u884c\u4e3a\u8bc6\u522b\u6a21\u578b\u90e8\u7f72\u5728\u4e91\u7aef\uff0c\u901a\u8fc7\u5b9e\u65f6\u89c6\u9891\u6d41\u4e0a\u4f20\u5b9e\u73b0\u95ed\u73af\u884c\u4e3a\u63a7\u5236\u3002\u6a21\u578b\u7ecf\u8fc7\u8f7b\u91cf\u5316\u6539\u9020\u548cGPU\u6d41\u6c34\u7ebf\u5e76\u884c\u4f18\u5316\u4ee5\u964d\u4f4e\u8ba1\u7b97\u5ef6\u8fdf\u3002\u5149\u9057\u4f20\u6fc0\u5149\u5668\u901a\u8fc7 Arduino \u677f\u63a7\u5236\uff0c\u4ee5\u53d1\u653e40Hz 5ms, 0.5s\u523a\u6fc0\u65f6\u957f\u7684\u8109\u51b2\u5149\u523a\u6fc0\u3002 \u5b9e\u9a8c\u8bbe\u8ba1\u4e2d\uff0c\u5b9e\u9a8c\u7ec4\u5728Shank3+/-\u5927\u9f20\u4e3b\u52a8\u73a9\u800d\u65f6\u7ed9\u4e88\u591a\u5df4\u80fa\u91ca\u653e\u5149\u523a\u6fc0\uff1b\u5bf9\u7167\u7ec4\u5728\u975e\u73a9\u800d\u884c\u4e3a\u6761\u4ef6\u4e0b\u968f\u673a\u5149\u523a\u6fc0\uff0c\u4fdd\u6301\u5149\u523a\u6fc0\u603b\u91cf\u4e00\u81f4\u3002 \u6d4b\u8bd5\u7ed3\u679c\uff08n=32\u89c6\u9891\uff09\u663e\u793a\uff0c\u5b9e\u9a8c\u7ec4\u5728\u73a9\u800d\u65f6\u7ed9\u5149\u8d85\u8fc790%\uff0c\u800c\u5bf9\u7167\u7ec4\u4e0d\u8db310%\u3002\u5b9e\u9a8c\u7ec4\u7684\u5149\u523a\u6fc0\u66f4\u591a\u5206\u914d\u5230\u73a9\u800d\u76f8\u5173\u7684\u793e\u4ea4\u884c\u4e3a\uff0c\u5bf9\u7167\u7ec4\u5219\u66f4\u591a\u5206\u914d\u5230\u975e\u793e\u4ea4\u884c\u4e3a\u3002\u663e\u793a\u51fa\u95ed\u73af\u884c\u4e3a\u63a7\u5236\u7684\u7cbe\u51c6\u6027\u3002\u6700\u7ec8\u89c2\u5bdf\u5230Shank3+/-\u5927\u9f20\u7684\u73a9\u800d\u884c\u4e3a\u548c\u793e\u4ea4\u80fd\u529b\u6539\u5584\u3002","title":"\u5e94\u7528\u573a\u666f"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/application/#_1","text":"\u5229\u7528\u5149\u9057\u4f20\u6280\u672f\u5b9e\u73b0\u7cbe\u51c6\u884c\u4e3a\u63a7\u5236\uff0c\u901a\u8fc7\u5b9e\u65f6\u884c\u4e3a\u5206\u6790\u5f62\u6210\u95ed\u73af\u53cd\u9988\u7cfb\u7edf\u3002 \u2753 \u6311\u6218 \uff1a\u5b9e\u65f6\u884c\u4e3a\u8bc6\u522b\u8ba1\u7b97\u91cf\u5927\uff0c\u5b8c\u6574\u6a21\u578b\u96be\u4ee5\u5728\u5b9e\u9a8c\u73af\u5883\u90e8\u7f72\uff1b\u8fb9\u7f18\u8bbe\u5907\u5c0f\u6a21\u578b\u7cbe\u5ea6\u4e0d\u8db3\uff1b\u975e\u7279\u5f02\u6027\u591a\u5df4\u80fa\u523a\u6fc0\u5bf9\u5b64\u72ec\u75c7\u884c\u4e3a\u6539\u5584\u6548\u679c\u6709\u9650\u3002 \ud83d\udca1 \u89e3\u51b3\u65b9\u6848 \uff1a\u91c7\u7528\u4e91\u8ba1\u7b97\u8fdb\u884c\u884c\u4e3a\u8bc6\u522b\uff0c\u5b9e\u9a8c\u89c6\u9891\u4e0a\u4f20\u81f3\u4e91\u5e73\u53f0\u5904\u7406\u5e76\u8fd4\u56de\u7ed3\u679c\u3002\u901a\u8fc7\u6a21\u578b\u8f7b\u91cf\u5316\u548cGPU\u6d41\u6c34\u7ebf\u5e76\u884c\u4f18\u5316\u964d\u4f4e\u5ef6\u8fdf\uff0c\u5e76\u5efa\u7acb\u5b64\u72ec\u75c7\u884c\u4e3a-\u5149\u9057\u4f20\u5f3a\u5316\u5b66\u4e60\u8303\u5f0f\uff0c\u5728\u8bc6\u522b\u5230\u73a9\u800d\u884c\u4e3a\u65f6\u7ed9\u4e88\u7279\u5f02\u6027\u591a\u5df4\u80fa\u5149\u523a\u6fc0\u3002 \ud83c\udf89 \u6548\u679c \uff1a\u884c\u4e3a\u8bc6\u522b\u5ef6\u8fdf\u4ec5266ms\uff0c\u51c6\u786e\u7387\u8fbe80%\u3002\u7279\u5f02\u6027\u5149\u9057\u4f20\u5f3a\u5316\u5b66\u4e60\u663e\u8457\u6539\u5584\u5b64\u72ec\u75c7\u5927\u9f20\uff08Shank3+/-\uff09\u7684\u73a9\u800d\u884c\u4e3a\uff0c\u589e\u5f3a\u793e\u4ea4\u80fd\u529b\u5e76\u51cf\u5c11\u975e\u793e\u4ea4\u884c\u4e3a\u3002","title":"\u95ed\u73af\u884c\u4e3a\u63a7\u5236 \u26a1\ufe0f"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/application/#_2","text":"\u5c06\u884c\u4e3a\u8bc6\u522b\u6a21\u578b\u90e8\u7f72\u5728\u4e91\u7aef\uff0c\u901a\u8fc7\u5b9e\u65f6\u89c6\u9891\u6d41\u4e0a\u4f20\u5b9e\u73b0\u95ed\u73af\u884c\u4e3a\u63a7\u5236\u3002\u6a21\u578b\u7ecf\u8fc7\u8f7b\u91cf\u5316\u6539\u9020\u548cGPU\u6d41\u6c34\u7ebf\u5e76\u884c\u4f18\u5316\u4ee5\u964d\u4f4e\u8ba1\u7b97\u5ef6\u8fdf\u3002\u5149\u9057\u4f20\u6fc0\u5149\u5668\u901a\u8fc7 Arduino \u677f\u63a7\u5236\uff0c\u4ee5\u53d1\u653e40Hz 5ms, 0.5s\u523a\u6fc0\u65f6\u957f\u7684\u8109\u51b2\u5149\u523a\u6fc0\u3002 \u5b9e\u9a8c\u8bbe\u8ba1\u4e2d\uff0c\u5b9e\u9a8c\u7ec4\u5728Shank3+/-\u5927\u9f20\u4e3b\u52a8\u73a9\u800d\u65f6\u7ed9\u4e88\u591a\u5df4\u80fa\u91ca\u653e\u5149\u523a\u6fc0\uff1b\u5bf9\u7167\u7ec4\u5728\u975e\u73a9\u800d\u884c\u4e3a\u6761\u4ef6\u4e0b\u968f\u673a\u5149\u523a\u6fc0\uff0c\u4fdd\u6301\u5149\u523a\u6fc0\u603b\u91cf\u4e00\u81f4\u3002 \u6d4b\u8bd5\u7ed3\u679c\uff08n=32\u89c6\u9891\uff09\u663e\u793a\uff0c\u5b9e\u9a8c\u7ec4\u5728\u73a9\u800d\u65f6\u7ed9\u5149\u8d85\u8fc790%\uff0c\u800c\u5bf9\u7167\u7ec4\u4e0d\u8db310%\u3002\u5b9e\u9a8c\u7ec4\u7684\u5149\u523a\u6fc0\u66f4\u591a\u5206\u914d\u5230\u73a9\u800d\u76f8\u5173\u7684\u793e\u4ea4\u884c\u4e3a\uff0c\u5bf9\u7167\u7ec4\u5219\u66f4\u591a\u5206\u914d\u5230\u975e\u793e\u4ea4\u884c\u4e3a\u3002\u663e\u793a\u51fa\u95ed\u73af\u884c\u4e3a\u63a7\u5236\u7684\u7cbe\u51c6\u6027\u3002\u6700\u7ec8\u89c2\u5bdf\u5230Shank3+/-\u5927\u9f20\u7684\u73a9\u800d\u884c\u4e3a\u548c\u793e\u4ea4\u80fd\u529b\u6539\u5584\u3002","title":"\u8bbe\u8ba1\u539f\u7406\u548c\u7cbe\u5ea6\u6d4b\u91cf"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/","text":"\u4ee3\u7801\u6d41\u7a0b \u5f00\u53d1\u8005: Chenxinfeng, update 2025-08-16 \u95ed\u73af\u884c\u4e3a\u63a7\u5236\u7684\u4ee3\u7801\u6d41\u7a0b\u6897\u6982\u5982\u4e0b: \u4ee5\u4e0b\u662f\u5bf9\u5e94\u7684\u4ee3\u7801\u64cd\u4f5c\uff1a 1. \u542f\u52a8\u865a\u62df\u6444\u50cf\u5934\u8fdb\u884c\u65f6\u95f4\u6233\u6807\u8bb0 \u5728DAQ\u7684PC\u4e0a\u8fdb\u884c\u64cd\u4f5c\uff0cDAQ\u5b89\u88c5\u7684\u662fWindows\u7cfb\u7edf\u3002OBS Studio 29.1 \u7248\u672c\u3002OBS \u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u865a\u62df\u6444\u50cf\u5934(\"OBS Virtual Camera\")\uff0cpython\u4ee3\u7801\u4f1a\u5f80\u8fd9\u4e2a\u6444\u50cf\u5934\u5e27\u8f93\u51fa\u65f6\u95f4\u7801\uff08\u4f8b\u5982\uff0c163\uff09\u3002\u65f6\u95f4\u7801\u7684\u6570\u503c\u7531PC\u7684\u65f6\u949f\u51b3\u5b9a\uff0c\u6bcf33ms\u66f4\u65b0\u4e00\u6b21\uff0830fps \u5339\u914d\u89c6\u9891\u5e27\u7387\uff09\uff0c\u5f53\u524d\u65f6\u949f\u7684\u6570\u503c\u4e5f\u4f1a\u5b58\u50a8\u5230 10.50.7.109:20173 \u7684\u670d\u52a1\u5668\u4e0a\uff0c\u4f9b\u5176\u4ed6\u8bbe\u5907\u8bbf\u95ee\uff0c\u4ee5\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u7801\u3002 \u5728github\u4e0a\u4e0b\u8f7d\uff0c virtual_LED.py \ud83d\udd17 . \u5728\u7ec8\u7aef\u6267\u884c\u8be5\u811a\u672c\uff0c\u542f\u52a8\u865a\u62df\u6444\u50cf\u5934\uff0c\u5e76\u5f00\u542fsocket\u670d\u52a1\u3002 python3 virtual_LED.py \u63d0\u793a \u5efa\u8bae\u5c06\u5176\u5b58\u4e3awindows \u7684 bat \u6587\u4ef6\uff0c\u53cc\u51fb\u76f4\u63a5\u8fd0\u884c\u3002\u8be5\u811a\u672c\u8fd8\u517c\u5177\u865a\u62dfLED\u989c\u8272\u70b9\u4eae\u7684\u529f\u80fd\uff0c\u53ef\u7528\u4e8e\u89c6\u9891\u4e8b\u4ef6\u6253\u6807\uff0c\u4f8b\u5982\u7528\u4e8e\u5149\u9057\u4f20Laser\u7684\u89e6\u53d1\u4e8b\u4ef6\u6253\u6807\u3002\u8be6\u7ec6\u53ef\u53c2\u8003 \u3010#7\u3011 GUI \u7684\u4ee3\u7801\u3002 \u6ce8\u610f \u9700\u8981\u81ea\u884c\u5b89\u88c5\u4f9d\u8d56\u5e93\u3002\u8ba9DAQ PC\u7684\u9632\u706b\u5899\u5f00\u653e 20173\u3002 2. \u66f4\u65b0\u4ee3\u7801\u4e2d\u7684\u76f8\u673a\u548c\u5927\u9f20\u6a21\u578b \u9700\u8981\u7528\u6237\u63d0\u4f9b\u6700\u65b0\u7684\u591a\u76f8\u673a\u6a21\u578b\u6587\u4ef6\u548c\u5927\u9f20\u793e\u4ea4\u5173\u952e\u70b9\u6a21\u578b\u6587\u4ef6\uff0c\u5e76\u66f4\u65b0\u5230\u4ee3\u7801\u4e2d\u3002\u524d\u8005\u7528\u4e8e3D\u91cd\u6784\uff1b\u540e\u8005\u7528\u4e8e\u8ba1\u7b97\u76f8\u540c\u5e74\u9f84\u5927\u9f20\u7684\u4f53\u957f\uff0c\u4fbf\u4e8e\u884c\u4e3a\u7279\u5f81\u5f52\u4e00\u5316\u3002\u901a\u5e38\uff0c \u5927\u9f20\u793e\u4ea4\u5173\u952e\u70b9\u6a21\u578b \u6587\u4ef6\u5305\u542b\u4e86 \u591a\u76f8\u673a\u6a21\u578b \uff0c\u6240\u4ee5\u8ba9\u591a\u76f8\u673a\u6a21\u578b\u7b49\u4e8e \u5927\u9f20\u793e\u4ea4\u5173\u952e\u70b9\u6a21\u578b \u5373\u53ef\u3002 \u4fee\u6539\u4e0b\u9762\u6587\u4ef6\u7684 lilab/label_live/usv_yolo_seg_dannce_unit_test.py \u4e2d\u7684 CALIBPKL \u4e3a\u591a\u76f8\u673a\u6a21\u578b\u8def\u5f84\uff0c model_smooth_matcalibpkl \u4e3a\u5927\u9f20\u793e\u4ea4\u5173\u952e\u70b9\u6a21\u578b\u8def\u5f84\u3002 # PATH_TO_LILAB/lilab/label_live/usv_yolo_seg_dannce_unit_test.py CALIBPKL = '/mnt/liying.cibr.ac.cn_Data_Temp_ZZC2/2506batch-chr2/test/ball/2025-06-13_10-16-58_ball.calibpkl' model_smooth_matcalibpkl = '/DATA/zhongzhenchao/2501chr2-shank3/all400p/2025-01-05_15-04-37_l7_sm1_pm6.smoothed_foot.matcalibpkl' model_smooth_matcalibpkl = CALIBPKL = '/a/b/c.matcalibpkl' 3. \u542f\u52a8\u7ed3\u679c\u670d\u52a1\u5668\u5b88\u62a4\u8fdb\u7a0b source activate mmdet # activate the conda environment python -m lilab.label_live.socketServer \u6ce8\u610f \u6ce8\u610fCloud Server\u9632\u706b\u5899\uff0c\u5f00\u653e8002\u7aef\u53e3\u3002\u5982\u679c\u51fa\u73b0\u7aef\u53e3\u88ab\u5360\u7528\u7684\u60c5\u51b5\uff0c\u5f80\u5f80\u662f\u56e0\u4e3a\u4e0a\u4e00\u4e2aPython\u7a0b\u5e8f\u672a\u6b63\u5e38\u5173\u95ed\u3002\u8bf7\u5148\u5173\u95ed\u5360\u7528\u8be5\u7aef\u53e3\u7684\u7a0b\u5e8f\uff0c\u6216\u6267\u884c lsof -i:8002 \u67e5\u770b\u5360\u7528\u8be5\u7aef\u53e3\u7684\u8fdb\u7a0b\uff0c\u7136\u540ekill\u6389\u8be5\u8fdb\u7a0b\uff08 kill -9 \u8fdb\u7a0b\u53f7 \uff09\u3002\u7a0d\u7b4910\u79d2\uff0c\u91cd\u542f\u8be5\u7a0b\u5e8f\u3002\u591a\u6b21\u5c1d\u8bd5\u3002 4. \u542f\u52a8\u5a92\u4f53\u670d\u52a1\u5668\u5b88\u62a4\u8fdb\u7a0b Mediamtx \u5728Cloud Server\u4e0a\u542f\u52a8Mediamtx\uff0c\u7528\u4e8e\u63a5\u6536OBS\u7684\u63a8\u6d41\uff0c\u5e76\u8f6c\u53d1\u7ed9\u5ba2\u6237\u7aef\u3002 docker run --rm -it -p 8554 :8554 bluenviron/mediamtx \u6ce8\u610f \u6ce8\u610fCloud Server\u9632\u706b\u5899\uff0c\u5f00\u653e8554\u7aef\u53e3\u3002 5. \u542f\u52a8 OBS \u89c6\u9891\u6d41 \u5728DAQ PC\u4e0a\u542f\u52a8OBS\uff0c\u5e76\u63a8\u6d41\u5230Cloud Server\u7684Mediamtx\u3002 \u6211\u5df2\u7ecf\u914d\u7f6e\u597dOBS\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u7b80\u4fbf\u64cd\u4f5c\u542f\u52a8\u63a8\u6d41\u914d\u7f6e\uff1a \u9009\u62e9\uff0c\u83dc\u5355>\u914d\u7f6e\u6587\u4ef6> Social-seq-live\u63a8\u6d41 \u9009\u62e9\uff0c\u83dc\u5355>\u573a\u666f\u96c6\u5408> Social-seq-live-push \u7136\u540e\uff0c\u70b9\u51fb \"\u5f00\u59cb\u5f55\u5236\"\u6309\u94ae\uff08\u6ce8\u610f\u4e0d\u662f\u201c\u5f00\u59cb\u76f4\u64ad\u201d\uff09\uff0c\u8fdb\u884c\u63a8\u6d41\u300220\u79d2\u5185\u4e0d\u5f39\u51fa\u9519\u8bef\u63d0\u793a\uff0c\u8868\u793a\u63a8\u6d41\u6210\u529f\u3002 \u5bf9\u4e8e\u65b0\u7684DAQ PC\uff0c\u9700\u8981\u91cd\u65b0\u914d\u7f6eOBS\uff0c\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a \u63d0\u793a \u5206\u8fa8\u7387\u548c\u7f16\u7801\u65b9\u5f0f\u662f\u5f71\u54cd\u63a8\u6d41\u5ef6\u8fdf\u7684\u91cd\u8981\u53c2\u6570\uff0c\u5c24\u5176\u662f\u9879\u76ee\u76843840x2400\u662f\u9ad8\u5206\u8fa8\u7387\u3002\u8fd9\u5957RTSP\u53c2\u6570\u8bbe\u7f6e\uff0c\u662f\u7ecf\u8fc7\u591a\u79cd\u6d4b\u8bd5\uff0c\u5ef6\u8fdf\u4f4e\uff0c\u753b\u8d28\u597d\u7684\u53c2\u6570\u3002\u5176\u5b83\u89c6\u9891\u63a8\u6d41\u7684\u9879\u76ee\uff0c\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e2a\u53c2\u6570\u8bbe\u7f6e\u3002 \u6ce8\u610f \u6ce8\u610fOBS\u7684\u63a8\u6d41\u5730\u5740\uff0c\u9700\u8981\u586b\u5199Cloud Server\u7684IP\u5730\u5740\uff0c\u5e94\u8be5\u662f rtsp://10.50.60.6:8554/mystream_9cam \u3002\u53ef\u4ee5\u901a\u8fc7 VLC \u6216 ffplay \u7b49\u5de5\u5177\uff0c\u6d4b\u8bd5\u662f\u5426\u80fd\u591f\u6b63\u5e38\u64ad\u653e\u8be5\u6d41\u3002\u7535\u8111\u7684\u6027\u80fd\u51b3\u5b9a\u4e86\u63a8\u6d41\u7684\u6d41\u7545\u5ea6\uff0c\u5982\u679c\u7535\u8111\u6027\u80fd\u8f83\u5dee\uff0c\u53ef\u80fd\u63a8\u6d41\u4e0d\u6d41\u7545\uff0c\u6216\u8005\u51fa\u73b0\u5361\u987f\u73b0\u8c61\u3002\u53e6\u5916\uff0c\u7801\u7387\uff08bitrate\uff09\u9700\u8981\u8bbe\u4f4e 8Mbps\uff0c\u5426\u5219\u63a8\u6d41\u5ef6\u8fdf\u9ad8\u3002 6. \u542f\u52a8\u884c\u4e3a\u8bc6\u522b\u6d41\u6c34\u7ebf\u4ee3\u7801 \u5728Cloud Server\u4e0a\u542f\u52a8\u884c\u4e3a\u8bc6\u522b\u7a0b\u5e8f\uff0c\u7528\u4e8e\u63a5\u6536OBS\u7684\u63a8\u6d41\uff0c\u5e76\u8bc6\u522b\u884c\u4e3a\uff0c\u5c06\u8bc6\u522b\u7ed3\u679c\u6807\u7b7e\uff08Syllable ID\uff09\u5b58\u653e\u5230 Result server daemon \u4e2d\u3002 source activate mmdet # activate the conda environment PATH = /usr/bin: $PATH python -m lilab.label_live.usv_yolo_seg_dannce_unit_test \u6ce8\u610f \u6ce8\u610f\u67e5\u770b\u662f\u5426\u6709\u62a5\u9519\u4fe1\u606f\u3002\u786e\u4fddOBS\u5df2\u7ecf\u6b63\u5e38\u63a8\u6d41\uff0c\u5e76\u4e14\u63a8\u6d41\u5730\u5740\u6b63\u786e\u3002 \u6ce8\u610f \u68c0\u67e5\u7ec8\u7aef\u8f93\u8fd0\u884c\u5e27\u7387\uff0830fps\uff09\u548c\u5ef6\u8fdf(<10\u5e27)\u3002\u663e\u793aiteration \u5e94\u8be5\u7ea6\u4e3a 30its/s\uff0c\u5e76\u4e14\u5ef6\u8fdf\u5e27\u6570\u5e94\u8be5\u57286-10\u4ee5\u5185\u3002\u592a\u9ad8\u7684\u5ef6\u8fdf\u5e27\uff08>30\u5e27\uff09\uff0c\u5bfc\u81f4\u95ed\u73af\u523a\u6fc0\u7cbe\u5ea6\u7684\u4e25\u91cd\u4e0b\u964d\u3002\u7ecf\u9a8c\u539f\u56e0\u662f 1.DAQ PC\u6027\u80fd\u592a\u5dee\uff0c\u9700\u8981\u91cd\u542fOBS\u8f6f\u4ef6\uff08\u901a\u5e38\uff09\uff1b\u6216\u80052 \u662f\u6709\u4eba\u5728\u4f7f\u7528Cloud Server\uff0c\u62a2\u5360\u4e86CPU\u548cGPU\u8d44\u6e90\uff0c\u5219\u6e05\u7a7a\u8fd9\u4e9b\u7528\u6237\u7684\u8d44\u6e90\uff08\u63d0\u524d\u7ec4\u5185\u6c9f\u901a\uff09\u3002 7. \u542f\u52a8 Social-seq-live GUI \u53bbgithub \u4e0a\u4e0b\u8f7d Social-seq-live \u7684\u4ee3\u7801\uff0c\u5e76\u5b89\u88c5\u4f9d\u8d56\u5305\u3002 python main.py # GUI\u7a0b\u5e8f\uff0c\u201c\u95ed\u73af\u63a7\u5236\u201d\u5b9e\u9a8c\u7ec4 python main_exclude.py # GUI\u7a0b\u5e8f\uff0c\u201c\u5f00\u73af\u63a7\u5236\u201d\u5bf9\u7167\u7ec4 \u6ce8\u610f \u6ce8\u610f\u201c\u95ed\u73af\u63a7\u5236\u201d\u5b9e\u9a8c\u7ec4\u548c\u201c\u5f00\u73af\u63a7\u5236\u201d\u5bf9\u7167\u7ec4\u7684GUI\u7a0b\u5e8f\u4e0d\u540c\u3002\u64cd\u4f5c\u6b65\u9aa4\u76f8\u540c\u3002\u95ed\u73af\u63a7\u5236\uff0c\u5728\u8bc6\u522b\u5230\u884c\u4e3a\u540e\uff0c\u81ea\u52a8\u542f\u52a8\u523a\u6fc0\u3002\u5f00\u73af\u63a7\u5236\uff0c\u9700\u8981\u6392\u9664\u76ee\u6807\u884c\u4e3a\uff0c\u968f\u673a\u7ed9\u523a\u6fc0\u3002 \u63a5\u7740\u9009\u62e9\u5bf9\u5e94\u7684GUI\u7a0b\u5e8f\uff0c\u5e76\u542f\u52a8\u3002\u8fde\u63a5 Cloud Server \u548c Arduino \u540e\uff0c\u5373\u81ea\u52a8\u5f00\u59cb\u884c\u4e3a\u8bc6\u522b\u5e76\u5149\u9057\u4f20\u63a7\u5236\u3002 \u5728GUI\u4e2d\uff0c\u52fe\u9009\u5408\u9002\u7684\u76ee\u6807\u884c\u4e3a\uff0c\u4f8b\u5982 \"pouncing\", \"pinning\", \"chasing\" \u7b49\u3002 \u586b\u5165 Cloud Server \u7684IP\u5730\u5740\uff0c\u70b9\u51fb\u201cConnect\u201d\u6309\u94ae\uff0c\u8fde\u63a5\u5230Result server daemon\u3002 \u9009\u62e9 Arduino \u4e32\u53e3\uff0c\u5e76\u70b9\u51fb\u201cConnect\u201d\u6309\u94ae\uff0c\u8fde\u63a5\u5230Arduino\u3002\uff08 Arduino \u9700\u8981\u521d\u59cb\u5316\u70e7\u5f55\u4ee3\u7801\uff0c\u53c2\u8003\u3010#9\u3011 \uff09 8. \u542f\u52a8 ffmpeg \u4ee3\u7801\u4ee5\u5c06\u89c6\u9891\u8f6c\u50a8\u5230\u6587\u4ef6 \u5728\u52a8\u7269\u5b9e\u9a8c\u5f00\u59cb\u540e\uff0c\u9700\u8981\u8bb0\u5f55\u89c6\u9891\u3002\u7531\u4e8e\u539f\u5148\u7684OBS \u5f55\u50cf\u529f\u80fd\u5df2\u7ecf\u88ab\u5360\u7528\uff0c\u56e0\u6b64\u53ea\u80fd\u5728Cloud Server \u4e0a\u8bb0\u5f55\u89c6\u9891\u3002 \u5c06\u4e0b\u9762\u7684\u4ee3\u7801\u4fdd\u5b58\u4e3a Cloud Server \u7684 RT_record.sh \u6587\u4ef6\u3002\u6bcf\u6b21\u52a8\u7269\u5b9e\u9a8c\u5f00\u59cb\u540e\uff0c\u5e76\u8fd0\u884c\u5b83\u3002\u5b83\u4f1a\u5728 /DATA/chenxinfeng \u76ee\u5f55\u4e0b\uff0c\u4fdd\u5b58\u4e00\u4e2a\u89c6\u9891\u6587\u4ef6\u3002\u6587\u4ef6\u540d\u662f\u5f53\u524d\u65f6\u95f4\uff0c\u4f8b\u5982 2025-01-01_12-00-00.mp4\u3002 #!/bin/bash # \u4fdd\u5b58\u4e3a RT_record \u6587\u4ef6 filename = ` date --date = '2.2 seconds' + \"%Y-%m-%d_%H-%M-%S\" ` /home/liying_lab/chenxinfeng/.conda/envs/mmdet/bin/ffmpeg.bak -rtsp_transport tcp -t 00 :15:06 -i rtsp://10.50.60.6:8554/mystream_9cam -ss 00 :00:02.2 -c:v hevc_nvenc -b:v 10M -maxrate:v 20M -preset:v p4 /DATA/chenxinfeng/ ${ filename } .mp4 9. Arduino \u6fc0\u5149\u8109\u51b2 \u53bbgithub \u4e0a\u4e0b\u8f7d Arduino Laser pulse \u7684\u4ee3\u7801\uff0c\u5e76\u8fdb\u884c\u70e7\u5f55\u3002 const int PinNum = 6 ; // the number of the LED pin const float duration = 0 .5 ; // time for running, unit = sec. const float Hz = 40 ; // frequency, unit = Hz. const float Duty = 0 .2 ; // duty, unit = 0 ~1. \u8be5\u4ee3\u7801\u8868\u793aArduino \u7684 D6 \u5f15\u811a\uff0c\u8fde\u63a5\u5230\u6fc0\u5149\u5668\u7684\u89e6\u53d1\u5f15\u811a\u3002\u5355\u8bcd\u523a\u6fc0\u65f6\u95f4\u4e3a 0.5 \u79d2\uff0c\u6fc0\u5149\u9891\u7387\u4e3a 40Hz\uff0c\u5360\u7a7a\u6bd4\u4e3a 0.2 \uff085ms\uff09\u3002 \u5173\u95ed OBS \u548c GUI \u5728\u5b9e\u9a8c\u7ed3\u675f\u540e\uff0c\u590d\u539f OBS \u7684\u914d\u7f6e\uff0c\u5173\u95edOBS\u8f6f\u4ef6\uff1b\u5173\u95edSocial seq live GUI\u3002\u5728Cloude Server\u4e0a\uff0c\u5173\u95ed pipeline \u3002","title":"\u4ee3\u7801\u6d41\u7a0b"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#_1","text":"\u5f00\u53d1\u8005: Chenxinfeng, update 2025-08-16 \u95ed\u73af\u884c\u4e3a\u63a7\u5236\u7684\u4ee3\u7801\u6d41\u7a0b\u6897\u6982\u5982\u4e0b: \u4ee5\u4e0b\u662f\u5bf9\u5e94\u7684\u4ee3\u7801\u64cd\u4f5c\uff1a","title":"\u4ee3\u7801\u6d41\u7a0b"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#1","text":"\u5728DAQ\u7684PC\u4e0a\u8fdb\u884c\u64cd\u4f5c\uff0cDAQ\u5b89\u88c5\u7684\u662fWindows\u7cfb\u7edf\u3002OBS Studio 29.1 \u7248\u672c\u3002OBS \u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u865a\u62df\u6444\u50cf\u5934(\"OBS Virtual Camera\")\uff0cpython\u4ee3\u7801\u4f1a\u5f80\u8fd9\u4e2a\u6444\u50cf\u5934\u5e27\u8f93\u51fa\u65f6\u95f4\u7801\uff08\u4f8b\u5982\uff0c163\uff09\u3002\u65f6\u95f4\u7801\u7684\u6570\u503c\u7531PC\u7684\u65f6\u949f\u51b3\u5b9a\uff0c\u6bcf33ms\u66f4\u65b0\u4e00\u6b21\uff0830fps \u5339\u914d\u89c6\u9891\u5e27\u7387\uff09\uff0c\u5f53\u524d\u65f6\u949f\u7684\u6570\u503c\u4e5f\u4f1a\u5b58\u50a8\u5230 10.50.7.109:20173 \u7684\u670d\u52a1\u5668\u4e0a\uff0c\u4f9b\u5176\u4ed6\u8bbe\u5907\u8bbf\u95ee\uff0c\u4ee5\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u7801\u3002 \u5728github\u4e0a\u4e0b\u8f7d\uff0c virtual_LED.py \ud83d\udd17 . \u5728\u7ec8\u7aef\u6267\u884c\u8be5\u811a\u672c\uff0c\u542f\u52a8\u865a\u62df\u6444\u50cf\u5934\uff0c\u5e76\u5f00\u542fsocket\u670d\u52a1\u3002 python3 virtual_LED.py \u63d0\u793a \u5efa\u8bae\u5c06\u5176\u5b58\u4e3awindows \u7684 bat \u6587\u4ef6\uff0c\u53cc\u51fb\u76f4\u63a5\u8fd0\u884c\u3002\u8be5\u811a\u672c\u8fd8\u517c\u5177\u865a\u62dfLED\u989c\u8272\u70b9\u4eae\u7684\u529f\u80fd\uff0c\u53ef\u7528\u4e8e\u89c6\u9891\u4e8b\u4ef6\u6253\u6807\uff0c\u4f8b\u5982\u7528\u4e8e\u5149\u9057\u4f20Laser\u7684\u89e6\u53d1\u4e8b\u4ef6\u6253\u6807\u3002\u8be6\u7ec6\u53ef\u53c2\u8003 \u3010#7\u3011 GUI \u7684\u4ee3\u7801\u3002 \u6ce8\u610f \u9700\u8981\u81ea\u884c\u5b89\u88c5\u4f9d\u8d56\u5e93\u3002\u8ba9DAQ PC\u7684\u9632\u706b\u5899\u5f00\u653e 20173\u3002","title":"1. \u542f\u52a8\u865a\u62df\u6444\u50cf\u5934\u8fdb\u884c\u65f6\u95f4\u6233\u6807\u8bb0"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#2","text":"\u9700\u8981\u7528\u6237\u63d0\u4f9b\u6700\u65b0\u7684\u591a\u76f8\u673a\u6a21\u578b\u6587\u4ef6\u548c\u5927\u9f20\u793e\u4ea4\u5173\u952e\u70b9\u6a21\u578b\u6587\u4ef6\uff0c\u5e76\u66f4\u65b0\u5230\u4ee3\u7801\u4e2d\u3002\u524d\u8005\u7528\u4e8e3D\u91cd\u6784\uff1b\u540e\u8005\u7528\u4e8e\u8ba1\u7b97\u76f8\u540c\u5e74\u9f84\u5927\u9f20\u7684\u4f53\u957f\uff0c\u4fbf\u4e8e\u884c\u4e3a\u7279\u5f81\u5f52\u4e00\u5316\u3002\u901a\u5e38\uff0c \u5927\u9f20\u793e\u4ea4\u5173\u952e\u70b9\u6a21\u578b \u6587\u4ef6\u5305\u542b\u4e86 \u591a\u76f8\u673a\u6a21\u578b \uff0c\u6240\u4ee5\u8ba9\u591a\u76f8\u673a\u6a21\u578b\u7b49\u4e8e \u5927\u9f20\u793e\u4ea4\u5173\u952e\u70b9\u6a21\u578b \u5373\u53ef\u3002 \u4fee\u6539\u4e0b\u9762\u6587\u4ef6\u7684 lilab/label_live/usv_yolo_seg_dannce_unit_test.py \u4e2d\u7684 CALIBPKL \u4e3a\u591a\u76f8\u673a\u6a21\u578b\u8def\u5f84\uff0c model_smooth_matcalibpkl \u4e3a\u5927\u9f20\u793e\u4ea4\u5173\u952e\u70b9\u6a21\u578b\u8def\u5f84\u3002 # PATH_TO_LILAB/lilab/label_live/usv_yolo_seg_dannce_unit_test.py CALIBPKL = '/mnt/liying.cibr.ac.cn_Data_Temp_ZZC2/2506batch-chr2/test/ball/2025-06-13_10-16-58_ball.calibpkl' model_smooth_matcalibpkl = '/DATA/zhongzhenchao/2501chr2-shank3/all400p/2025-01-05_15-04-37_l7_sm1_pm6.smoothed_foot.matcalibpkl' model_smooth_matcalibpkl = CALIBPKL = '/a/b/c.matcalibpkl'","title":"2. \u66f4\u65b0\u4ee3\u7801\u4e2d\u7684\u76f8\u673a\u548c\u5927\u9f20\u6a21\u578b"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#3","text":"source activate mmdet # activate the conda environment python -m lilab.label_live.socketServer \u6ce8\u610f \u6ce8\u610fCloud Server\u9632\u706b\u5899\uff0c\u5f00\u653e8002\u7aef\u53e3\u3002\u5982\u679c\u51fa\u73b0\u7aef\u53e3\u88ab\u5360\u7528\u7684\u60c5\u51b5\uff0c\u5f80\u5f80\u662f\u56e0\u4e3a\u4e0a\u4e00\u4e2aPython\u7a0b\u5e8f\u672a\u6b63\u5e38\u5173\u95ed\u3002\u8bf7\u5148\u5173\u95ed\u5360\u7528\u8be5\u7aef\u53e3\u7684\u7a0b\u5e8f\uff0c\u6216\u6267\u884c lsof -i:8002 \u67e5\u770b\u5360\u7528\u8be5\u7aef\u53e3\u7684\u8fdb\u7a0b\uff0c\u7136\u540ekill\u6389\u8be5\u8fdb\u7a0b\uff08 kill -9 \u8fdb\u7a0b\u53f7 \uff09\u3002\u7a0d\u7b4910\u79d2\uff0c\u91cd\u542f\u8be5\u7a0b\u5e8f\u3002\u591a\u6b21\u5c1d\u8bd5\u3002","title":"3. \u542f\u52a8\u7ed3\u679c\u670d\u52a1\u5668\u5b88\u62a4\u8fdb\u7a0b"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#4-mediamtx","text":"\u5728Cloud Server\u4e0a\u542f\u52a8Mediamtx\uff0c\u7528\u4e8e\u63a5\u6536OBS\u7684\u63a8\u6d41\uff0c\u5e76\u8f6c\u53d1\u7ed9\u5ba2\u6237\u7aef\u3002 docker run --rm -it -p 8554 :8554 bluenviron/mediamtx \u6ce8\u610f \u6ce8\u610fCloud Server\u9632\u706b\u5899\uff0c\u5f00\u653e8554\u7aef\u53e3\u3002","title":"4. \u542f\u52a8\u5a92\u4f53\u670d\u52a1\u5668\u5b88\u62a4\u8fdb\u7a0b Mediamtx"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#5-obs","text":"\u5728DAQ PC\u4e0a\u542f\u52a8OBS\uff0c\u5e76\u63a8\u6d41\u5230Cloud Server\u7684Mediamtx\u3002 \u6211\u5df2\u7ecf\u914d\u7f6e\u597dOBS\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u7b80\u4fbf\u64cd\u4f5c\u542f\u52a8\u63a8\u6d41\u914d\u7f6e\uff1a \u9009\u62e9\uff0c\u83dc\u5355>\u914d\u7f6e\u6587\u4ef6> Social-seq-live\u63a8\u6d41 \u9009\u62e9\uff0c\u83dc\u5355>\u573a\u666f\u96c6\u5408> Social-seq-live-push \u7136\u540e\uff0c\u70b9\u51fb \"\u5f00\u59cb\u5f55\u5236\"\u6309\u94ae\uff08\u6ce8\u610f\u4e0d\u662f\u201c\u5f00\u59cb\u76f4\u64ad\u201d\uff09\uff0c\u8fdb\u884c\u63a8\u6d41\u300220\u79d2\u5185\u4e0d\u5f39\u51fa\u9519\u8bef\u63d0\u793a\uff0c\u8868\u793a\u63a8\u6d41\u6210\u529f\u3002 \u5bf9\u4e8e\u65b0\u7684DAQ PC\uff0c\u9700\u8981\u91cd\u65b0\u914d\u7f6eOBS\uff0c\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a \u63d0\u793a \u5206\u8fa8\u7387\u548c\u7f16\u7801\u65b9\u5f0f\u662f\u5f71\u54cd\u63a8\u6d41\u5ef6\u8fdf\u7684\u91cd\u8981\u53c2\u6570\uff0c\u5c24\u5176\u662f\u9879\u76ee\u76843840x2400\u662f\u9ad8\u5206\u8fa8\u7387\u3002\u8fd9\u5957RTSP\u53c2\u6570\u8bbe\u7f6e\uff0c\u662f\u7ecf\u8fc7\u591a\u79cd\u6d4b\u8bd5\uff0c\u5ef6\u8fdf\u4f4e\uff0c\u753b\u8d28\u597d\u7684\u53c2\u6570\u3002\u5176\u5b83\u89c6\u9891\u63a8\u6d41\u7684\u9879\u76ee\uff0c\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e2a\u53c2\u6570\u8bbe\u7f6e\u3002 \u6ce8\u610f \u6ce8\u610fOBS\u7684\u63a8\u6d41\u5730\u5740\uff0c\u9700\u8981\u586b\u5199Cloud Server\u7684IP\u5730\u5740\uff0c\u5e94\u8be5\u662f rtsp://10.50.60.6:8554/mystream_9cam \u3002\u53ef\u4ee5\u901a\u8fc7 VLC \u6216 ffplay \u7b49\u5de5\u5177\uff0c\u6d4b\u8bd5\u662f\u5426\u80fd\u591f\u6b63\u5e38\u64ad\u653e\u8be5\u6d41\u3002\u7535\u8111\u7684\u6027\u80fd\u51b3\u5b9a\u4e86\u63a8\u6d41\u7684\u6d41\u7545\u5ea6\uff0c\u5982\u679c\u7535\u8111\u6027\u80fd\u8f83\u5dee\uff0c\u53ef\u80fd\u63a8\u6d41\u4e0d\u6d41\u7545\uff0c\u6216\u8005\u51fa\u73b0\u5361\u987f\u73b0\u8c61\u3002\u53e6\u5916\uff0c\u7801\u7387\uff08bitrate\uff09\u9700\u8981\u8bbe\u4f4e 8Mbps\uff0c\u5426\u5219\u63a8\u6d41\u5ef6\u8fdf\u9ad8\u3002","title":"5. \u542f\u52a8 OBS \u89c6\u9891\u6d41"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#6","text":"\u5728Cloud Server\u4e0a\u542f\u52a8\u884c\u4e3a\u8bc6\u522b\u7a0b\u5e8f\uff0c\u7528\u4e8e\u63a5\u6536OBS\u7684\u63a8\u6d41\uff0c\u5e76\u8bc6\u522b\u884c\u4e3a\uff0c\u5c06\u8bc6\u522b\u7ed3\u679c\u6807\u7b7e\uff08Syllable ID\uff09\u5b58\u653e\u5230 Result server daemon \u4e2d\u3002 source activate mmdet # activate the conda environment PATH = /usr/bin: $PATH python -m lilab.label_live.usv_yolo_seg_dannce_unit_test \u6ce8\u610f \u6ce8\u610f\u67e5\u770b\u662f\u5426\u6709\u62a5\u9519\u4fe1\u606f\u3002\u786e\u4fddOBS\u5df2\u7ecf\u6b63\u5e38\u63a8\u6d41\uff0c\u5e76\u4e14\u63a8\u6d41\u5730\u5740\u6b63\u786e\u3002 \u6ce8\u610f \u68c0\u67e5\u7ec8\u7aef\u8f93\u8fd0\u884c\u5e27\u7387\uff0830fps\uff09\u548c\u5ef6\u8fdf(<10\u5e27)\u3002\u663e\u793aiteration \u5e94\u8be5\u7ea6\u4e3a 30its/s\uff0c\u5e76\u4e14\u5ef6\u8fdf\u5e27\u6570\u5e94\u8be5\u57286-10\u4ee5\u5185\u3002\u592a\u9ad8\u7684\u5ef6\u8fdf\u5e27\uff08>30\u5e27\uff09\uff0c\u5bfc\u81f4\u95ed\u73af\u523a\u6fc0\u7cbe\u5ea6\u7684\u4e25\u91cd\u4e0b\u964d\u3002\u7ecf\u9a8c\u539f\u56e0\u662f 1.DAQ PC\u6027\u80fd\u592a\u5dee\uff0c\u9700\u8981\u91cd\u542fOBS\u8f6f\u4ef6\uff08\u901a\u5e38\uff09\uff1b\u6216\u80052 \u662f\u6709\u4eba\u5728\u4f7f\u7528Cloud Server\uff0c\u62a2\u5360\u4e86CPU\u548cGPU\u8d44\u6e90\uff0c\u5219\u6e05\u7a7a\u8fd9\u4e9b\u7528\u6237\u7684\u8d44\u6e90\uff08\u63d0\u524d\u7ec4\u5185\u6c9f\u901a\uff09\u3002","title":"6. \u542f\u52a8\u884c\u4e3a\u8bc6\u522b\u6d41\u6c34\u7ebf\u4ee3\u7801"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#7-social-seq-live-gui","text":"\u53bbgithub \u4e0a\u4e0b\u8f7d Social-seq-live \u7684\u4ee3\u7801\uff0c\u5e76\u5b89\u88c5\u4f9d\u8d56\u5305\u3002 python main.py # GUI\u7a0b\u5e8f\uff0c\u201c\u95ed\u73af\u63a7\u5236\u201d\u5b9e\u9a8c\u7ec4 python main_exclude.py # GUI\u7a0b\u5e8f\uff0c\u201c\u5f00\u73af\u63a7\u5236\u201d\u5bf9\u7167\u7ec4 \u6ce8\u610f \u6ce8\u610f\u201c\u95ed\u73af\u63a7\u5236\u201d\u5b9e\u9a8c\u7ec4\u548c\u201c\u5f00\u73af\u63a7\u5236\u201d\u5bf9\u7167\u7ec4\u7684GUI\u7a0b\u5e8f\u4e0d\u540c\u3002\u64cd\u4f5c\u6b65\u9aa4\u76f8\u540c\u3002\u95ed\u73af\u63a7\u5236\uff0c\u5728\u8bc6\u522b\u5230\u884c\u4e3a\u540e\uff0c\u81ea\u52a8\u542f\u52a8\u523a\u6fc0\u3002\u5f00\u73af\u63a7\u5236\uff0c\u9700\u8981\u6392\u9664\u76ee\u6807\u884c\u4e3a\uff0c\u968f\u673a\u7ed9\u523a\u6fc0\u3002 \u63a5\u7740\u9009\u62e9\u5bf9\u5e94\u7684GUI\u7a0b\u5e8f\uff0c\u5e76\u542f\u52a8\u3002\u8fde\u63a5 Cloud Server \u548c Arduino \u540e\uff0c\u5373\u81ea\u52a8\u5f00\u59cb\u884c\u4e3a\u8bc6\u522b\u5e76\u5149\u9057\u4f20\u63a7\u5236\u3002 \u5728GUI\u4e2d\uff0c\u52fe\u9009\u5408\u9002\u7684\u76ee\u6807\u884c\u4e3a\uff0c\u4f8b\u5982 \"pouncing\", \"pinning\", \"chasing\" \u7b49\u3002 \u586b\u5165 Cloud Server \u7684IP\u5730\u5740\uff0c\u70b9\u51fb\u201cConnect\u201d\u6309\u94ae\uff0c\u8fde\u63a5\u5230Result server daemon\u3002 \u9009\u62e9 Arduino \u4e32\u53e3\uff0c\u5e76\u70b9\u51fb\u201cConnect\u201d\u6309\u94ae\uff0c\u8fde\u63a5\u5230Arduino\u3002\uff08 Arduino \u9700\u8981\u521d\u59cb\u5316\u70e7\u5f55\u4ee3\u7801\uff0c\u53c2\u8003\u3010#9\u3011 \uff09","title":"7. \u542f\u52a8 Social-seq-live GUI"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#8-ffmpeg","text":"\u5728\u52a8\u7269\u5b9e\u9a8c\u5f00\u59cb\u540e\uff0c\u9700\u8981\u8bb0\u5f55\u89c6\u9891\u3002\u7531\u4e8e\u539f\u5148\u7684OBS \u5f55\u50cf\u529f\u80fd\u5df2\u7ecf\u88ab\u5360\u7528\uff0c\u56e0\u6b64\u53ea\u80fd\u5728Cloud Server \u4e0a\u8bb0\u5f55\u89c6\u9891\u3002 \u5c06\u4e0b\u9762\u7684\u4ee3\u7801\u4fdd\u5b58\u4e3a Cloud Server \u7684 RT_record.sh \u6587\u4ef6\u3002\u6bcf\u6b21\u52a8\u7269\u5b9e\u9a8c\u5f00\u59cb\u540e\uff0c\u5e76\u8fd0\u884c\u5b83\u3002\u5b83\u4f1a\u5728 /DATA/chenxinfeng \u76ee\u5f55\u4e0b\uff0c\u4fdd\u5b58\u4e00\u4e2a\u89c6\u9891\u6587\u4ef6\u3002\u6587\u4ef6\u540d\u662f\u5f53\u524d\u65f6\u95f4\uff0c\u4f8b\u5982 2025-01-01_12-00-00.mp4\u3002 #!/bin/bash # \u4fdd\u5b58\u4e3a RT_record \u6587\u4ef6 filename = ` date --date = '2.2 seconds' + \"%Y-%m-%d_%H-%M-%S\" ` /home/liying_lab/chenxinfeng/.conda/envs/mmdet/bin/ffmpeg.bak -rtsp_transport tcp -t 00 :15:06 -i rtsp://10.50.60.6:8554/mystream_9cam -ss 00 :00:02.2 -c:v hevc_nvenc -b:v 10M -maxrate:v 20M -preset:v p4 /DATA/chenxinfeng/ ${ filename } .mp4","title":"8. \u542f\u52a8 ffmpeg \u4ee3\u7801\u4ee5\u5c06\u89c6\u9891\u8f6c\u50a8\u5230\u6587\u4ef6"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#9-arduino","text":"\u53bbgithub \u4e0a\u4e0b\u8f7d Arduino Laser pulse \u7684\u4ee3\u7801\uff0c\u5e76\u8fdb\u884c\u70e7\u5f55\u3002 const int PinNum = 6 ; // the number of the LED pin const float duration = 0 .5 ; // time for running, unit = sec. const float Hz = 40 ; // frequency, unit = Hz. const float Duty = 0 .2 ; // duty, unit = 0 ~1. \u8be5\u4ee3\u7801\u8868\u793aArduino \u7684 D6 \u5f15\u811a\uff0c\u8fde\u63a5\u5230\u6fc0\u5149\u5668\u7684\u89e6\u53d1\u5f15\u811a\u3002\u5355\u8bcd\u523a\u6fc0\u65f6\u95f4\u4e3a 0.5 \u79d2\uff0c\u6fc0\u5149\u9891\u7387\u4e3a 40Hz\uff0c\u5360\u7a7a\u6bd4\u4e3a 0.2 \uff085ms\uff09\u3002","title":"9. Arduino \u6fc0\u5149\u8109\u51b2"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#obs-gui","text":"\u5728\u5b9e\u9a8c\u7ed3\u675f\u540e\uff0c\u590d\u539f OBS \u7684\u914d\u7f6e\uff0c\u5173\u95edOBS\u8f6f\u4ef6\uff1b\u5173\u95edSocial seq live GUI\u3002\u5728Cloude Server\u4e0a\uff0c\u5173\u95ed pipeline \u3002","title":"\u5173\u95ed OBS \u548c GUI"},{"location":"en/figure_reproduce/","text":"Paper Code Reproduction \"(2025) Decoding the Valence of Developmental Social Behavior: Dopamine Governs Social Motivation Deficits in Autism. In preparation\" Author : Chen Xinfeng, 2025-08-09 Modified : Tao Xianming, 2025-08-15 Figures Gallery Run the code in this repository to reproduce the figures in the paper. Code and Data Download The data and code have been open-sourced, with the link: Figshare_DATA_20250818.zip ( ~1.0 GB ). After downloading, unzip it into a folder named Figshare . Installation Supports Windows, Linux, and MacOS systems. First, install the dependency environment using uv . Warning Do not use uv and conda simultaneously, as this will cause package installation conflicts. Before running the following codes, please run conda deactivate first. # Before running the following code, please download the FIGSHARE code and data. unzip Figshare_DATA_2025*.zip -d Figshare cd Figshare python3 -m pip install uv # UV is a lightweight Python package manager, similar to conda. uv sync # Download the required packages and dependencies. uv run python --version # Verify the Python version (should be 3.12) Install Custom Packages uv pip install git+https://github.com/chenxinfeng4/multiview_calib.git git clone https://github.com/chenxinfeng4/LILAB-py.git ../LILAB-py uv pip install -e ../LILAB-py uv run python -m lilab.multiview_scripts_dev.p1_checkboard_global -h # Verify the installation Generate a Single Figure: Fig1C.pdf You can run the code in Fig*/Fig*.py one by one to generate figures. uv run python Fig1_S1/Fig1C.py # The result is saved to Fig1_S1/result/Fig1C.pdf Note : If any error occurs, please ensure that all data files have been downloaded correctly. Generate All Figures with One Command uv run python main.py test Clean All Results\uff0cReset #1. Delete all result data uv run python main.py clean #2. Or manually delete all result data rm Fig*/result/*pdf Fig*/result/*pkl Fig*/result/*png","title":"Figure Reproduction"},{"location":"en/figure_reproduce/#paper-code-reproduction","text":"\"(2025) Decoding the Valence of Developmental Social Behavior: Dopamine Governs Social Motivation Deficits in Autism. In preparation\" Author : Chen Xinfeng, 2025-08-09 Modified : Tao Xianming, 2025-08-15","title":"Paper Code Reproduction"},{"location":"en/figure_reproduce/#figures-gallery","text":"Run the code in this repository to reproduce the figures in the paper.","title":"Figures Gallery"},{"location":"en/figure_reproduce/#code-and-data-download","text":"The data and code have been open-sourced, with the link: Figshare_DATA_20250818.zip ( ~1.0 GB ). After downloading, unzip it into a folder named Figshare .","title":"Code and Data Download"},{"location":"en/figure_reproduce/#installation","text":"Supports Windows, Linux, and MacOS systems. First, install the dependency environment using uv . Warning Do not use uv and conda simultaneously, as this will cause package installation conflicts. Before running the following codes, please run conda deactivate first. # Before running the following code, please download the FIGSHARE code and data. unzip Figshare_DATA_2025*.zip -d Figshare cd Figshare python3 -m pip install uv # UV is a lightweight Python package manager, similar to conda. uv sync # Download the required packages and dependencies. uv run python --version # Verify the Python version (should be 3.12) Install Custom Packages uv pip install git+https://github.com/chenxinfeng4/multiview_calib.git git clone https://github.com/chenxinfeng4/LILAB-py.git ../LILAB-py uv pip install -e ../LILAB-py uv run python -m lilab.multiview_scripts_dev.p1_checkboard_global -h # Verify the installation","title":"Installation"},{"location":"en/figure_reproduce/#generate-a-single-figure-fig1cpdf","text":"You can run the code in Fig*/Fig*.py one by one to generate figures. uv run python Fig1_S1/Fig1C.py # The result is saved to Fig1_S1/result/Fig1C.pdf Note : If any error occurs, please ensure that all data files have been downloaded correctly.","title":"Generate a Single Figure: Fig1C.pdf"},{"location":"en/figure_reproduce/#generate-all-figures-with-one-command","text":"uv run python main.py test","title":"Generate All Figures with One Command"},{"location":"en/figure_reproduce/#clean-all-resultsreset","text":"#1. Delete all result data uv run python main.py clean #2. Or manually delete all result data rm Fig*/result/*pdf Fig*/result/*pkl Fig*/result/*png","title":"Clean All Results\uff0cReset"},{"location":"en/","text":"Welcome to the Social-Seq Project These are some explanatory documents for the Social-Seq project. Social-seq is used to analyze the 3D poses, social categories, and emotional states behind social interactions of animals in close contact. By constructing a real-time behavior classification system, it is potentially useful for treating autism (ASD) social disorders. Code Repository \ud83d\udce6\uff1ahttps://github.com/LiLab-CIBR/Social_Seq Document here \ud83d\udcda\uff1ahttps://lilab-cibr.github.io/Social_Seq/ Contents Hardware and Software System Installation - Install multi-camera systems, debug OBS, and enable F2 synchronization assistant. Ball Calibration - Calibrate the spatial coordinate system of the multi-camera system. Mouse Image Segmentation - Use segmentation models to enhance the signal-to-noise ratio of mice in complex backgrounds. Single mouse. Social 3D Keypoint Reconstruction - Two-rat segmentation, keypoint prediction, and smoothing. Seq Behavior Labeling - Obtain 36 categories of consistent social behavior labels for rats. Code Release \ud83d\udcc5 Last updated on 2025-8-15 by ChenXinfeng. \ud83d\udc68\u200d\ud83d\udcbb References \ud83d\udcda Xinfeng Chen; Xianming Tao; Zhenchao Zhong; Yuanqing Zhang; Yixuan Li; Ye Ouyang; Zhaoyi Ding; Min An; Miao Wang; Ying Li* (2025). Decoding the Valence of Developmental Social Behavior: Dopamine Governs Social Motivation Deficits in Autism. In preparation. Xinfeng Chen \u9648\u6615\u67ab (2025). Deep Learning-Based Framework for Analyzing Free Social Behavior in Model Animals. PhD Thesis, Peking University. License This project is licensed under the MIT License. You are free to use, modify, and distribute the code as long as you include the original copyright notice and this permission notice in all copies or substantial portions of the Software. Corresponding Author \ud83d\udcec Li Ying: liying","title":"Home"},{"location":"en/#welcome-to-the-social-seq-project","text":"These are some explanatory documents for the Social-Seq project. Social-seq is used to analyze the 3D poses, social categories, and emotional states behind social interactions of animals in close contact. By constructing a real-time behavior classification system, it is potentially useful for treating autism (ASD) social disorders. Code Repository \ud83d\udce6\uff1ahttps://github.com/LiLab-CIBR/Social_Seq Document here \ud83d\udcda\uff1ahttps://lilab-cibr.github.io/Social_Seq/","title":"Welcome to the Social-Seq Project"},{"location":"en/#contents","text":"Hardware and Software System Installation - Install multi-camera systems, debug OBS, and enable F2 synchronization assistant. Ball Calibration - Calibrate the spatial coordinate system of the multi-camera system. Mouse Image Segmentation - Use segmentation models to enhance the signal-to-noise ratio of mice in complex backgrounds. Single mouse. Social 3D Keypoint Reconstruction - Two-rat segmentation, keypoint prediction, and smoothing. Seq Behavior Labeling - Obtain 36 categories of consistent social behavior labels for rats.","title":"Contents"},{"location":"en/#code-release","text":"Last updated on 2025-8-15 by ChenXinfeng. \ud83d\udc68\u200d\ud83d\udcbb","title":"Code Release \ud83d\udcc5"},{"location":"en/#references","text":"Xinfeng Chen; Xianming Tao; Zhenchao Zhong; Yuanqing Zhang; Yixuan Li; Ye Ouyang; Zhaoyi Ding; Min An; Miao Wang; Ying Li* (2025). Decoding the Valence of Developmental Social Behavior: Dopamine Governs Social Motivation Deficits in Autism. In preparation. Xinfeng Chen \u9648\u6615\u67ab (2025). Deep Learning-Based Framework for Analyzing Free Social Behavior in Model Animals. PhD Thesis, Peking University.","title":"References \ud83d\udcda"},{"location":"en/#license","text":"This project is licensed under the MIT License. You are free to use, modify, and distribute the code as long as you include the original copyright notice and this permission notice in all copies or substantial portions of the Software.","title":"License"},{"location":"en/#corresponding-author","text":"Li Ying: liying","title":"Corresponding Author \ud83d\udcec"},{"location":"en/%E5%8D%95%E9%BC%A0%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/process/","text":"3D Pose Reconstruction of a Single Rat Developer: Chen Xinfeng, 2025-8-15 Requirements: * *.calib - Ball calibration file. * vdir/*.mp4 - 9-view video of the rat. * volsize - The 3D space occupied by the animal, centered on the back. Complete Code ## 1. Required Parameters vdir = '/mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zyq_to_dzy/20221116/solo' # Video file/folder to analyze vdir = '/mnt/liying.cibr.ac_cn_Data_Temp/multiview_9/zyq_to_dzy/20221123/solo' vcalib = ` ls /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/dzy_oyy_ball/checked/0328-0330/solo/*.calibpkl ` # Ball calibration file volsize = 210 #vdir=/mnt/liying.cibr.ac_cn_Data_Temp/multiview_9/oyy/test_singlerat2022-11-24_17-08-23_baseline_rat1.mp4 ## volsize for rats # | | Male | Female | # | ------- | ---- | ------ | # | DAY35 | 160 | 160 | # | DAY50 | 190 | 180 | # | DAY75 | 220 | 200 | # | Adult | 220 | 210 | ## 2. Recommended (Default) Model Files config = '/home/liying_lab/chenxinfeng/DATA/mmpose/res50_coco_com2d_512x320_oyy.py' # Model configuration file for com2d dannce_project = '/home/liying_lab/chenxinfeng/DATA/dannce/demo_single/rat14_1280x800x9_mono' # DANNCE model path ## 3. Filename Parsing vfiles_nake = ` ls $vdir /*.mp4 | egrep -v \"com3d|sktdraw|mask\" | sed 's/.mp4//' ` vfiles = ` echo \" $vfiles_nake \" | xargs -I {} echo {} .segpkl ` volsize_vfiles = ` echo \" $vfiles \" | xargs -I {} echo $volsize {} ` ## 4. Predict com3d python -m lilab.multiview_scripts_dev.s1_ballvideo2matpkl_full_faster $vdir --pannels 9 --config $config echo \" $vfiles_nake \" | xargs -n 1 -P 0 -I {} python -m lilab.multiview_scripts_dev.s4_matpkl2matcalibpkl {} .matpkl $vcalib echo \" $vfiles_nake \" | xargs -n 1 -P 0 -I {} python -m lilab.dannce_single.s1_matcalibpkl_com3d_to_segpkl {} .matcalibpkl # ls $vdir/*.segpkl | sed 's/.segpkl/.mp4/' | xargs -n 1 -P 0 python -m lilab.mmdet_dev.s4_segpkl_com3d_to_video --vox_size $volsize --maxlen 9000 ## 5. DANNCE Predict cd $dannce_project echo \" $volsize_vfiles \" | sed 's/.segpkl/.mp4/' | cat -n | xargs -P 4 -l bash -c '/home/liying_lab/chenxinfeng/.conda/envs/mmdet/bin/dannce-predict-video-trt ../../configs/dannce_rat14_1280x800x9_max_config.yaml --vol-size $1 --video-file $2 --gpu-id $(($0%4))' echo \" $vfiles \" | sed 's/.segpkl/_dannce_predict.pkl/' | xargs -P 0 -l -r python -m lilab.dannce.s4_videopredictpkl2matcalibpkl # Smooth foot_w16, body_w64, one hit echo \" $vfiles \" | sed 's/.segpkl/.matcalibpkl/' | xargs -l -P 6 -r python -m lilab.smoothnet.s1_matcalibpkl2smooth_foot ## 6. Draw Video # plot video # echo \"$vfiles\" | sed 's/.segpkl/.matcalibpkl/' | # xargs -P 6 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d $0 --iview 1 --maxlen 9000' echo \" $vfiles \" | sed 's/.segpkl/.smoothed_foot.matcalibpkl/' | xargs -P 6 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d $0 --iview 1 --postfix smoothed_foot --maxlen 9000' ## 7. Clean echo \" $vfiles_nake \" | xargs -n 1 -I {} rm {} .matpkl {} _dannce_predict*","title":"3D Pose Reconstruction of a Single Rat"},{"location":"en/%E5%8D%95%E9%BC%A0%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/process/#3d-pose-reconstruction-of-a-single-rat","text":"Developer: Chen Xinfeng, 2025-8-15 Requirements: * *.calib - Ball calibration file. * vdir/*.mp4 - 9-view video of the rat. * volsize - The 3D space occupied by the animal, centered on the back.","title":"3D Pose Reconstruction of a Single Rat"},{"location":"en/%E5%8D%95%E9%BC%A0%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/process/#complete-code","text":"## 1. Required Parameters vdir = '/mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zyq_to_dzy/20221116/solo' # Video file/folder to analyze vdir = '/mnt/liying.cibr.ac_cn_Data_Temp/multiview_9/zyq_to_dzy/20221123/solo' vcalib = ` ls /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/dzy_oyy_ball/checked/0328-0330/solo/*.calibpkl ` # Ball calibration file volsize = 210 #vdir=/mnt/liying.cibr.ac_cn_Data_Temp/multiview_9/oyy/test_singlerat2022-11-24_17-08-23_baseline_rat1.mp4 ## volsize for rats # | | Male | Female | # | ------- | ---- | ------ | # | DAY35 | 160 | 160 | # | DAY50 | 190 | 180 | # | DAY75 | 220 | 200 | # | Adult | 220 | 210 | ## 2. Recommended (Default) Model Files config = '/home/liying_lab/chenxinfeng/DATA/mmpose/res50_coco_com2d_512x320_oyy.py' # Model configuration file for com2d dannce_project = '/home/liying_lab/chenxinfeng/DATA/dannce/demo_single/rat14_1280x800x9_mono' # DANNCE model path ## 3. Filename Parsing vfiles_nake = ` ls $vdir /*.mp4 | egrep -v \"com3d|sktdraw|mask\" | sed 's/.mp4//' ` vfiles = ` echo \" $vfiles_nake \" | xargs -I {} echo {} .segpkl ` volsize_vfiles = ` echo \" $vfiles \" | xargs -I {} echo $volsize {} ` ## 4. Predict com3d python -m lilab.multiview_scripts_dev.s1_ballvideo2matpkl_full_faster $vdir --pannels 9 --config $config echo \" $vfiles_nake \" | xargs -n 1 -P 0 -I {} python -m lilab.multiview_scripts_dev.s4_matpkl2matcalibpkl {} .matpkl $vcalib echo \" $vfiles_nake \" | xargs -n 1 -P 0 -I {} python -m lilab.dannce_single.s1_matcalibpkl_com3d_to_segpkl {} .matcalibpkl # ls $vdir/*.segpkl | sed 's/.segpkl/.mp4/' | xargs -n 1 -P 0 python -m lilab.mmdet_dev.s4_segpkl_com3d_to_video --vox_size $volsize --maxlen 9000 ## 5. DANNCE Predict cd $dannce_project echo \" $volsize_vfiles \" | sed 's/.segpkl/.mp4/' | cat -n | xargs -P 4 -l bash -c '/home/liying_lab/chenxinfeng/.conda/envs/mmdet/bin/dannce-predict-video-trt ../../configs/dannce_rat14_1280x800x9_max_config.yaml --vol-size $1 --video-file $2 --gpu-id $(($0%4))' echo \" $vfiles \" | sed 's/.segpkl/_dannce_predict.pkl/' | xargs -P 0 -l -r python -m lilab.dannce.s4_videopredictpkl2matcalibpkl # Smooth foot_w16, body_w64, one hit echo \" $vfiles \" | sed 's/.segpkl/.matcalibpkl/' | xargs -l -P 6 -r python -m lilab.smoothnet.s1_matcalibpkl2smooth_foot ## 6. Draw Video # plot video # echo \"$vfiles\" | sed 's/.segpkl/.matcalibpkl/' | # xargs -P 6 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d $0 --iview 1 --maxlen 9000' echo \" $vfiles \" | sed 's/.segpkl/.smoothed_foot.matcalibpkl/' | xargs -P 6 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d $0 --iview 1 --postfix smoothed_foot --maxlen 9000' ## 7. Clean echo \" $vfiles_nake \" | xargs -n 1 -I {} rm {} .matpkl {} _dannce_predict*","title":"Complete Code"},{"location":"en/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/basic_command/","text":"Some Basic Skills Use htop to check CPU and memory usage Use nv command to check GPU usage. Add the following commands to ~/.bashrc , then restart the terminal. # Use `nv` command to check GPU usage alias nv = 'watch -n 1 nvidia-smi' # Use specific GPUs (0,1,2,3), other GPUs are not used # $choosecuda 0,1,2,3 $choosecuda 3 function choosecuda { if [ -z \" $1 \" ] ; then num = 0 ; else num = \" $1 \" ; fi CUDA_VISIBLE_DEVICES = $num export CUDA_VISIBLE_DEVICES } # Use killcuda to forcibly release GPU memory usage of the current account # $killcuda alias killcuda = \"ps -o pid= -u $( whoami ) | \\ grep -wFf <( nvidia-smi -q -x | grep pid | sed -e 's/<pid>//g' -e 's/<\\/pid>//g' -e 's/^[[:space:]]*//' | sort | uniq ) | \\ xargs kill -9 \" # Use killcuda2 to forcibly release GPU memory usage of all accounts # $sudo killcuda2 alias killcuda2 = \"fuser -v /dev/nvidia-uvm 2> /dev/null | xargs kill -9 \" # Find files containing specific keywords in Python files in the current folder # $findgrep WORDS alias findgrep = 'find . -name \"*.py\" -type f -exec echo \"{}\" \\; | xargs grep -n ' choosecuda is used to select GPU IDs. killcuda and killcuda2 are used to release GPU usage. Warning Before using GPU, first check the GPU usage with the nv command, and use choosecuda to select idle GPUs. If a GPU has high memory usage but low computing utilization, use killcuda to release it. choosecuda is only temporarily effective for the current terminal, and will be invalid after terminal restart or across terminals. findgrep is used to search for keywords in Python code Mount the Synology cloud disk path to the server. Replace username with the Synology username and uid with the server account username. The Synology user password will be required. sudo mkdir /mnt/liying.cibr.ac.cn_usb3 #Create folder # Mount the Synology path to the server sudo mount -t cifs -o \\ vers = 2 .0,username = chenxinfeng \\ //liying.cibr.ac.cn/usbshare3-2 \\ /mnt/liying.cibr.ac.cn_usb3/ -o \\ uid = chenxinfeng,file_mode = 0766 ,dir_mode = 0777 Warning file_mode=0766,dir_mode=0777 permissions are too broad, giving all users modification permissions for Synology files. This may pose a risk to Synology files. If permissions are too tight, mounting may not work smoothly. Please control file_mode and dir_mod permissions as needed.","title":"Basic Commands"},{"location":"en/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/basic_command/#some-basic-skills","text":"Use htop to check CPU and memory usage Use nv command to check GPU usage. Add the following commands to ~/.bashrc , then restart the terminal. # Use `nv` command to check GPU usage alias nv = 'watch -n 1 nvidia-smi' # Use specific GPUs (0,1,2,3), other GPUs are not used # $choosecuda 0,1,2,3 $choosecuda 3 function choosecuda { if [ -z \" $1 \" ] ; then num = 0 ; else num = \" $1 \" ; fi CUDA_VISIBLE_DEVICES = $num export CUDA_VISIBLE_DEVICES } # Use killcuda to forcibly release GPU memory usage of the current account # $killcuda alias killcuda = \"ps -o pid= -u $( whoami ) | \\ grep -wFf <( nvidia-smi -q -x | grep pid | sed -e 's/<pid>//g' -e 's/<\\/pid>//g' -e 's/^[[:space:]]*//' | sort | uniq ) | \\ xargs kill -9 \" # Use killcuda2 to forcibly release GPU memory usage of all accounts # $sudo killcuda2 alias killcuda2 = \"fuser -v /dev/nvidia-uvm 2> /dev/null | xargs kill -9 \" # Find files containing specific keywords in Python files in the current folder # $findgrep WORDS alias findgrep = 'find . -name \"*.py\" -type f -exec echo \"{}\" \\; | xargs grep -n ' choosecuda is used to select GPU IDs. killcuda and killcuda2 are used to release GPU usage. Warning Before using GPU, first check the GPU usage with the nv command, and use choosecuda to select idle GPUs. If a GPU has high memory usage but low computing utilization, use killcuda to release it. choosecuda is only temporarily effective for the current terminal, and will be invalid after terminal restart or across terminals. findgrep is used to search for keywords in Python code Mount the Synology cloud disk path to the server. Replace username with the Synology username and uid with the server account username. The Synology user password will be required. sudo mkdir /mnt/liying.cibr.ac.cn_usb3 #Create folder # Mount the Synology path to the server sudo mount -t cifs -o \\ vers = 2 .0,username = chenxinfeng \\ //liying.cibr.ac.cn/usbshare3-2 \\ /mnt/liying.cibr.ac.cn_usb3/ -o \\ uid = chenxinfeng,file_mode = 0766 ,dir_mode = 0777 Warning file_mode=0766,dir_mode=0777 permissions are too broad, giving all users modification permissions for Synology files. This may pose a risk to Synology files. If permissions are too tight, mounting may not work smoothly. Please control file_mode and dir_mod permissions as needed.","title":"Some Basic Skills"},{"location":"en/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/installed_models/","text":"Installed Deep Learning Models Model (conda) Usage Project Path Mask-RCNN (mmpose) Rat segmentation, Mouse segmentation /home/liying_lab/chenxinfeng/DATA/CBNetV2 mmpose (mmpose) 2D Keypoint Detection xxx/DATA/mmpose YOLO-v8 (open-mmlab) Animal Rapid Detection & Segmentation xxx/DATA/ultralytic DANNCE (mmdet) Animal 3D Keypoint Detection xxx/DATA/dannce SmoothNet (mmdet) Keypoint Temporal Smoothing xxx/DATA/SmoothNet","title":"Installed Deep Learning Models"},{"location":"en/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/installed_models/#installed-deep-learning-models","text":"Model (conda) Usage Project Path Mask-RCNN (mmpose) Rat segmentation, Mouse segmentation /home/liying_lab/chenxinfeng/DATA/CBNetV2 mmpose (mmpose) 2D Keypoint Detection xxx/DATA/mmpose YOLO-v8 (open-mmlab) Animal Rapid Detection & Segmentation xxx/DATA/ultralytic DANNCE (mmdet) Animal 3D Keypoint Detection xxx/DATA/dannce SmoothNet (mmdet) Keypoint Temporal Smoothing xxx/DATA/SmoothNet","title":"Installed Deep Learning Models"},{"location":"en/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/login_server/","text":"Connect to the Server Detailed Server Specifications The lab has a server and a test machine. The server is dedicated to data analysis. Do not install software packages privately to avoid damaging its environment. To learn basic Linux commands, you can use the test machine. Server (High Performance, Inspur) Test Machine (Temporary Use) Purpose Running models, processes, and data analysis Testing code and web services Location Information Center B Area, Basement Level 2 Lab Address ssh chenxinfeng@ 10.50.60.6 - System Ubuntu 18.04 - Basic Commands sudo apt install PACKAGE - Memory 256 GB - Storage 1 TB SSD + 8 TB HDD - CPU Intel Silver 4314, 32 cores 64 threads - GPU 4 NVIDIA RTX3090 (24 GB VRAM) - Docker Supported - Logging into the Server (/Test Machine) The server supports Remote Desktop , ssh , and vscode login methods. vscode is recommended. 1. Using vscode [Most Recommended] Go to the official website Download VSCODE and install it. Then install the Remote - SSH plugin. Use the plugin to access the remote server. Navigate to the project directory on the server and install the Python and Jupyter plugins. Warning When logging into a remote SSH for the first time with VSCODE, it will automatically download software and configure the environment on the server. Please be patient. VSCODE updates frequently, which can cause the Python and Jupyter environments to become outdated. If this happens, update VSCODE and restart the software. You can disable VSCODE auto-updates in the settings. Error Older WINDOWS computers have system issues that cause VSCODE's SSH connection to keep spinning or fail. Please download the latest software from the OPEN-SSH official website and add it to the search directory, replacing the original SSH. 2. Using ssh On a Windows client computer, hold down the Win R shortcut key, enter cmd in the Run window that pops up. In the terminal command window that appears, enter the following command and input the password. ssh chenxinfeng@10.50.60.6 Tips If you want to log in without a password, you can search the internet for \"ssh passwordless login\". 3. Using Remote Desktop Login [Avoid] On a Windows client computer, hold down the Win R shortcut key, enter mstc in the Run window that pops up. The Remote Desktop login window will appear. Enter the server's IP address and Connect . Then enter the username and password. In general scenarios, VSCODE is recommended as the server connection tool. It is also recommended to install AI programming assistants like CodeGeeX in VSCODE (registration required). Suitable Scenarios Disadvantages VSCODE Text and code editing, jupyter analysis and plotting Frequent updates, complicated environment configuration, consumes server performance SSH Running temporary scripts or modifying environment Poor visualization Remote Desktop Graphical interface programs Laggy, limited by network quality","title":"Login to Server"},{"location":"en/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/login_server/#connect-to-the-server","text":"","title":"Connect to the Server"},{"location":"en/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/login_server/#detailed-server-specifications","text":"The lab has a server and a test machine. The server is dedicated to data analysis. Do not install software packages privately to avoid damaging its environment. To learn basic Linux commands, you can use the test machine. Server (High Performance, Inspur) Test Machine (Temporary Use) Purpose Running models, processes, and data analysis Testing code and web services Location Information Center B Area, Basement Level 2 Lab Address ssh chenxinfeng@ 10.50.60.6 - System Ubuntu 18.04 - Basic Commands sudo apt install PACKAGE - Memory 256 GB - Storage 1 TB SSD + 8 TB HDD - CPU Intel Silver 4314, 32 cores 64 threads - GPU 4 NVIDIA RTX3090 (24 GB VRAM) - Docker Supported -","title":"Detailed Server Specifications"},{"location":"en/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/login_server/#logging-into-the-server-test-machine","text":"The server supports Remote Desktop , ssh , and vscode login methods. vscode is recommended.","title":"Logging into the Server (/Test Machine)"},{"location":"en/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/login_server/#1-using-vscode-most-recommended","text":"Go to the official website Download VSCODE and install it. Then install the Remote - SSH plugin. Use the plugin to access the remote server. Navigate to the project directory on the server and install the Python and Jupyter plugins. Warning When logging into a remote SSH for the first time with VSCODE, it will automatically download software and configure the environment on the server. Please be patient. VSCODE updates frequently, which can cause the Python and Jupyter environments to become outdated. If this happens, update VSCODE and restart the software. You can disable VSCODE auto-updates in the settings. Error Older WINDOWS computers have system issues that cause VSCODE's SSH connection to keep spinning or fail. Please download the latest software from the OPEN-SSH official website and add it to the search directory, replacing the original SSH.","title":"1. Using vscode [Most Recommended]"},{"location":"en/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/login_server/#2-using-ssh","text":"On a Windows client computer, hold down the Win R shortcut key, enter cmd in the Run window that pops up. In the terminal command window that appears, enter the following command and input the password. ssh chenxinfeng@10.50.60.6 Tips If you want to log in without a password, you can search the internet for \"ssh passwordless login\".","title":"2. Using ssh"},{"location":"en/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/login_server/#3-using-remote-desktop-login-avoid","text":"On a Windows client computer, hold down the Win R shortcut key, enter mstc in the Run window that pops up. The Remote Desktop login window will appear. Enter the server's IP address and Connect . Then enter the username and password. In general scenarios, VSCODE is recommended as the server connection tool. It is also recommended to install AI programming assistants like CodeGeeX in VSCODE (registration required). Suitable Scenarios Disadvantages VSCODE Text and code editing, jupyter analysis and plotting Frequent updates, complicated environment configuration, consumes server performance SSH Running temporary scripts or modifying environment Poor visualization Remote Desktop Graphical interface programs Laggy, limited by network quality","title":"3. Using Remote Desktop Login [Avoid]"},{"location":"en/%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/bug_fix/","text":"Patch: Linux Host Docker (If need) Why patch: This docker image is build in Windows host, somehow, have problems in linux host. If you server is Linux. $ nvidia-smi #should see the GPUs, errors `not found libnvidia-ml.so.1` should patch. So that you can enter the Docker container, and try this patch. cd /usr/lib/x86_64-linux-gnu ln -sf libnvidia-ml.so.5* libnvidia-ml.so.1 ln -sf libnvidia-ml.so.5* libnvidia-ml.so ln -sf libcuda.so.5* libcuda.so.1 #optional ln -sf libcudadebugger.so.5* libcudadebugger.so.1 #optional ldconfig You can check if torch is working properly python -c \"import torch; print(torch.zeros(3,3).cuda())\" Patch: LILAB-pkg (If need) Why patch: The docker is not support NVIDIA Video Decoder/Encoder. But the main LILAB-pkg use the NVIDIA Video packages. So the docker should downgrade to the CPU video package. Whenever you update the LILAB-pkg from github, do this patch. cp -r /root/Downloads/pipeline/LILAB-pkg-patch-for-docker/* ~/LILAB-pkg/ Host Port 8080 Already in Use If you encounter the error \"Error starting userland proxy: listen tcp 0.0.0.0:8080: bind: address already in use\" when running the following command, it means that port 8080 on the host is already occupied. docker run --rm -it -p 8080:8080 ... You need to modify the port mapping to another port (e.g., 8081, http://localhost:8081/), for example: docker run --rm -it -p 8081:8080 ... Forward Remote Server Port 8080 to Local You can skip this step if you are using Windows Docker. Why forwarding is needed? Typically, the client computer running the web interface (e.g., IP 10.50.7.103) and the remote server (e.g., IP 10.50.60.6) are on different machines. Due to Chrome's restrictions, although vs-code-server (http://10.50.60.6:8080) can be accessed, advanced features (file browsing, Jupyter, etc.) are not permitted. Solution Not recommended: Configure HTTPS upgrade, i.e., (https://10.50.60.6:8080), but this requires configuring SSL certificates on the remote server, which is cumbersome. Recommended: Forward the website port (http://10.50.60.6:8080) to the local machine. Forward the remote server's port 8080 (http://10.50.60.6:8080) to the local machine (http://localhost:8080, i.e., http://10.50.7.103:8080). Chrome browser can then access it normally. This is because Chrome has no restrictions on accessing localhost. ssh -L 8080:10.50.60.6:8080 username@10.50.60.6 Operating Steps Windows client computers can perform the following operations. Remember to replace the IP addresses with the actual server address and port. Client Operating System Server Firewall Port 8080 Proxy Method Windows Allow netsh interface portproxy add v4tov4 listenaddress=127.0.0.1 listenport=8080 connectaddress=10.50.60.6 connectport=8080 Linux Allow socat TCP-LISTEN:8080,bind=127.0.0.1,fork TCP:10.50.60.6:8080 General (SSH Tunnel) Closed ssh -L 8080:10.50.60.6:8080 username@10.50.60.6","title":"Bug Fix"},{"location":"en/%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/bug_fix/#patch-linux-host-docker-if-need","text":"Why patch: This docker image is build in Windows host, somehow, have problems in linux host. If you server is Linux. $ nvidia-smi #should see the GPUs, errors `not found libnvidia-ml.so.1` should patch. So that you can enter the Docker container, and try this patch. cd /usr/lib/x86_64-linux-gnu ln -sf libnvidia-ml.so.5* libnvidia-ml.so.1 ln -sf libnvidia-ml.so.5* libnvidia-ml.so ln -sf libcuda.so.5* libcuda.so.1 #optional ln -sf libcudadebugger.so.5* libcudadebugger.so.1 #optional ldconfig You can check if torch is working properly python -c \"import torch; print(torch.zeros(3,3).cuda())\"","title":"Patch: Linux Host Docker (If need)"},{"location":"en/%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/bug_fix/#patch-lilab-pkg-if-need","text":"Why patch: The docker is not support NVIDIA Video Decoder/Encoder. But the main LILAB-pkg use the NVIDIA Video packages. So the docker should downgrade to the CPU video package. Whenever you update the LILAB-pkg from github, do this patch. cp -r /root/Downloads/pipeline/LILAB-pkg-patch-for-docker/* ~/LILAB-pkg/","title":"Patch: LILAB-pkg (If need)"},{"location":"en/%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/bug_fix/#host-port-8080-already-in-use","text":"If you encounter the error \"Error starting userland proxy: listen tcp 0.0.0.0:8080: bind: address already in use\" when running the following command, it means that port 8080 on the host is already occupied. docker run --rm -it -p 8080:8080 ... You need to modify the port mapping to another port (e.g., 8081, http://localhost:8081/), for example: docker run --rm -it -p 8081:8080 ...","title":"Host Port 8080 Already in Use"},{"location":"en/%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/bug_fix/#forward-remote-server-port-8080-to-local","text":"You can skip this step if you are using Windows Docker. Why forwarding is needed? Typically, the client computer running the web interface (e.g., IP 10.50.7.103) and the remote server (e.g., IP 10.50.60.6) are on different machines. Due to Chrome's restrictions, although vs-code-server (http://10.50.60.6:8080) can be accessed, advanced features (file browsing, Jupyter, etc.) are not permitted. Solution Not recommended: Configure HTTPS upgrade, i.e., (https://10.50.60.6:8080), but this requires configuring SSL certificates on the remote server, which is cumbersome. Recommended: Forward the website port (http://10.50.60.6:8080) to the local machine. Forward the remote server's port 8080 (http://10.50.60.6:8080) to the local machine (http://localhost:8080, i.e., http://10.50.7.103:8080). Chrome browser can then access it normally. This is because Chrome has no restrictions on accessing localhost. ssh -L 8080:10.50.60.6:8080 username@10.50.60.6 Operating Steps Windows client computers can perform the following operations. Remember to replace the IP addresses with the actual server address and port. Client Operating System Server Firewall Port 8080 Proxy Method Windows Allow netsh interface portproxy add v4tov4 listenaddress=127.0.0.1 listenport=8080 connectaddress=10.50.60.6 connectport=8080 Linux Allow socat TCP-LISTEN:8080,bind=127.0.0.1,fork TCP:10.50.60.6:8080 General (SSH Tunnel) Closed ssh -L 8080:10.50.60.6:8080 username@10.50.60.6","title":"Forward Remote Server Port 8080 to Local"},{"location":"en/%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/","text":"What's the \"SocialSeq pipeline playground\"? The SocialSeq pipeline playground is a docker container based virtual machine designed to help users understand the functionality and logic of the SocialSeq through a series of demonstration data processing tasks. The complete pipeline includes model packaging, raw data processing, and result visualization, allowing you to explore: Use the web browser to explore the social-seq playground. Note The playground is only used to demonstrate the inference process of each model in the SocialSeq framework, and does not include model training. For subsequent data analysis, please refer to the document - Article Figure Reproduction . System Requirements SocialSeq has been tested on the following configurations: Windows 10 (with WSL2) + x86_64 + NVIDIA RTX4090 Debian 11 + x86_64 + NVIDIA A100 Ubuntu 20.04 + x86_64 + NVIDIA RTX3090 Prerequisites, Docker and Nvidia Driver should be installed. $ docker --version # Docker version should be >= 24.0.6 $ nvidia-smi # NVIDIA driver version should be >= 550.54 Installation You need to set up Docker and download the models and data files: Name Type Download link lilab_socialseq_pipeline_cuda_vscode_amd64_20250903.tar docker image Download\ud83d\udd17 lilab_socialseq_pipeline_code_with_data_20250903.zip docker image Same above $ cd SOCIAL_SEQ_DOWNLOAD_PATH $ docker load -i ./lilab_socialseq_pipeline_cuda_vscode_amd64_2025*.tar $ docker images | grep lilab # resulting in an image file named 'lilab*' $ unzip lilab_socialseq_pipeline_code_with_data_2025*.zip -d ./pipeline # Unzip file $ ls ./pipeline/1-Ball_Calibration # Check path $ docker run --rm -it -p 8080 :8080 \\ --gpus all \\ --name lilab_socialseq \\ -e PASSWORD = 2025cxf \\ -v ./pipeline:/root/Downloads/pipeline \\ lilab/socialseq:codeserver-cuda-tensorrt-torch-tensorflow-mmdet-mmpose-dannce-yolo-20250903 \\ /app/code-server/bin/code-server Navigate to http://localhost:8080 and enter the PASSWORD 2025cxf to access the VS Code server environment where you can view, edit, and run SocialSeq code. If you're running Docker on a remote server, you should forward port 8080 to your local machine. See the [bug fix documentation] for more information. Or use docker terminal $ docker exec -it lilab_socialseq bash Environment Verification In the Docker VS Code server environment at http://localhost:8080 : $ nvidia-smi # within docker container, should display GPU information Error If you encounter errors like not found libnvidia-ml.so.1 , this is normal because the nvidia driver paths are different between Windows and Linux in docker. Refer to the [bug fix documentation] for solutions. Model Initialization Convert deep learning models to TensorRT for improved performance. Since TensorRT models are bound to specific systems and hardware, this step must be performed on each new machine. Note This step only needs to be performed once per machine. The conversion process will take ~20 minutes. bash /root/Downloads/pipeline/model_dannce/convert_dannce_hdf5_to_tensorrt.sh bash /root/Downloads/pipeline/model_mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9/convert_mmdet_model_to_tensorrt.sh bash /root/Downloads/pipeline/model_mmpose/convert_mmpose_model_to_tensorrt.sh bash /root/Downloads/pipeline/model_YOLOv8/convert_yolov8seg_to_tensorrt.sh # Patch the LILAB-pkg package cp -r /root/Downloads/pipeline/LILAB-pkg-patch-for-docker/* ~/LILAB-pkg/ After running these commands, you will generate: model_mmpose/latest.full.engine model_dannce/DANNCE/train_results/MAX/latest.engine model_YOLOv8/last.full.engine model_mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9/latest.trt All set! You're now ready to run the SocialSeq pipeline playground with demo data. Quick Start Once you've completed the installation steps above, you can begin running the SocialSeq pipeline components using the instructions in the following sections. 1. Ball Calibration Using a ball as a calibration target provides better visibility than a chessboard, enabling faster extrinsic calibration of multi-camera systems. For detailed information, refer to the documentation . bash /root/Downloads/pipeline/1-Ball_Calibration/run_task.sh 2. Social 3D Pose (SOCIAL) Processing multi-camera animal videos through Mask R-CNN for animal identification and segmentation, followed by DANNCE for 3D pose keypoint inference, and SmoothNet for motion keypoint smoothing. For detailed information, refer to the documentation . bash /root/Downloads/pipeline/2-Social_3D_Pose/run_task_segmentation.sh # Mask R-CNN for ID segmentation bash /root/Downloads/pipeline/2-Social_3D_Pose/run_task_keypoint.sh # DANNCE and SmoothNet for 3D pose reconstruction 3. Sequence Labeling (SEQ) Extracting social-related features from 3D poses and segmenting them (0.8 seconds per segment). Using a Seq2seq-FCN model to classify each video segment, resulting in consistent social sequence labels. For detailed information, refer to the documentation . bash /root/Downloads/pipeline/3-Sequence_Labeling/run_task.sh 4. Closed-Loop Control (LIVE) (Coming Soon): Establishing a real-time behavior analysis system with closed-loop feedback. This will involve multi-camera perception and recognition of animal social behaviors to establish optogenetic conditional stimulation. Not yet added to the playground, preparation in progress","title":"Install & Run"},{"location":"en/%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#whats-the-socialseq-pipeline-playground","text":"The SocialSeq pipeline playground is a docker container based virtual machine designed to help users understand the functionality and logic of the SocialSeq through a series of demonstration data processing tasks. The complete pipeline includes model packaging, raw data processing, and result visualization, allowing you to explore: Use the web browser to explore the social-seq playground. Note The playground is only used to demonstrate the inference process of each model in the SocialSeq framework, and does not include model training. For subsequent data analysis, please refer to the document - Article Figure Reproduction .","title":"What's the \"SocialSeq pipeline playground\"?"},{"location":"en/%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#system-requirements","text":"SocialSeq has been tested on the following configurations: Windows 10 (with WSL2) + x86_64 + NVIDIA RTX4090 Debian 11 + x86_64 + NVIDIA A100 Ubuntu 20.04 + x86_64 + NVIDIA RTX3090 Prerequisites, Docker and Nvidia Driver should be installed. $ docker --version # Docker version should be >= 24.0.6 $ nvidia-smi # NVIDIA driver version should be >= 550.54","title":"System Requirements"},{"location":"en/%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#installation","text":"You need to set up Docker and download the models and data files: Name Type Download link lilab_socialseq_pipeline_cuda_vscode_amd64_20250903.tar docker image Download\ud83d\udd17 lilab_socialseq_pipeline_code_with_data_20250903.zip docker image Same above $ cd SOCIAL_SEQ_DOWNLOAD_PATH $ docker load -i ./lilab_socialseq_pipeline_cuda_vscode_amd64_2025*.tar $ docker images | grep lilab # resulting in an image file named 'lilab*' $ unzip lilab_socialseq_pipeline_code_with_data_2025*.zip -d ./pipeline # Unzip file $ ls ./pipeline/1-Ball_Calibration # Check path $ docker run --rm -it -p 8080 :8080 \\ --gpus all \\ --name lilab_socialseq \\ -e PASSWORD = 2025cxf \\ -v ./pipeline:/root/Downloads/pipeline \\ lilab/socialseq:codeserver-cuda-tensorrt-torch-tensorflow-mmdet-mmpose-dannce-yolo-20250903 \\ /app/code-server/bin/code-server Navigate to http://localhost:8080 and enter the PASSWORD 2025cxf to access the VS Code server environment where you can view, edit, and run SocialSeq code. If you're running Docker on a remote server, you should forward port 8080 to your local machine. See the [bug fix documentation] for more information. Or use docker terminal $ docker exec -it lilab_socialseq bash","title":"Installation"},{"location":"en/%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#environment-verification","text":"In the Docker VS Code server environment at http://localhost:8080 : $ nvidia-smi # within docker container, should display GPU information Error If you encounter errors like not found libnvidia-ml.so.1 , this is normal because the nvidia driver paths are different between Windows and Linux in docker. Refer to the [bug fix documentation] for solutions.","title":"Environment Verification"},{"location":"en/%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#model-initialization","text":"Convert deep learning models to TensorRT for improved performance. Since TensorRT models are bound to specific systems and hardware, this step must be performed on each new machine. Note This step only needs to be performed once per machine. The conversion process will take ~20 minutes. bash /root/Downloads/pipeline/model_dannce/convert_dannce_hdf5_to_tensorrt.sh bash /root/Downloads/pipeline/model_mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9/convert_mmdet_model_to_tensorrt.sh bash /root/Downloads/pipeline/model_mmpose/convert_mmpose_model_to_tensorrt.sh bash /root/Downloads/pipeline/model_YOLOv8/convert_yolov8seg_to_tensorrt.sh # Patch the LILAB-pkg package cp -r /root/Downloads/pipeline/LILAB-pkg-patch-for-docker/* ~/LILAB-pkg/ After running these commands, you will generate: model_mmpose/latest.full.engine model_dannce/DANNCE/train_results/MAX/latest.engine model_YOLOv8/last.full.engine model_mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9/latest.trt All set! You're now ready to run the SocialSeq pipeline playground with demo data.","title":"Model Initialization"},{"location":"en/%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#quick-start","text":"Once you've completed the installation steps above, you can begin running the SocialSeq pipeline components using the instructions in the following sections.","title":"Quick Start"},{"location":"en/%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#1-ball-calibration","text":"Using a ball as a calibration target provides better visibility than a chessboard, enabling faster extrinsic calibration of multi-camera systems. For detailed information, refer to the documentation . bash /root/Downloads/pipeline/1-Ball_Calibration/run_task.sh","title":"1. Ball Calibration"},{"location":"en/%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#2-social-3d-pose-social","text":"Processing multi-camera animal videos through Mask R-CNN for animal identification and segmentation, followed by DANNCE for 3D pose keypoint inference, and SmoothNet for motion keypoint smoothing. For detailed information, refer to the documentation . bash /root/Downloads/pipeline/2-Social_3D_Pose/run_task_segmentation.sh # Mask R-CNN for ID segmentation bash /root/Downloads/pipeline/2-Social_3D_Pose/run_task_keypoint.sh # DANNCE and SmoothNet for 3D pose reconstruction","title":"2. Social 3D Pose (SOCIAL)"},{"location":"en/%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#3-sequence-labeling-seq","text":"Extracting social-related features from 3D poses and segmenting them (0.8 seconds per segment). Using a Seq2seq-FCN model to classify each video segment, resulting in consistent social sequence labels. For detailed information, refer to the documentation . bash /root/Downloads/pipeline/3-Sequence_Labeling/run_task.sh","title":"3. Sequence Labeling (SEQ)"},{"location":"en/%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#4-closed-loop-control-live-coming-soon","text":"Establishing a real-time behavior analysis system with closed-loop feedback. This will involve multi-camera perception and recognition of animal social behaviors to establish optogenetic conditional stimulation. Not yet added to the playground, preparation in progress","title":"4. Closed-Loop Control (LIVE) (Coming Soon):"},{"location":"en/%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/application/","text":"Overview of Ball Calibration The ball calibration process was developed using a ball, achieving fast and accurate multi-camera calibration. For details, you can also refer to multiview_ball_calib . Here, we only present the general process. Why Use a Ball for Calibration Calculating the extrinsic parameters (position and rotation angle) of multiple cameras is essential for establishing an accurate 3D coordinate model. Traditional checkerboard extrinsic calibration methods require multiple cameras to simultaneously capture the front pattern of the checkerboard, but in a surround multi-camera configuration, there are viewing angle limitations. The application efficiency of checkerboards is low, while using a ball is more efficient. Experimental Procedure Create a metal target ball with a diameter of 1.5 cm, suspended by a short rod. Before the experiment, place a checkerboard on the ground at the center of the recording environment to align the coordinate system. Initially, place the target ball away from the checkerboard to avoid occlusion. Then, start recording and traverse the ball around the rat's activity space for 2 minutes. Use OBS Studio software to capture multi-view videos, ensuring the ball's motion trajectory covers the spatial positions that need calibration. Important Warning The ball's diameter affects calibration accuracy. It is recommended to use a metal target ball with a diameter of 1.5 cm. The ball's movement speed should not be too fast, otherwise motion blur will occur, affecting calibration accuracy. Video Analysis with Code #!/bin/bash conda activate mmdet vfile = '/PATH_to_ball/BALL____2024-01-22_14-34-01.mp4' LILAB_DIR = /home/liying_lab/chenxf/ml-project/LILAB-py/lilab bash $LILAB_DIR /multiview_scripts_dev/p_calibration.sh $vfile carl Where vfile is the video file path recorded by OBS Studio software, and carl is the camera calibration parameter. The script will automatically analyze the video and generate calibration results. Common camera calibration parameters include: - ana : Rat Behavior Room 1 - bob : Rat Behavior Room 2 / Small Bucket - carl : Rat Behavior Room 3 / Medium & Large Bucket. Important Warning Please check the correct camera calibration parameters, which store the pre-\"calibrated memory\". Each multi-camera system's memory differs significantly. Do not confuse them, otherwise it will lead to inaccurate calibration results. Calibration Result Display Check the green prediction points' fit with the ball in the generated *ball_keypoint.mp4 . The generated *.calibpkl is the multi-camera model file used for subsequent 3D reconstruction. Calibration Accuracy Evaluation Check the code execution output. The Reprojection errors represent the reprojection error, which is the distance between the predicted point and the actual point. The smaller the error, the higher the calibration accuracy. Typically, it is allowed within 4.0+-2.0 pixels. Error If the output error pixel is too large when running p_calibration.sh/the green points in the keypoint video cannot correctly follow the ball, it indicates incorrect calibration. This could be due to a large deviation in 2D ball recognition. Re-labeling is required, see \"Ball Augmentation Training\".","title":"Applications"},{"location":"en/%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/application/#overview-of-ball-calibration","text":"The ball calibration process was developed using a ball, achieving fast and accurate multi-camera calibration. For details, you can also refer to multiview_ball_calib . Here, we only present the general process.","title":"Overview of Ball Calibration"},{"location":"en/%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/application/#why-use-a-ball-for-calibration","text":"Calculating the extrinsic parameters (position and rotation angle) of multiple cameras is essential for establishing an accurate 3D coordinate model. Traditional checkerboard extrinsic calibration methods require multiple cameras to simultaneously capture the front pattern of the checkerboard, but in a surround multi-camera configuration, there are viewing angle limitations. The application efficiency of checkerboards is low, while using a ball is more efficient.","title":"Why Use a Ball for Calibration"},{"location":"en/%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/application/#experimental-procedure","text":"Create a metal target ball with a diameter of 1.5 cm, suspended by a short rod. Before the experiment, place a checkerboard on the ground at the center of the recording environment to align the coordinate system. Initially, place the target ball away from the checkerboard to avoid occlusion. Then, start recording and traverse the ball around the rat's activity space for 2 minutes. Use OBS Studio software to capture multi-view videos, ensuring the ball's motion trajectory covers the spatial positions that need calibration. Important Warning The ball's diameter affects calibration accuracy. It is recommended to use a metal target ball with a diameter of 1.5 cm. The ball's movement speed should not be too fast, otherwise motion blur will occur, affecting calibration accuracy.","title":"Experimental Procedure"},{"location":"en/%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/application/#video-analysis-with-code","text":"#!/bin/bash conda activate mmdet vfile = '/PATH_to_ball/BALL____2024-01-22_14-34-01.mp4' LILAB_DIR = /home/liying_lab/chenxf/ml-project/LILAB-py/lilab bash $LILAB_DIR /multiview_scripts_dev/p_calibration.sh $vfile carl Where vfile is the video file path recorded by OBS Studio software, and carl is the camera calibration parameter. The script will automatically analyze the video and generate calibration results. Common camera calibration parameters include: - ana : Rat Behavior Room 1 - bob : Rat Behavior Room 2 / Small Bucket - carl : Rat Behavior Room 3 / Medium & Large Bucket. Important Warning Please check the correct camera calibration parameters, which store the pre-\"calibrated memory\". Each multi-camera system's memory differs significantly. Do not confuse them, otherwise it will lead to inaccurate calibration results.","title":"Video Analysis with Code"},{"location":"en/%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/application/#calibration-result-display","text":"Check the green prediction points' fit with the ball in the generated *ball_keypoint.mp4 . The generated *.calibpkl is the multi-camera model file used for subsequent 3D reconstruction.","title":"Calibration Result Display"},{"location":"en/%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/application/#calibration-accuracy-evaluation","text":"Check the code execution output. The Reprojection errors represent the reprojection error, which is the distance between the predicted point and the actual point. The smaller the error, the higher the calibration accuracy. Typically, it is allowed within 4.0+-2.0 pixels. Error If the output error pixel is too large when running p_calibration.sh/the green points in the keypoint video cannot correctly follow the ball, it indicates incorrect calibration. This could be due to a large deviation in 2D ball recognition. Re-labeling is required, see \"Ball Augmentation Training\".","title":"Calibration Accuracy Evaluation"},{"location":"en/%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/","text":"Ball Video Augmentation Training Screenshot Capture screenshots in pot player and store them in a unified location. Retrieve Source Video Screenshots /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/outlier_refine/process_ball_dzy.sh Labeling Use labelme for labeling. This is an example of a labelme annotated json file. { \"version\": \"4.2.5\", \"flags\": {}, \"shapes\": [ { \"label\": \"ball\", \"points\": [ [ 226.4642857142857, 410.74999999999994 ] ], \"group_id\": null, \"shape_type\": \"point\", \"flags\": {} } ], \"imagePath\": \"2024-02-27_21-59-28ball_bob_room2_pannel8_002675.jpg\", \"imageData\": null, \"imageHeight\": 800, \"imageWidth\": 1280 } Important Warning Please use labelme's point type, not rectangle type, as the point type can more accurately label the ball's position. The label should be named ball . Please ensure the correct label name is used during labeling. Rename the Data Folder and Place it in the Specified Location /home/liying_lab/chenxinfeng/DATA/mmpose/data/ball labelme Format Conversion python -m lilab.cvutils.labelme_to_cocokeypoints_ball $LABEL_IMG_DIR Training /home/liying_lab/chenxinfeng/DATA/mmpose/res50_coco_ball_512x320_cam9.py Modify the code to add the new data folder and json file address to the new dict. cd /home/liying_lab/chenxinfeng/DATA/mmpose python tools/train.py res50_coco_ball_512x320_cam9.py Model Acceleration /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/mmpose_dev/convert_model.sh Modify the corresponding model filename to the variable. Confirmation Check if there are new json files, etc. in /home/liying_lab/chenxinfeng/DATA/mmpose/work_dirs and the update time of latest.* Re-run the Ball Positioning Code from Scratch /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/multiview_scripts_dev/calibration.sh","title":"Dataset & Model Updates"},{"location":"en/%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#ball-video-augmentation-training","text":"","title":"Ball Video Augmentation Training"},{"location":"en/%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#screenshot","text":"Capture screenshots in pot player and store them in a unified location.","title":"Screenshot"},{"location":"en/%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#retrieve-source-video-screenshots","text":"/home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/outlier_refine/process_ball_dzy.sh","title":"Retrieve Source Video Screenshots"},{"location":"en/%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#labeling","text":"Use labelme for labeling. This is an example of a labelme annotated json file. { \"version\": \"4.2.5\", \"flags\": {}, \"shapes\": [ { \"label\": \"ball\", \"points\": [ [ 226.4642857142857, 410.74999999999994 ] ], \"group_id\": null, \"shape_type\": \"point\", \"flags\": {} } ], \"imagePath\": \"2024-02-27_21-59-28ball_bob_room2_pannel8_002675.jpg\", \"imageData\": null, \"imageHeight\": 800, \"imageWidth\": 1280 } Important Warning Please use labelme's point type, not rectangle type, as the point type can more accurately label the ball's position. The label should be named ball . Please ensure the correct label name is used during labeling.","title":"Labeling"},{"location":"en/%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#rename-the-data-folder-and-place-it-in-the-specified-location","text":"/home/liying_lab/chenxinfeng/DATA/mmpose/data/ball","title":"Rename the Data Folder and Place it in the Specified Location"},{"location":"en/%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#labelme-format-conversion","text":"python -m lilab.cvutils.labelme_to_cocokeypoints_ball $LABEL_IMG_DIR","title":"labelme Format Conversion"},{"location":"en/%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#training","text":"/home/liying_lab/chenxinfeng/DATA/mmpose/res50_coco_ball_512x320_cam9.py Modify the code to add the new data folder and json file address to the new dict. cd /home/liying_lab/chenxinfeng/DATA/mmpose python tools/train.py res50_coco_ball_512x320_cam9.py","title":"Training"},{"location":"en/%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#model-acceleration","text":"/home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/mmpose_dev/convert_model.sh Modify the corresponding model filename to the variable.","title":"Model Acceleration"},{"location":"en/%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#confirmation","text":"Check if there are new json files, etc. in /home/liying_lab/chenxinfeng/DATA/mmpose/work_dirs and the update time of latest.*","title":"Confirmation"},{"location":"en/%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#re-run-the-ball-positioning-code-from-scratch","text":"/home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/multiview_scripts_dev/calibration.sh","title":"Re-run the Ball Positioning Code from Scratch"},{"location":"en/%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/process/","text":"Code Process Calibration of multi-camera models. The input is a video file, and the output is the calibration result. #!/bin/bash conda activate mmdet vfile = '/PATH_to_ball/BALL____2024-01-22_14-34-01.mp4' LILAB_DIR = /home/liying_lab/chenxf/ml-project/LILAB-py/lilab bash $LILAB_DIR /multiview_scripts_dev/p_calibration.sh $vfile carl Here, vfile is the path to the video file recorded by OBS Studio software, and carl is the camera calibration parameter. The script will automatically parse the video and generate the calibration result. Commonly used camera calibration parameters include: ana : Rat behavior room 1 bob : Rat behavior room 2 / Small bucket carl : Rat behavior room 2 / Medium & Large bucket.","title":"Workflow"},{"location":"en/%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/process/#code-process","text":"Calibration of multi-camera models. The input is a video file, and the output is the calibration result. #!/bin/bash conda activate mmdet vfile = '/PATH_to_ball/BALL____2024-01-22_14-34-01.mp4' LILAB_DIR = /home/liying_lab/chenxf/ml-project/LILAB-py/lilab bash $LILAB_DIR /multiview_scripts_dev/p_calibration.sh $vfile carl Here, vfile is the path to the video file recorded by OBS Studio software, and carl is the camera calibration parameter. The script will automatically parse the video and generate the calibration result. Commonly used camera calibration parameters include: ana : Rat behavior room 1 bob : Rat behavior room 2 / Small bucket carl : Rat behavior room 2 / Medium & Large bucket.","title":"Code Process"},{"location":"en/%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/application/","text":"Social 3D Pose Reconstruction Raw multi-view videos, after segmentation , keypoint reconstruction and smoothing , obtain stable 3D pose coordinates. Raw Video The video comes from OBS Studio recorded 9-view camera video. The multi-camera images have been time-synchronized, with an error of 1 frame or less, which can be ignored. Segmentation Using the Mask-RCNN model, the identity of black and white rats is recognized, and the pixel area is segmented. Keypoint Reconstruction Execute DANNCE keypoint prediction + neural network smoothing to obtain 3D pose.","title":"Applications"},{"location":"en/%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/application/#social-3d-pose-reconstruction","text":"Raw multi-view videos, after segmentation , keypoint reconstruction and smoothing , obtain stable 3D pose coordinates.","title":"Social 3D Pose Reconstruction"},{"location":"en/%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/application/#raw-video","text":"The video comes from OBS Studio recorded 9-view camera video. The multi-camera images have been time-synchronized, with an error of 1 frame or less, which can be ignored.","title":"Raw Video"},{"location":"en/%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/application/#segmentation","text":"Using the Mask-RCNN model, the identity of black and white rats is recognized, and the pixel area is segmented.","title":"Segmentation"},{"location":"en/%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/application/#keypoint-reconstruction","text":"Execute DANNCE keypoint prediction + neural network smoothing to obtain 3D pose.","title":"Keypoint Reconstruction"},{"location":"en/%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/","text":"Dataset Creation & Model Update Annotate Rat Segmentation First, use the Labelme software for data annotation. Use the Polygon tool to create labels for black rat rat_black and white rat rat_white . Update Segmentation Model Run the following code line by line, where mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9.py is the model configuration file (default, recommended). If needed, it can be changed to other model configurations. # 1. Data preparation: labelme to coco # su chenxinfeng conda activate DEEPLABCUT # Rename the labelme data annotation folder project. ## Note 1: The folder should not have Chinese characters, and the labeled images should not have Chinese characters. ## Note 2: The number of labeled images n>20 to ensure training effect. LABEL_ME_POJECT = /mnt/liying.cibr.ac.cn_xxx/labelimages NEW_NAME = /mnt/liying.cibr.ac.cn_xxx/bw_rat_1280x800_20230524 mv $LABEL_ME_POJECT $NEW_NAME # Convert the labelme data annotation folder project to coco dataset format. # Note: The category names should be checked in MMDET_DATA_TARGET, do not write them randomly. python -m lilab.cvutils.labelme_to_coco $NEW_NAME # Split the coco dataset into training set and validation set. The -s parameter indicates the proportion of the training set, 0.8 or 0.9 is commonly used. python -m lilab.cvutils.coco_split -s 0 .9 ${ NEW_NAME } _trainval.json # Copy the labeled dataset to the mmdet dataset directory MMDET_DATA_TARGET = /home/liying_lab/chenxinfeng/DATA/CBNetV2/data/rats cp -r ${ NEW_NAME } _trainval.json ${ NEW_NAME } _train.json ${ NEW_NAME } _val.json \\ ${ NEW_NAME } $MMDET_DATA_TARGET / # 2. Model training conda activate mmpose cd /home/liying_lab/chenxinfeng/DATA/CBNetV2/ # Modify the configuration file, open it with vscode. # Modify the `data` field to point to the coco dataset directory just copied. CONFIG = $PWD /mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9.py echo $CONFIG # Use multi GPU or single GPU to train the model # tools/dist_train.sh $CONFIG 4 python tools/train.py $CONFIG # 3. Model acceleration python -m lilab.mmdet_dev.convert_mmdet2trt $CONFIG # 4. Check if the model update is successful ls -lh work_dirs/mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9/latest.* Finally, the updated latest.trt model weight file is obtained. Annotate Rat 3D Keypoints First, use Label3D_Manager for data annotation. Label3D_manager is a modified version of the official version to adapt to videos recorded by OBS, and it already uses 14 keypoints of rats. You should get the anno.mat file, which contains the annotated 3D keypoint information. Prepare Dataset Trae \u6211\u9700\u8981\u67e5\u770b\"\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u91cd\u6784/application.md\"\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u4ee5\u4fbf\u8fdb\u884c\u7ffb\u8bd1\u3002\u6211\u5c06\u4f7f\u7528view_files\u5de5\u5177\u67e5\u770b\u8be5\u6587\u4ef6\u7684\u524d50\u884c\u5185\u5bb9\u3002 docs/\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u91cd\u6784/application.md 1 - 50 \u6211\u9700\u8981\u67e5\u770b\"\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u91cd\u6784/dataset.md\"\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u4ee5\u4fbf\u8fdb\u884c\u7ffb\u8bd1\u3002\u6211\u5c06\u4f7f\u7528view_files\u5de5\u5177\u67e5\u770b\u8be5\u6587\u4ef6\u7684\u524d50\u884c\u5185\u5bb9\u3002 docs/\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u91cd\u6784/dataset.md 1 - 50 \u6211\u9700\u8981\u68c0\u67e5\u82f1\u6587\u76ee\u5f55\u4e2d\u662f\u5426\u5df2\u5b58\u5728\"\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u91cd\u6784/application.md\"\u6587\u4ef6\uff0c\u82e5\u4e0d\u5b58\u5728\u5219\u521b\u5efa\u5b83\u5e76\u7ffb\u8bd1\u5185\u5bb9\u3002\u6211\u5c06\u4f7f\u7528list_dir\u5de5\u5177\u67e5\u770b\"/Users/chenxinfeng/ml-project/CIBR_Social_Seq/docs/en/\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u91cd\u6784\"\u76ee\u5f55\u3002 CIBR_Social_Seq/docs/en/\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u91cd\u6784 I will translate the content of \"\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u91cd\u6784/application.md\" and \"\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u91cd\u6784/dataset.md\" and create new files in the corresponding English directory. Social 3D Pose Reconstruction Raw multi-view videos, after segmentation , keypoint reconstruction and smoothing , obtain stable 3D pose coordinates. Raw Video The video comes from OBS Studio recorded 9-view camera video. The multi-camera images have been time-synchronized, with an error of 1 frame or less, which can be ignored. Segmentation Using the Mask-RCNN model, the identity of black and white rats is recognized, and the pixel area is segmented. Keypoint Reconstruction Execute DANNCE keypoint prediction + neural network smoothing to obtain 3D pose. Dataset Creation & Model Update Annotate Rat Segmentation First, use the Labelme software for data annotation. Use the Polygon tool to create labels for black rat rat_black and white rat rat_white . Update Segmentation Model Run the following code line by line, where mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9.py is the model configuration file (default, recommended). If needed, it can be changed to other model configurations. # 1. Data preparation: labelme to coco # su chenxinfeng conda activate DEEPLABCUT # Rename the labelme data annotation folder project. ## Note 1: The folder should not have Chinese characters, and the labeled images should not have Chinese characters. ## Note 2: The number of labeled images n>20 to ensure training effect. LABEL_ME_POJECT = /mnt/liying.cibr.ac.cn_xxx/labelimages NEW_NAME = /mnt/liying.cibr.ac.cn_xxx/bw_rat_1280x800_20230524 mv $LABEL_ME_POJECT $NEW_NAME # Convert the labelme data annotation folder project to coco dataset format. # Note: The category names should be checked in MMDET_DATA_TARGET, do not write them randomly. python -m lilab.cvutils.labelme_to_coco $NEW_NAME # Split the coco dataset into training set and validation set. The -s parameter indicates the proportion of the training set, 0 .8 or 0 .9 is commonly used. python -m lilab.cvutils.coco_split -s 0 .9 ${ NEW_NAME } _trainval.json # Copy the labeled dataset to the mmdet dataset directory MMDET_DATA_TARGET = /home/liying_lab/chenxinfeng/DATA/CBNetV2/data/rats cp -r ${ NEW_NAME } _trainval.json ${ NEW_NAME } _train.json ${ NEW_NAME } _val.json \\ ${ NEW_NAME } $MMDET_DATA_TARGET / # 2. Model training conda activate mmpose cd /home/liying_lab/chenxinfeng/DATA/CBNetV2/ # Modify the configuration file, open it with vscode. # Modify the `data` field to point to the coco dataset directory just copied. CONFIG = $PWD /mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9.py echo $CONFIG # Use multi GPU or single GPU to train the model # tools/dist_train.sh $CONFIG 4 python tools/train.py $CONFIG # 3. Model acceleration python -m lilab.mmdet_dev.convert_mmdet2trt $CONFIG # 4. Check if the model update is successful ls -lh work_dirs/mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9/latest.* Finally, the updated latest.trt model weight file is obtained. Annotate Rat 3D Keypoints First, use Label3D_Manager for data annotation. Label3D_manager is a modified version of the official version to adapt to videos recorded by OBS, and it already uses 14 keypoints of rats. You should get the anno.mat file, which contains the annotated 3D keypoint information. Prepare Dataset conda activate mmdet source='/mnt/liying.cibr.ac.cn_usb3/wsy/ysj/segpkl/outframes' datadir='/home/liying_lab/chenxinfeng/DATA/dannce/data/bw_rat_1280x800x9_2024-11-27_photometry_voxel' cp -r $source $datadir python -m lilab.dannce.s1_anno2dataset $datadir/anno.mat # Find the generated *_voxel_anno_dannce.pkl, use the code to correct its body center point (using the 2D mask center point, triangulated to get the 3D center point). python -m lilab.dannce.p2_dataset_com3d_refine_byseg ${datadir}_anno_dannce.pkl Train DANNCE Model Run the following code line by line to train the model. Where rat14_1280x800x9_mono_young is a project environment that has been created (recommended). According to requirements, other projects can also be selected. # cd into the project path cd /home/liying_lab/chenxinfeng/DATA/dannce/demo/rat14_1280x800x9_mono_young # Change the project configuration file, add the dataset path. echo io_max.yaml # Modify io_max.yaml, add data to exp/label3d_file python -m dannce.cli_train ../../configs/dannce_rat14_1280x800x9_max_config.yaml Convert the model to a tensorrt accelerated model. # Offline scenario. cd /home/liying_lab/chenxinfeng/DATA/dannce/demo/rat14_1280x800x9_mono_young/DANNCE/ train_results/MAX python -m lilab.dannce.t1_keras2onnx latest.hdf5 choosecuda 3 ,0,1,2 polygraphy run /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/tensorrt/ constrained_network.py \\ --precision-constraints obey \\ --trt-min-shapes input_1: [ 1 ,64,64,64,9 ] \\ --trt-max-shapes input_1: [ 4 ,64,64,64,9 ] \\ --trt-opt-shapes input_1: [ 2 ,64,64,64,9 ] \\ --trt --fp16 --save-engine latest_dynamic.engine & choosecuda 0 ,1,2,3 polygraphy run /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/tensorrt/ constrained_network.py \\ --precision-constraints obey \\ --input-shapes input_1: [ 2 ,64,64,64,9 ] \\ \\ --trt --fp16 --save-engine latest.engine & # Realtime scenario python -m lilab.dannce.t1_keras2onnx_rt latest.hdf5 choosecuda 1 ,2,3,0 polygraphy run /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/tensorrt/ constrained_network_rt.py \\ --precision-constraints obey \\ --trt-min-shapes input_1: [ 1 ,64,64,64,9 ] \\ --trt-max-shapes input_1: [ 2 ,64,64,64,9 ] \\ --trt-opt-shapes input_1: [ 1 ,64,64,64,9 ] \\ --trt --fp16 --save-engine latest.idx.engine wait Finally, latest_dynamic.engine and latest.idx.engine are obtained.","title":"Dataset & Model Updates"},{"location":"en/%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/#dataset-creation-model-update","text":"","title":"Dataset Creation &amp; Model Update"},{"location":"en/%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/#annotate-rat-segmentation","text":"First, use the Labelme software for data annotation. Use the Polygon tool to create labels for black rat rat_black and white rat rat_white .","title":"Annotate Rat Segmentation"},{"location":"en/%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/#update-segmentation-model","text":"Run the following code line by line, where mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9.py is the model configuration file (default, recommended). If needed, it can be changed to other model configurations. # 1. Data preparation: labelme to coco # su chenxinfeng conda activate DEEPLABCUT # Rename the labelme data annotation folder project. ## Note 1: The folder should not have Chinese characters, and the labeled images should not have Chinese characters. ## Note 2: The number of labeled images n>20 to ensure training effect. LABEL_ME_POJECT = /mnt/liying.cibr.ac.cn_xxx/labelimages NEW_NAME = /mnt/liying.cibr.ac.cn_xxx/bw_rat_1280x800_20230524 mv $LABEL_ME_POJECT $NEW_NAME # Convert the labelme data annotation folder project to coco dataset format. # Note: The category names should be checked in MMDET_DATA_TARGET, do not write them randomly. python -m lilab.cvutils.labelme_to_coco $NEW_NAME # Split the coco dataset into training set and validation set. The -s parameter indicates the proportion of the training set, 0.8 or 0.9 is commonly used. python -m lilab.cvutils.coco_split -s 0 .9 ${ NEW_NAME } _trainval.json # Copy the labeled dataset to the mmdet dataset directory MMDET_DATA_TARGET = /home/liying_lab/chenxinfeng/DATA/CBNetV2/data/rats cp -r ${ NEW_NAME } _trainval.json ${ NEW_NAME } _train.json ${ NEW_NAME } _val.json \\ ${ NEW_NAME } $MMDET_DATA_TARGET / # 2. Model training conda activate mmpose cd /home/liying_lab/chenxinfeng/DATA/CBNetV2/ # Modify the configuration file, open it with vscode. # Modify the `data` field to point to the coco dataset directory just copied. CONFIG = $PWD /mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9.py echo $CONFIG # Use multi GPU or single GPU to train the model # tools/dist_train.sh $CONFIG 4 python tools/train.py $CONFIG # 3. Model acceleration python -m lilab.mmdet_dev.convert_mmdet2trt $CONFIG # 4. Check if the model update is successful ls -lh work_dirs/mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9/latest.* Finally, the updated latest.trt model weight file is obtained.","title":"Update Segmentation Model"},{"location":"en/%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/#annotate-rat-3d-keypoints","text":"First, use Label3D_Manager for data annotation. Label3D_manager is a modified version of the official version to adapt to videos recorded by OBS, and it already uses 14 keypoints of rats. You should get the anno.mat file, which contains the annotated 3D keypoint information.","title":"Annotate Rat 3D Keypoints"},{"location":"en/%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/#prepare-dataset","text":"Trae \u6211\u9700\u8981\u67e5\u770b\"\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u91cd\u6784/application.md\"\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u4ee5\u4fbf\u8fdb\u884c\u7ffb\u8bd1\u3002\u6211\u5c06\u4f7f\u7528view_files\u5de5\u5177\u67e5\u770b\u8be5\u6587\u4ef6\u7684\u524d50\u884c\u5185\u5bb9\u3002 docs/\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u91cd\u6784/application.md 1 - 50 \u6211\u9700\u8981\u67e5\u770b\"\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u91cd\u6784/dataset.md\"\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u4ee5\u4fbf\u8fdb\u884c\u7ffb\u8bd1\u3002\u6211\u5c06\u4f7f\u7528view_files\u5de5\u5177\u67e5\u770b\u8be5\u6587\u4ef6\u7684\u524d50\u884c\u5185\u5bb9\u3002 docs/\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u91cd\u6784/dataset.md 1 - 50 \u6211\u9700\u8981\u68c0\u67e5\u82f1\u6587\u76ee\u5f55\u4e2d\u662f\u5426\u5df2\u5b58\u5728\"\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u91cd\u6784/application.md\"\u6587\u4ef6\uff0c\u82e5\u4e0d\u5b58\u5728\u5219\u521b\u5efa\u5b83\u5e76\u7ffb\u8bd1\u5185\u5bb9\u3002\u6211\u5c06\u4f7f\u7528list_dir\u5de5\u5177\u67e5\u770b\"/Users/chenxinfeng/ml-project/CIBR_Social_Seq/docs/en/\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u91cd\u6784\"\u76ee\u5f55\u3002 CIBR_Social_Seq/docs/en/\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u91cd\u6784 I will translate the content of \"\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u91cd\u6784/application.md\" and \"\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u91cd\u6784/dataset.md\" and create new files in the corresponding English directory.","title":"Prepare Dataset"},{"location":"en/%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/#social-3d-pose-reconstruction","text":"Raw multi-view videos, after segmentation , keypoint reconstruction and smoothing , obtain stable 3D pose coordinates.","title":"Social 3D Pose Reconstruction"},{"location":"en/%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/#raw-video","text":"The video comes from OBS Studio recorded 9-view camera video. The multi-camera images have been time-synchronized, with an error of 1 frame or less, which can be ignored.","title":"Raw Video"},{"location":"en/%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/#segmentation","text":"Using the Mask-RCNN model, the identity of black and white rats is recognized, and the pixel area is segmented.","title":"Segmentation"},{"location":"en/%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/#keypoint-reconstruction","text":"Execute DANNCE keypoint prediction + neural network smoothing to obtain 3D pose.","title":"Keypoint Reconstruction"},{"location":"en/%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/#dataset-creation-model-update_1","text":"","title":"Dataset Creation &amp; Model Update"},{"location":"en/%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/#annotate-rat-segmentation_1","text":"First, use the Labelme software for data annotation. Use the Polygon tool to create labels for black rat rat_black and white rat rat_white .","title":"Annotate Rat Segmentation"},{"location":"en/%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/#update-segmentation-model_1","text":"Run the following code line by line, where mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9.py is the model configuration file (default, recommended). If needed, it can be changed to other model configurations. # 1. Data preparation: labelme to coco # su chenxinfeng conda activate DEEPLABCUT # Rename the labelme data annotation folder project. ## Note 1: The folder should not have Chinese characters, and the labeled images should not have Chinese characters. ## Note 2: The number of labeled images n>20 to ensure training effect. LABEL_ME_POJECT = /mnt/liying.cibr.ac.cn_xxx/labelimages NEW_NAME = /mnt/liying.cibr.ac.cn_xxx/bw_rat_1280x800_20230524 mv $LABEL_ME_POJECT $NEW_NAME # Convert the labelme data annotation folder project to coco dataset format. # Note: The category names should be checked in MMDET_DATA_TARGET, do not write them randomly. python -m lilab.cvutils.labelme_to_coco $NEW_NAME # Split the coco dataset into training set and validation set. The -s parameter indicates the proportion of the training set, 0 .8 or 0 .9 is commonly used. python -m lilab.cvutils.coco_split -s 0 .9 ${ NEW_NAME } _trainval.json # Copy the labeled dataset to the mmdet dataset directory MMDET_DATA_TARGET = /home/liying_lab/chenxinfeng/DATA/CBNetV2/data/rats cp -r ${ NEW_NAME } _trainval.json ${ NEW_NAME } _train.json ${ NEW_NAME } _val.json \\ ${ NEW_NAME } $MMDET_DATA_TARGET / # 2. Model training conda activate mmpose cd /home/liying_lab/chenxinfeng/DATA/CBNetV2/ # Modify the configuration file, open it with vscode. # Modify the `data` field to point to the coco dataset directory just copied. CONFIG = $PWD /mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9.py echo $CONFIG # Use multi GPU or single GPU to train the model # tools/dist_train.sh $CONFIG 4 python tools/train.py $CONFIG # 3. Model acceleration python -m lilab.mmdet_dev.convert_mmdet2trt $CONFIG # 4. Check if the model update is successful ls -lh work_dirs/mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9/latest.* Finally, the updated latest.trt model weight file is obtained.","title":"Update Segmentation Model"},{"location":"en/%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/#annotate-rat-3d-keypoints_1","text":"First, use Label3D_Manager for data annotation. Label3D_manager is a modified version of the official version to adapt to videos recorded by OBS, and it already uses 14 keypoints of rats. You should get the anno.mat file, which contains the annotated 3D keypoint information.","title":"Annotate Rat 3D Keypoints"},{"location":"en/%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/#prepare-dataset_1","text":"conda activate mmdet source='/mnt/liying.cibr.ac.cn_usb3/wsy/ysj/segpkl/outframes' datadir='/home/liying_lab/chenxinfeng/DATA/dannce/data/bw_rat_1280x800x9_2024-11-27_photometry_voxel' cp -r $source $datadir python -m lilab.dannce.s1_anno2dataset $datadir/anno.mat # Find the generated *_voxel_anno_dannce.pkl, use the code to correct its body center point (using the 2D mask center point, triangulated to get the 3D center point). python -m lilab.dannce.p2_dataset_com3d_refine_byseg ${datadir}_anno_dannce.pkl","title":"Prepare Dataset"},{"location":"en/%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/#train-dannce-model","text":"Run the following code line by line to train the model. Where rat14_1280x800x9_mono_young is a project environment that has been created (recommended). According to requirements, other projects can also be selected. # cd into the project path cd /home/liying_lab/chenxinfeng/DATA/dannce/demo/rat14_1280x800x9_mono_young # Change the project configuration file, add the dataset path. echo io_max.yaml # Modify io_max.yaml, add data to exp/label3d_file python -m dannce.cli_train ../../configs/dannce_rat14_1280x800x9_max_config.yaml Convert the model to a tensorrt accelerated model. # Offline scenario. cd /home/liying_lab/chenxinfeng/DATA/dannce/demo/rat14_1280x800x9_mono_young/DANNCE/ train_results/MAX python -m lilab.dannce.t1_keras2onnx latest.hdf5 choosecuda 3 ,0,1,2 polygraphy run /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/tensorrt/ constrained_network.py \\ --precision-constraints obey \\ --trt-min-shapes input_1: [ 1 ,64,64,64,9 ] \\ --trt-max-shapes input_1: [ 4 ,64,64,64,9 ] \\ --trt-opt-shapes input_1: [ 2 ,64,64,64,9 ] \\ --trt --fp16 --save-engine latest_dynamic.engine & choosecuda 0 ,1,2,3 polygraphy run /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/tensorrt/ constrained_network.py \\ --precision-constraints obey \\ --input-shapes input_1: [ 2 ,64,64,64,9 ] \\ \\ --trt --fp16 --save-engine latest.engine & # Realtime scenario python -m lilab.dannce.t1_keras2onnx_rt latest.hdf5 choosecuda 1 ,2,3,0 polygraphy run /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/tensorrt/ constrained_network_rt.py \\ --precision-constraints obey \\ --trt-min-shapes input_1: [ 1 ,64,64,64,9 ] \\ --trt-max-shapes input_1: [ 2 ,64,64,64,9 ] \\ --trt-opt-shapes input_1: [ 1 ,64,64,64,9 ] \\ --trt --fp16 --save-engine latest.idx.engine wait Finally, latest_dynamic.engine and latest.idx.engine are obtained.","title":"Train DANNCE Model"},{"location":"en/%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/process/","text":"Code Process Developer: xxx Maintainer: xxx Splitting Multiple Animals # %% batch # step0 # conda activate mmdet source activate mmdet vdir = ` w2l '\\liying.cibr.ac.cn\\Data_Temp\\Chenxinfeng\\multiview_9\\chenxf\\00_BehaviorAnalysis-seq2seq\\SexMating' ` # Select the ball calibration file (multi-camera model file) of the day to make the data have 3D information. ball = ` w2l \"\\\\liying.cibr.ac.cn\\Data_Temp\\Chenxinfeng\\multiview_9\\chenxf\\carl\\2023-10-14-\\ball_2023-10-23_13-18-10.calibpkl\" ` config = /home/liying_lab/chenxinfeng/DATA/CBNetV2/mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9.py python -m lilab.mmdet_dev_multi.s1_mmdet_videos2segpkl_dilate_toCUDA $vdir --pannels carl --config $config #--maxlen 9000 python -m lilab.mmdet_dev.s3_segpkl_dilate2videoseg_canvas_mask $vdir --maxlen 9000 # check video # step2 com3d and create voxbox ls $vdir /*.segpkl | xargs -n 1 -I {} -P 4 python -m lilab.mmdet_dev.s4_segpkl_put_com3d_pro {} --calibpkl \" $ball \" # Draw voxel space video (optional, not recommended) ls $vdir /*.segpkl | sed 's/.segpkl/.mp4/' | xargs -n 1 -P 8 -I {} python -m lilab.mmdet_dev.s4_segpkl_com3d_to_video {} --vox_size 230 # check video Where volsize represents the side length of the rat's voxel space. For example, xx_vol230.0.mp4 indicates a side length of 230mm. The side length varies according to the rat's age and gender. The recommended values are as follows: Male Female DAY35 190 190 DAY50 230 220 DAY75 250 240 DAY adult 260 240 Finally, a series of videos and files are obtained, including: xx_mask.mp4 - Segmentation image xx_vol230.0.mp4 - Voxel space xx.segpkl - Segmented Mask binary data Verification: Open the xx_mask.mp4 video to check if the segmentation is correct. Open the xx_vol230.0.mp4 video to check if the voxel size matches. Tip Don't run too many videos at once. First, run a few videos to test. If the effect is good, you can continue running the remaining videos. If the effect is poor, you need to update the model and re-run the videos. Error If the segmentation effect of xx_mask.mp4 video is poor, you need to re-annotate the segmentation and update the model. See the data and model update section. If the voxel grid deviation of xx_vol230.0.mp4 is large, it indicates that the ball calibration file is incorrect and needs to be recalibrated. Predict Key Points #!/bin/bash conda activate mmdet cd /home/liying_lab/chenxinfeng/DATA/dannce/demo/rat14_1280x800x9_mono_young # 1. Prepare data volsize_vfiles = \" 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-21_15-42-11D1bC1w.segpkl 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-21_15-16-15C1bD1w.segpkl 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-21_14-32-25A1bB1w.segpkl 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-21_14-54-14B1bA1w.segpkl 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-20_16-45-22D1bB2w.segpkl \" volsize_vfiles = $( echo \" $volsize_vfiles \" | grep -v '^[[:space:]]*$' ) #echo \"$volsize_vfiles\" vfiles = $( echo \" $volsize_vfiles \" | awk '{print $3}' ) #echo \"$vfiles\" # 2. Use DANNCE to predict 3D pose, nGPU=4 echo \" $volsize_vfiles \" | sed 's/.segpkl/.mp4/' | cat -n | xargs -P 4 -l bash -c 'python -m dannce.cli_trt ../../configs/dannce_rat14_1280x800x9_max_config.yaml --vol-size-list $1 $2 --video-file $3 --gpu-id $(($0%4))' # xargs -P 2 means using 2 GPUs,\u914d\u5408 choosecuda 0,1,2,3 to confirm the number of GPUs used # 3. Draw \"unsmoothed\" pose trajectories (optional) # echo \"$vfiles\" | sed 's/.segpkl/.matcalibpkl/' | xargs -P 6 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d $0 --iview 3' # 4. Draw smoothed pose trajectories echo \" $vfiles \" | sed 's/.segpkl/.matcalibpkl/' | xargs -l -P 6 -r python -m lilab.smoothnet.s1_matcalibpkl2smooth_foot_dzy echo \" $vfiles \" | sed 's/.segpkl/.smoothed_foot.matcalibpkl/' | xargs -P 6 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d $0 --iview 3 --postfix smoothed_foot ' # 4B Concatenate two views for drawing (optional) # echo \"$vfiles\" | sed 's/.segpkl/.smoothed_foot.matcalibpkl/' | xargs -P 8 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d_2view $0 --postfix smoothed_foot' # 5 Create 400p thumbnail video files (optional) # bash /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/openlabcluster_postprocess/create_400p.sh \\ # /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a Where volsize_vfiles represents the configuration information of a video, which are the voxel size of the black rat (280), the voxel size of the white rat (280), and the segmentation file *.segpkl with the same name as the video. Using two different voxels can distinguish rats of different body types, such as females and males. Warning Too small a voxel size may result in incomplete rat images, causing keypoints to go out of bounds. Too large a voxel size may result in blurred rat images, reducing accuracy. Results obtained: xx.smoothed_foot.matcalibpkl - 3D keypoint sequences of two rats. xx_3_sktdraw_smoothed_foot.mp4 - 3D keypoint video of two rats. xx_400p.mp4 - 400x400 resolution compressed version of the smoothed_foot.mp4 file, reducing file size and response speed. Verification: Open the xx_3_sktdraw_smoothed_foot.mp4 video to check if the keypoint positions are correct. Save xx.smoothed_foot.matcalibpkl as it is an important file containing social 3D pose coordinates. Error If the segmentation effect of the xx_3_sktdraw_smoothed_foot.mp4 video is poor, you can check the segmentation video at the corresponding moment of the deviation and check the ball calibration file. The DANNCE model is generally very stable, while the MASK-RCNN segmentation model is easily affected by ambient light and background and needs to be frequently retrained. See the data and model update section.","title":"Workflow"},{"location":"en/%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/process/#code-process","text":"Developer: xxx Maintainer: xxx","title":"Code Process"},{"location":"en/%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/process/#splitting-multiple-animals","text":"# %% batch # step0 # conda activate mmdet source activate mmdet vdir = ` w2l '\\liying.cibr.ac.cn\\Data_Temp\\Chenxinfeng\\multiview_9\\chenxf\\00_BehaviorAnalysis-seq2seq\\SexMating' ` # Select the ball calibration file (multi-camera model file) of the day to make the data have 3D information. ball = ` w2l \"\\\\liying.cibr.ac.cn\\Data_Temp\\Chenxinfeng\\multiview_9\\chenxf\\carl\\2023-10-14-\\ball_2023-10-23_13-18-10.calibpkl\" ` config = /home/liying_lab/chenxinfeng/DATA/CBNetV2/mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9.py python -m lilab.mmdet_dev_multi.s1_mmdet_videos2segpkl_dilate_toCUDA $vdir --pannels carl --config $config #--maxlen 9000 python -m lilab.mmdet_dev.s3_segpkl_dilate2videoseg_canvas_mask $vdir --maxlen 9000 # check video # step2 com3d and create voxbox ls $vdir /*.segpkl | xargs -n 1 -I {} -P 4 python -m lilab.mmdet_dev.s4_segpkl_put_com3d_pro {} --calibpkl \" $ball \" # Draw voxel space video (optional, not recommended) ls $vdir /*.segpkl | sed 's/.segpkl/.mp4/' | xargs -n 1 -P 8 -I {} python -m lilab.mmdet_dev.s4_segpkl_com3d_to_video {} --vox_size 230 # check video Where volsize represents the side length of the rat's voxel space. For example, xx_vol230.0.mp4 indicates a side length of 230mm. The side length varies according to the rat's age and gender. The recommended values are as follows: Male Female DAY35 190 190 DAY50 230 220 DAY75 250 240 DAY adult 260 240 Finally, a series of videos and files are obtained, including: xx_mask.mp4 - Segmentation image xx_vol230.0.mp4 - Voxel space xx.segpkl - Segmented Mask binary data Verification: Open the xx_mask.mp4 video to check if the segmentation is correct. Open the xx_vol230.0.mp4 video to check if the voxel size matches. Tip Don't run too many videos at once. First, run a few videos to test. If the effect is good, you can continue running the remaining videos. If the effect is poor, you need to update the model and re-run the videos. Error If the segmentation effect of xx_mask.mp4 video is poor, you need to re-annotate the segmentation and update the model. See the data and model update section. If the voxel grid deviation of xx_vol230.0.mp4 is large, it indicates that the ball calibration file is incorrect and needs to be recalibrated.","title":"Splitting Multiple Animals"},{"location":"en/%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/process/#predict-key-points","text":"#!/bin/bash conda activate mmdet cd /home/liying_lab/chenxinfeng/DATA/dannce/demo/rat14_1280x800x9_mono_young # 1. Prepare data volsize_vfiles = \" 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-21_15-42-11D1bC1w.segpkl 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-21_15-16-15C1bD1w.segpkl 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-21_14-32-25A1bB1w.segpkl 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-21_14-54-14B1bA1w.segpkl 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-20_16-45-22D1bB2w.segpkl \" volsize_vfiles = $( echo \" $volsize_vfiles \" | grep -v '^[[:space:]]*$' ) #echo \"$volsize_vfiles\" vfiles = $( echo \" $volsize_vfiles \" | awk '{print $3}' ) #echo \"$vfiles\" # 2. Use DANNCE to predict 3D pose, nGPU=4 echo \" $volsize_vfiles \" | sed 's/.segpkl/.mp4/' | cat -n | xargs -P 4 -l bash -c 'python -m dannce.cli_trt ../../configs/dannce_rat14_1280x800x9_max_config.yaml --vol-size-list $1 $2 --video-file $3 --gpu-id $(($0%4))' # xargs -P 2 means using 2 GPUs,\u914d\u5408 choosecuda 0,1,2,3 to confirm the number of GPUs used # 3. Draw \"unsmoothed\" pose trajectories (optional) # echo \"$vfiles\" | sed 's/.segpkl/.matcalibpkl/' | xargs -P 6 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d $0 --iview 3' # 4. Draw smoothed pose trajectories echo \" $vfiles \" | sed 's/.segpkl/.matcalibpkl/' | xargs -l -P 6 -r python -m lilab.smoothnet.s1_matcalibpkl2smooth_foot_dzy echo \" $vfiles \" | sed 's/.segpkl/.smoothed_foot.matcalibpkl/' | xargs -P 6 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d $0 --iview 3 --postfix smoothed_foot ' # 4B Concatenate two views for drawing (optional) # echo \"$vfiles\" | sed 's/.segpkl/.smoothed_foot.matcalibpkl/' | xargs -P 8 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d_2view $0 --postfix smoothed_foot' # 5 Create 400p thumbnail video files (optional) # bash /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/openlabcluster_postprocess/create_400p.sh \\ # /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a Where volsize_vfiles represents the configuration information of a video, which are the voxel size of the black rat (280), the voxel size of the white rat (280), and the segmentation file *.segpkl with the same name as the video. Using two different voxels can distinguish rats of different body types, such as females and males. Warning Too small a voxel size may result in incomplete rat images, causing keypoints to go out of bounds. Too large a voxel size may result in blurred rat images, reducing accuracy. Results obtained: xx.smoothed_foot.matcalibpkl - 3D keypoint sequences of two rats. xx_3_sktdraw_smoothed_foot.mp4 - 3D keypoint video of two rats. xx_400p.mp4 - 400x400 resolution compressed version of the smoothed_foot.mp4 file, reducing file size and response speed. Verification: Open the xx_3_sktdraw_smoothed_foot.mp4 video to check if the keypoint positions are correct. Save xx.smoothed_foot.matcalibpkl as it is an important file containing social 3D pose coordinates. Error If the segmentation effect of the xx_3_sktdraw_smoothed_foot.mp4 video is poor, you can check the segmentation video at the corresponding moment of the deviation and check the ball calibration file. The DANNCE model is generally very stable, while the MASK-RCNN segmentation model is easily affected by ambient light and background and needs to be frequently retrained. See the data and model update section.","title":"Predict Key Points"},{"location":"en/%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/application/","text":"Social Label Sequencing Social Feature Design Obtaining the long-term body coordinate points of two animals provides the foundation for exploring animal social types through their trajectory changes. Based on these coordinate points, we designed a series of features (32 in total) to better showcase social characteristics. This includes 10 features of the animal's own movement. Considering that social behavior has unique interaction patterns, we also designed 10 interactive features between the two. During social exploration, rats exhibit many head and genital sniffing behaviors to familiarize themselves with each other. Therefore, we defined circular sniffing areas for the head and genitals and constructed 3 features to distinguish sniffing sites. During play fighting and mating mounting, rats exhibit overlapping of body trunks, so we designed 9 body overlap features. Social Feature Clustering We cut social videos into 0.8-second time windows, obtaining high-dimensional features (32 features x 24 frames). We then used a Seq2Seq autoencoder model based on RNN to extract spatial and temporal features of behaviors, which can distinguish behavior types with different appearances and movements. The\u6f5cfeatures encoded by the decoder were reduced to 90% variance explainability (first 12 PCs) using PCA. Using K-means unsupervised clustering, we obtained approximately 40-50 behavior categories. For each behavior category, we observed typical video clips and performed manual annotation. Through this process, many familiar social behavior types were successfully clustered, such as sniffing, chasing, approaching, leaving, and playing, comprehensively covering rat social patterns. By projecting behavior categories in a two-dimensional UMAP space, we constructed a more visualizable social behavior atlas. In the UMAP social atlas, different major behavior categories are separated into their respective regions, with adjacent regions showing similar behaviors. Even similar behaviors have subtle differences in features, which are more detailed than manually set criteria. Therefore, the automated clustering method can partially replace manual observation of behaviors without manual annotation. Social Consistency Clustering Optimization During the detailed review of behavior classification results, this study identified atypical clips in some categories that were inconsistent with expected behaviors from manual annotation. The inherent characteristics of social behavior provide unique conditions for optimization algorithms, allowing the same social interaction to be viewed from different individual perspectives. The same social interaction clip is labeled from two different role perspectives (2 labels), and consistent labels make the classification of that clip more reliable. This study classified social behaviors from the perspectives of white and black rats, obtaining dual labels, and identified consistency matching relationships between these labels. Among the 42 behavior categories, 36 complementary behaviors were automatically screened out. These 36 categories are called reliable clustering categories. The neural network was then retrained to reclassify all video clips into the 36 reliable clustering categories.","title":"Applications"},{"location":"en/%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/application/#social-label-sequencing","text":"","title":"Social Label Sequencing"},{"location":"en/%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/application/#social-feature-design","text":"Obtaining the long-term body coordinate points of two animals provides the foundation for exploring animal social types through their trajectory changes. Based on these coordinate points, we designed a series of features (32 in total) to better showcase social characteristics. This includes 10 features of the animal's own movement. Considering that social behavior has unique interaction patterns, we also designed 10 interactive features between the two. During social exploration, rats exhibit many head and genital sniffing behaviors to familiarize themselves with each other. Therefore, we defined circular sniffing areas for the head and genitals and constructed 3 features to distinguish sniffing sites. During play fighting and mating mounting, rats exhibit overlapping of body trunks, so we designed 9 body overlap features.","title":"Social Feature Design"},{"location":"en/%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/application/#social-feature-clustering","text":"We cut social videos into 0.8-second time windows, obtaining high-dimensional features (32 features x 24 frames). We then used a Seq2Seq autoencoder model based on RNN to extract spatial and temporal features of behaviors, which can distinguish behavior types with different appearances and movements. The\u6f5cfeatures encoded by the decoder were reduced to 90% variance explainability (first 12 PCs) using PCA. Using K-means unsupervised clustering, we obtained approximately 40-50 behavior categories. For each behavior category, we observed typical video clips and performed manual annotation. Through this process, many familiar social behavior types were successfully clustered, such as sniffing, chasing, approaching, leaving, and playing, comprehensively covering rat social patterns. By projecting behavior categories in a two-dimensional UMAP space, we constructed a more visualizable social behavior atlas. In the UMAP social atlas, different major behavior categories are separated into their respective regions, with adjacent regions showing similar behaviors. Even similar behaviors have subtle differences in features, which are more detailed than manually set criteria. Therefore, the automated clustering method can partially replace manual observation of behaviors without manual annotation.","title":"Social Feature Clustering"},{"location":"en/%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/application/#social-consistency-clustering-optimization","text":"During the detailed review of behavior classification results, this study identified atypical clips in some categories that were inconsistent with expected behaviors from manual annotation. The inherent characteristics of social behavior provide unique conditions for optimization algorithms, allowing the same social interaction to be viewed from different individual perspectives. The same social interaction clip is labeled from two different role perspectives (2 labels), and consistent labels make the classification of that clip more reliable. This study classified social behaviors from the perspectives of white and black rats, obtaining dual labels, and identified consistency matching relationships between these labels. Among the 42 behavior categories, 36 complementary behaviors were automatically screened out. These 36 categories are called reliable clustering categories. The neural network was then retrained to reclassify all video clips into the 36 reliable clustering categories.","title":"Social Consistency Clustering Optimization"},{"location":"en/%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/dataset/","text":"Create Social Clustering Template from Scratch From Keypoint Files + Videos to Social Features and Behavior Labels After performing \"Social 3D Pose Reconstruction\", you should have \" smoothed_foot.matcalibpkl\" keypoint files and \" _sktdraw_smoothed_foot.mp4\" video files. Copy all these video and data files to a folder. Execute the following commands to sequentially calculate social features - enrich close-range social interactions and split segments - Seq2Seq model to extract spatiotemporal features of social behavior - social clustering - render videos . Please run this code line by line. #!/bin/bash conda activate OpenLabCluster # Path where the code is stored (by Tao Xianming) cd /DATA/taoxianming/rat/script/openlabcluster/pc_feats41_DecSeqCluster_better_20231102 pathFeats = /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/Shank3HETxWT_202309/MM_FF # Do not use cloud storage for ResPath, as the files are too fragmented and slow to access bhvResPath = ~/DATA/Shank3HETxWT_202309_MM_FF_openlabcluster today = 2023 -11-09 ##always date format mkdir -p $bhvResPath ## create 400p bash /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/openlabcluster_postprocess/create_400p.sh $pathFeats ## Calculate raw features python 01_1_feats41fromPoints-IDswitch_mp.py $pathFeats ## minmax and get close segments python 01_2_featsMM_clipsInCloseSegs_mp.py $pathFeats python 02_1_prepare_featureFiles_forOpenLabCluster.py $pathFeats $bhvResPath ## split train:test=9:1 python 02_2_makeProject_trainTest.py $bhvResPath $today ## training Seq2Seq gpuID = 0 python 02_3_seq2seq_training-decSeq.py $bhvResPath $gpuID $today ## behavior clustering python 03_1_decSeqFeats_PCA-balanceCluster.py $bhvResPath $today ## Dec features in space, colored by cluster NO python 03_2_plot_decSeqFeatsPCS-trajectoryColorByLabels.py $bhvResPath $today ## plot mp4 videos of each behavior cluster python 04_1_plot_decSeqCluster-Videos.py $pathFeats $bhvResPath $today ## get behavior cluster sequence of each video python 04_2_getBhvClusterSeqs_eachVideo.py $pathFeats $bhvResPath $today This will generate *_sequences.pkl and *_bio_labels.npz behavior video label files; and FWPCA*_blackFirst/svm_clu*_400p.mp4 video files corresponding to each behavior category. Plotting & Calculating Active-Passive Consistency Please run this code line by line. #!/bin/bash conda activate mmdet cd /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/ ## 1. Merge files to generate clippredpkl file python -m lilab.openlabcluster_postprocess.s1_merge_3_file . ## 2. UMAP of Embedding and Kmeans boundary python -m lilab.openlabcluster_postprocess.s2_decisionBoundary_masaik_plot *.clippredpkl ## 3A. Kmeans hierarchical clustering # Preparation work. First, give each cluster a name. Open the script and paste the category names into the script; run it. Finally, the category names will be added to *.clippredpkl. # python -m lilab.openlabcluster_postprocess.s3a_cluster_givename_mergefile *.clippredpkl ## 3B. Or temporarily not standardize class names python -m lilab.openlabcluster_postprocess.s3a_cluster_givename_mergefile *.clippredpkl --auto-label ## 4. Then run the hierarchical clustering plot python -m lilab.openlabcluster_postprocess.s3b_hiecluster_plot *.clippredpkl & python -m lilab.openlabcluster_postprocess.s3b_hiecluster_plot_pro *.clippredpkl & ## 5. Definition of Mirror or Mutual categories python -m lilab.openlabcluster_postprocess.s3c_mirror_mutual_matrix_plot *.clippredpkl ## 6. Optional. Merge labels. For example, active-passive, or adjacent classes in the dendrogram. [Optional, not recommended] # Preparation work. Open the script and write the mergeable categories in the script; run it. Finally, the merged category names will be added to *.clippredpkl. # python -m lilab.openlabcluster_postprocess.s3a2_cluster_nodemerge *.clippredpkl ## 7. Optional plotting. Moseq-like Motif plotting # Need to find the original keypoint coordinate files (stored in the SmoothFootPkl_DIR folder) to plot. Run the following code. In the same directory, a motifshowmulti result folder will be generated. SmoothFootPkl_DIR = /A/B/C python -m lilab.openlabcluster_postprocess.s4_moseq_like_motif_plot *.clippredpkl $SmoothFootPkl_DIR Using Active-Passive Consistency to Optimize Clustering with Active-Learning conda activate mmdet # Change directory to the kmeans clustering result path cd /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/ #1. Recalculate mirror and export mirror category matrix heatmap & mirror table python -m lilab.OpenLabCluster_train.a0_mirror_mutual_matrix_plot *.clippredpkl #2. Filter representative segments to become new clippredpkl python -m lilab.OpenLabCluster_train.a1_mirror_mutual_filt_clippredpkl *.clippredpkl cd ./representitive_*_filt_perc* #3. Previous unsupervised conventional analysis process -- check plots #3-1. UMAP of Embedding and Kmeans boundary python -m lilab.openlabcluster_postprocess.s2_decisionBoundary_masaik_plot *.clippredpkl #3-2. Then run hierarchical clustering plot python -m lilab.openlabcluster_postprocess.s3b_hiecluster_plot_pro *.clippredpkl #3-3. Definition of Mirror or Mutual categories python -m lilab.openlabcluster_postprocess.s3c_mirror_mutual_matrix_plot *.clippredpkl #B1. Create openlabcluster semi_seq2seq project, copy from seq2seq conda activate OpenLabCluster PROJECT_SEQ2SEQ = /DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32_k36/feats32-2024-04-11 PROJECT_REPR = /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32_k36 PROJECT_SEMISEQ2SEQ = ` python -m lilab.OpenLabCluster_train.a2_semiseqseq_data_prepare $PROJECT_REPR $PROJECT_SEQ2SEQ ` cd $PROJECT_SEMISEQ2SEQ #B2. Initialize seq2seq python -m lilab.OpenLabCluster_train.a3_semiseqseq_init_train_seqseq $PROJECT_SEMISEQ2SEQ --epoch 3 #First iteration, from seq2seq to semiseq2seq # PROJECT_SEMISEQ2SEQ=/DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/semiseq2seq_iter0 # PROJECT_REPR=/mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/representitive_*_filt_perc* PROJECT_SEMISEQ2SEQ = /DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32_k36/semiseq2seq_iter1 python -m lilab.OpenLabCluster_train.a5b_export_latent_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --modeltype SemiSeq2SeqLite #--modeltype SemiSeq2SeqLite is default not selected # Train label recognition using SemiSeq2Seq model python -m lilab.OpenLabCluster_train.a4_semiseqseq_train $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-now 0 --modeltype SemiSeq2SeqLite # Predict labels of all segments based on SemiSeq2Seq model python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter 0 --modeltype SemiSeq2SeqLite # Generate new dataset from representative labels filtered from segment set python -m lilab.OpenLabCluster_train.a2a_clippredfile_refine $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter0-epoch5/*.clippredpkl $PROJECT_REPR /*.clippredpkl python -m lilab.OpenLabCluster_train.a2b_iter_data_prepare $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-from 0 #create new data for iter1 #Start iteration python -m lilab.OpenLabCluster_train.a4_semiseqseq_train $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-now 1 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter 1 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a2a_clippredfile_refine $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter1-epoch5/*.clippredpkl $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter0-epoch5/*.clippredpkl python -m lilab.OpenLabCluster_train.a2b_iter_data_prepare $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-from 1 #create new data for iter2 python -m lilab.OpenLabCluster_train.a4_semiseqseq_train $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-now 2 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter 2 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a2a_clippredfile_refine $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter2-epoch5/*.clippredpkl $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter1-epoch5/*.clippredpkl python -m lilab.OpenLabCluster_train.a2b_iter_data_prepare $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-from 2 #create new data for iter3 python -m lilab.OpenLabCluster_train.a4_semiseqseq_train $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-now 3 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter 3 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a2a_clippredfile_refine $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter3-epoch5/*.clippredpkl $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter2-epoch5/*.clippredpkl python -m lilab.OpenLabCluster_train.a2b_iter_data_prepare $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-from 3 #create new data for iter3 # 4. End of iteration, plotting ITER = 3 EPOCH = 6 #Plot 400p conda activate mmdet DIR_400p = /DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/data python -m lilab.OpenLabCluster_train.a6b_clippredpkl_2_cluster400p $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter $ITER -epoch $EPOCH /*.clippredpkl $DIR_400p #clippredpkl to seqencepkl python -m lilab.OpenLabCluster_train.a6_clippredpkl_2_seqencepkl $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter $ITER -epoch $EPOCH /*.clippredpkl #Calculate chi dbi clustering metrics ls $PROJECT_SEMISEQ2SEQ /output/*/*.clippredpkl | xargs -n 1 -P 8 -I {} python -m lilab.OpenLabCluster_train.b1_chi_dbi {} --PCA 12 # Refer to clustering videos and active-passive consistency to rename. Open the script and modify the category names ls $PROJECT_SEMISEQ2SEQ /output/semi*/*.clippredpkl | xargs -n 1 -P 8 -I {} python -m lilab.OpenLabCluster_train.t1_cluster_name_rename {} ##Predict dataset and generate to Data.H5 file ##Need to change feature_length: 32 (number of features) and cla_dim: - 36 num_class: - 36 (final cluster count of training set) in config.yaml file conda activate OpenLabCluster ITER = 3 EPOCH = 5 PROJECT_SEQ2SEQ = /DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32_k36/semiseq2seq_iter1 PROJECT_REPR = /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/representitive_k36_filt_perc65 CLIPPREDPKL = $PROJECT_SEQ2SEQ /output/semisupervise-decSeq-iter $ITER -epoch $EPOCH /*.clippredpkl python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEQ2SEQ --epoch 3 --iter 3 python -m lilab.OpenLabCluster_train.a6_clippredpkl_2_seqencepkl $CLIPPREDPKL # python -m lilab.OpenLabCluster_train.t1_cluster_name_rename $CLIPPREDPKL #3. Previous unsupervised conventional analysis process -- check plots python -m lilab.openlabcluster_postprocess.s2_decisionBoundary_masaik_plot $CLIPPREDPKL python -m lilab.openlabcluster_postprocess.s3b_hiecluster_plot_pro $CLIPPREDPKL python -m lilab.openlabcluster_postprocess.s3c_mirror_mutual_matrix_plot $CLIPPREDPKL #Merge active-passive and re-cluster [optional] python -m lilab.OpenLabCluster_train.t2_halfmirror_hierachy $CLIPPREDPKL","title":"Clustering & Template Creation"},{"location":"en/%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/dataset/#create-social-clustering-template-from-scratch","text":"","title":"Create Social Clustering Template from Scratch"},{"location":"en/%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/dataset/#from-keypoint-files-videos-to-social-features-and-behavior-labels","text":"After performing \"Social 3D Pose Reconstruction\", you should have \" smoothed_foot.matcalibpkl\" keypoint files and \" _sktdraw_smoothed_foot.mp4\" video files. Copy all these video and data files to a folder. Execute the following commands to sequentially calculate social features - enrich close-range social interactions and split segments - Seq2Seq model to extract spatiotemporal features of social behavior - social clustering - render videos . Please run this code line by line. #!/bin/bash conda activate OpenLabCluster # Path where the code is stored (by Tao Xianming) cd /DATA/taoxianming/rat/script/openlabcluster/pc_feats41_DecSeqCluster_better_20231102 pathFeats = /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/Shank3HETxWT_202309/MM_FF # Do not use cloud storage for ResPath, as the files are too fragmented and slow to access bhvResPath = ~/DATA/Shank3HETxWT_202309_MM_FF_openlabcluster today = 2023 -11-09 ##always date format mkdir -p $bhvResPath ## create 400p bash /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/openlabcluster_postprocess/create_400p.sh $pathFeats ## Calculate raw features python 01_1_feats41fromPoints-IDswitch_mp.py $pathFeats ## minmax and get close segments python 01_2_featsMM_clipsInCloseSegs_mp.py $pathFeats python 02_1_prepare_featureFiles_forOpenLabCluster.py $pathFeats $bhvResPath ## split train:test=9:1 python 02_2_makeProject_trainTest.py $bhvResPath $today ## training Seq2Seq gpuID = 0 python 02_3_seq2seq_training-decSeq.py $bhvResPath $gpuID $today ## behavior clustering python 03_1_decSeqFeats_PCA-balanceCluster.py $bhvResPath $today ## Dec features in space, colored by cluster NO python 03_2_plot_decSeqFeatsPCS-trajectoryColorByLabels.py $bhvResPath $today ## plot mp4 videos of each behavior cluster python 04_1_plot_decSeqCluster-Videos.py $pathFeats $bhvResPath $today ## get behavior cluster sequence of each video python 04_2_getBhvClusterSeqs_eachVideo.py $pathFeats $bhvResPath $today This will generate *_sequences.pkl and *_bio_labels.npz behavior video label files; and FWPCA*_blackFirst/svm_clu*_400p.mp4 video files corresponding to each behavior category.","title":"From Keypoint Files + Videos to Social Features and Behavior Labels"},{"location":"en/%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/dataset/#plotting-calculating-active-passive-consistency","text":"Please run this code line by line. #!/bin/bash conda activate mmdet cd /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/ ## 1. Merge files to generate clippredpkl file python -m lilab.openlabcluster_postprocess.s1_merge_3_file . ## 2. UMAP of Embedding and Kmeans boundary python -m lilab.openlabcluster_postprocess.s2_decisionBoundary_masaik_plot *.clippredpkl ## 3A. Kmeans hierarchical clustering # Preparation work. First, give each cluster a name. Open the script and paste the category names into the script; run it. Finally, the category names will be added to *.clippredpkl. # python -m lilab.openlabcluster_postprocess.s3a_cluster_givename_mergefile *.clippredpkl ## 3B. Or temporarily not standardize class names python -m lilab.openlabcluster_postprocess.s3a_cluster_givename_mergefile *.clippredpkl --auto-label ## 4. Then run the hierarchical clustering plot python -m lilab.openlabcluster_postprocess.s3b_hiecluster_plot *.clippredpkl & python -m lilab.openlabcluster_postprocess.s3b_hiecluster_plot_pro *.clippredpkl & ## 5. Definition of Mirror or Mutual categories python -m lilab.openlabcluster_postprocess.s3c_mirror_mutual_matrix_plot *.clippredpkl ## 6. Optional. Merge labels. For example, active-passive, or adjacent classes in the dendrogram. [Optional, not recommended] # Preparation work. Open the script and write the mergeable categories in the script; run it. Finally, the merged category names will be added to *.clippredpkl. # python -m lilab.openlabcluster_postprocess.s3a2_cluster_nodemerge *.clippredpkl ## 7. Optional plotting. Moseq-like Motif plotting # Need to find the original keypoint coordinate files (stored in the SmoothFootPkl_DIR folder) to plot. Run the following code. In the same directory, a motifshowmulti result folder will be generated. SmoothFootPkl_DIR = /A/B/C python -m lilab.openlabcluster_postprocess.s4_moseq_like_motif_plot *.clippredpkl $SmoothFootPkl_DIR","title":"Plotting &amp; Calculating Active-Passive Consistency"},{"location":"en/%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/dataset/#using-active-passive-consistency-to-optimize-clustering-with-active-learning","text":"conda activate mmdet # Change directory to the kmeans clustering result path cd /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/ #1. Recalculate mirror and export mirror category matrix heatmap & mirror table python -m lilab.OpenLabCluster_train.a0_mirror_mutual_matrix_plot *.clippredpkl #2. Filter representative segments to become new clippredpkl python -m lilab.OpenLabCluster_train.a1_mirror_mutual_filt_clippredpkl *.clippredpkl cd ./representitive_*_filt_perc* #3. Previous unsupervised conventional analysis process -- check plots #3-1. UMAP of Embedding and Kmeans boundary python -m lilab.openlabcluster_postprocess.s2_decisionBoundary_masaik_plot *.clippredpkl #3-2. Then run hierarchical clustering plot python -m lilab.openlabcluster_postprocess.s3b_hiecluster_plot_pro *.clippredpkl #3-3. Definition of Mirror or Mutual categories python -m lilab.openlabcluster_postprocess.s3c_mirror_mutual_matrix_plot *.clippredpkl #B1. Create openlabcluster semi_seq2seq project, copy from seq2seq conda activate OpenLabCluster PROJECT_SEQ2SEQ = /DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32_k36/feats32-2024-04-11 PROJECT_REPR = /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32_k36 PROJECT_SEMISEQ2SEQ = ` python -m lilab.OpenLabCluster_train.a2_semiseqseq_data_prepare $PROJECT_REPR $PROJECT_SEQ2SEQ ` cd $PROJECT_SEMISEQ2SEQ #B2. Initialize seq2seq python -m lilab.OpenLabCluster_train.a3_semiseqseq_init_train_seqseq $PROJECT_SEMISEQ2SEQ --epoch 3 #First iteration, from seq2seq to semiseq2seq # PROJECT_SEMISEQ2SEQ=/DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/semiseq2seq_iter0 # PROJECT_REPR=/mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/representitive_*_filt_perc* PROJECT_SEMISEQ2SEQ = /DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32_k36/semiseq2seq_iter1 python -m lilab.OpenLabCluster_train.a5b_export_latent_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --modeltype SemiSeq2SeqLite #--modeltype SemiSeq2SeqLite is default not selected # Train label recognition using SemiSeq2Seq model python -m lilab.OpenLabCluster_train.a4_semiseqseq_train $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-now 0 --modeltype SemiSeq2SeqLite # Predict labels of all segments based on SemiSeq2Seq model python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter 0 --modeltype SemiSeq2SeqLite # Generate new dataset from representative labels filtered from segment set python -m lilab.OpenLabCluster_train.a2a_clippredfile_refine $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter0-epoch5/*.clippredpkl $PROJECT_REPR /*.clippredpkl python -m lilab.OpenLabCluster_train.a2b_iter_data_prepare $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-from 0 #create new data for iter1 #Start iteration python -m lilab.OpenLabCluster_train.a4_semiseqseq_train $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-now 1 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter 1 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a2a_clippredfile_refine $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter1-epoch5/*.clippredpkl $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter0-epoch5/*.clippredpkl python -m lilab.OpenLabCluster_train.a2b_iter_data_prepare $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-from 1 #create new data for iter2 python -m lilab.OpenLabCluster_train.a4_semiseqseq_train $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-now 2 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter 2 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a2a_clippredfile_refine $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter2-epoch5/*.clippredpkl $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter1-epoch5/*.clippredpkl python -m lilab.OpenLabCluster_train.a2b_iter_data_prepare $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-from 2 #create new data for iter3 python -m lilab.OpenLabCluster_train.a4_semiseqseq_train $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-now 3 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter 3 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a2a_clippredfile_refine $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter3-epoch5/*.clippredpkl $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter2-epoch5/*.clippredpkl python -m lilab.OpenLabCluster_train.a2b_iter_data_prepare $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-from 3 #create new data for iter3 # 4. End of iteration, plotting ITER = 3 EPOCH = 6 #Plot 400p conda activate mmdet DIR_400p = /DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/data python -m lilab.OpenLabCluster_train.a6b_clippredpkl_2_cluster400p $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter $ITER -epoch $EPOCH /*.clippredpkl $DIR_400p #clippredpkl to seqencepkl python -m lilab.OpenLabCluster_train.a6_clippredpkl_2_seqencepkl $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter $ITER -epoch $EPOCH /*.clippredpkl #Calculate chi dbi clustering metrics ls $PROJECT_SEMISEQ2SEQ /output/*/*.clippredpkl | xargs -n 1 -P 8 -I {} python -m lilab.OpenLabCluster_train.b1_chi_dbi {} --PCA 12 # Refer to clustering videos and active-passive consistency to rename. Open the script and modify the category names ls $PROJECT_SEMISEQ2SEQ /output/semi*/*.clippredpkl | xargs -n 1 -P 8 -I {} python -m lilab.OpenLabCluster_train.t1_cluster_name_rename {} ##Predict dataset and generate to Data.H5 file ##Need to change feature_length: 32 (number of features) and cla_dim: - 36 num_class: - 36 (final cluster count of training set) in config.yaml file conda activate OpenLabCluster ITER = 3 EPOCH = 5 PROJECT_SEQ2SEQ = /DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32_k36/semiseq2seq_iter1 PROJECT_REPR = /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/representitive_k36_filt_perc65 CLIPPREDPKL = $PROJECT_SEQ2SEQ /output/semisupervise-decSeq-iter $ITER -epoch $EPOCH /*.clippredpkl python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEQ2SEQ --epoch 3 --iter 3 python -m lilab.OpenLabCluster_train.a6_clippredpkl_2_seqencepkl $CLIPPREDPKL # python -m lilab.OpenLabCluster_train.t1_cluster_name_rename $CLIPPREDPKL #3. Previous unsupervised conventional analysis process -- check plots python -m lilab.openlabcluster_postprocess.s2_decisionBoundary_masaik_plot $CLIPPREDPKL python -m lilab.openlabcluster_postprocess.s3b_hiecluster_plot_pro $CLIPPREDPKL python -m lilab.openlabcluster_postprocess.s3c_mirror_mutual_matrix_plot $CLIPPREDPKL #Merge active-passive and re-cluster [optional] python -m lilab.OpenLabCluster_train.t2_halfmirror_hierachy $CLIPPREDPKL","title":"Using Active-Passive Consistency to Optimize Clustering with Active-Learning"},{"location":"en/%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/process/","text":"conda activate OpenLabCluster PROEJECT_DIR = /mnt/liying.cibr.ac.cn_Data_Temp_ZZC/2024-ChR2rat/2410shank3/400p # Calculate body length and sniffzone for each animal in each video # Generate 'bodylength.pkl', 'rawfeat.pkl' python -m lilab.lstm_bhv_bodylennorm_classify.s0_prepare_body_length $PROEJECT_DIR #--skip-frames 1800 python -m lilab.lstm_bhv_bodylennorm_classify.s01_matcalibpkl2rawfeatpkl $PROEJECT_DIR # Normalize by 95% quantile of speed # Generate rawfeat_norm.pkl python -m lilab.lstm_bhv_bodylennorm_classify.s02_rawfeatpkl_to_norm $PROEJECT_DIR #--setspeed 0.05 #--skip-frames 1800 # Starting from 3D keypoints, add body length information to calculate behavior classification # --use-normed uses speed-normalized features # Generate out_semiseq2seq_norm/lstm_offline.clippredpkl python -m lilab.lstm_bhv_bodylennorm_classify.s1_matcalibpkl2clippredpkl_semiseq2seq $PROEJECT_DIR --use-normed # Dense prediction 10Hz, stride=3 # python -m lilab.lstm_bhv_bodylennorm_classify.s1_matcalibpkl2clippredpkl_semiseq2seq $PROEJECT_DIR --use-normed --stride 3 # Only look at video segments with mirror consistency, representative # Generate out_semiseq2seq_norm/representitive_k36_filt_perc*/*.clippredpkl and .seqencepkl conda activate mmdet python -m lilab.OpenLabCluster_train.a6_clippredpkl_2_seqencepkl $PROEJECT_DIR /out_semiseq2seq_norm/*.clippredpkl python -m lilab.OpenLabCluster_train.a1_mirror_mutual_filt_clippredpkl $PROEJECT_DIR /out_semiseq2seq_norm/lstm_offline.clippredpkl --already-mirrored python -m lilab.OpenLabCluster_train.a6_clippredpkl_2_seqencepkl $PROEJECT_DIR /out_semiseq2seq_norm/representitive_k36_filt_perc*/*.clippredpkl --autoEnd # Draw video segments for each category [optional] # python -m lilab.OpenLabCluster_train.a6b_clippredpkl_2_cluster400p \\ # $PROEJECT_DIR/out_semiseq2seq_norm/representitive_k36_filt_perc*/Representive_K36.clippredpkl \\ # $PROEJECT_DIR","title":"Workflow"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/OBS_%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/","text":"OBS Software Installation Video tutorial: xxx The system uses OBS Studio (version 29.0 ) for video recording. OBS is widely used in the field of video live streaming and recording due to its excellent configurability, stability, and open-source characteristics. The software supports multiple input sources, including images, text, browser windows, cameras, and microphones, effectively simplifying the complexity of multi-camera synchronous recording . Its multi-threaded load optimization and GPU video encoding/decoding provide excellent performance . In this platform, OBS provides a comprehensive and flexible video recording solution with real-time preview, multi-camera layout, resolution adjustment, and programming interfaces. The specific configuration of OBS is detailed in the table below. OBS version 29.0, download address: https://obsproject.com/download Object Main Function Parameters Sources > Add > Video Capture Device Add 9 K1S293 cameras In the resolution dropdown list for individual cameras, select 1280\u00d7800, frame rate as highest (i.e., 120fps), and frame encoding as MJPEG Settings > Output > Recording Recording file format Type as standard; filename without spaces; output container as MP4; encoder as NVIDIA NVENC HEVC; bitrate as 30 Mbps; preset as high quality. Settings > Video Canvas resolution and frame rate Canvas resolution 3840\u00d72400, which is the pixel sum after stitching 9 cameras; no scaling; frame rate 30 fps. Menu > Tools > WebSocket Server External code control of OBS recording switch Port number 4455; no password (uncheck authentication box); recommended to use with F2 Synchronization Assistant In the specific configuration process of OBS software, the following technical details should be focused on: When adding multi-camera video streams to the OBS canvas, stretching or cropping of camera views should be avoided to prevent image data loss and ensure accurate positioning of subsequent multi-camera image reading. Multi-camera images should be tightly arranged in the OBS canvas, and camera numbering should follow the order from left to right, top to bottom. Some cameras capture upside-down images, which need to be corrected by 180\u00b0 rotation in OBS software, but do not use mirroring. After completing the above configuration, recording can be started through the OBS interface to synchronously record behavior experiment videos from 9 cameras. Typically, a 15-minute experiment video is about 3.4GB. Players like Potplayer or VLC can be used to conveniently view the videos.","title":"OBS Software Installation"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/OBS_%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/#obs-software-installation","text":"Video tutorial: xxx The system uses OBS Studio (version 29.0 ) for video recording. OBS is widely used in the field of video live streaming and recording due to its excellent configurability, stability, and open-source characteristics. The software supports multiple input sources, including images, text, browser windows, cameras, and microphones, effectively simplifying the complexity of multi-camera synchronous recording . Its multi-threaded load optimization and GPU video encoding/decoding provide excellent performance . In this platform, OBS provides a comprehensive and flexible video recording solution with real-time preview, multi-camera layout, resolution adjustment, and programming interfaces. The specific configuration of OBS is detailed in the table below. OBS version 29.0, download address: https://obsproject.com/download Object Main Function Parameters Sources > Add > Video Capture Device Add 9 K1S293 cameras In the resolution dropdown list for individual cameras, select 1280\u00d7800, frame rate as highest (i.e., 120fps), and frame encoding as MJPEG Settings > Output > Recording Recording file format Type as standard; filename without spaces; output container as MP4; encoder as NVIDIA NVENC HEVC; bitrate as 30 Mbps; preset as high quality. Settings > Video Canvas resolution and frame rate Canvas resolution 3840\u00d72400, which is the pixel sum after stitching 9 cameras; no scaling; frame rate 30 fps. Menu > Tools > WebSocket Server External code control of OBS recording switch Port number 4455; no password (uncheck authentication box); recommended to use with F2 Synchronization Assistant In the specific configuration process of OBS software, the following technical details should be focused on: When adding multi-camera video streams to the OBS canvas, stretching or cropping of camera views should be avoided to prevent image data loss and ensure accurate positioning of subsequent multi-camera image reading. Multi-camera images should be tightly arranged in the OBS canvas, and camera numbering should follow the order from left to right, top to bottom. Some cameras capture upside-down images, which need to be corrected by 180\u00b0 rotation in OBS software, but do not use mirroring. After completing the above configuration, recording can be started through the OBS interface to synchronously record behavior experiment videos from 9 cameras. Typically, a 15-minute experiment video is about 3.4GB. Players like Potplayer or VLC can be used to conveniently view the videos.","title":"OBS Software Installation"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/shopping_list/","text":"Equipment Assembly and List Includes camera experimental box, experimental computer, and analysis server. Video tutorial: xxx Camera Experimental Box The table below lists all cameras and materials used in the camera experimental box. Name Parameters Quantity Purchase Link K1S293 Camera 1280x800 resolution, 120fps, black and white 9 Taobao Purchase Link Aluminum Profile Bracket Hexagonal, double-layer bracket 1 Self-processing - PTZ and Slider 9 units 9 Taobao Purchase Link Red Light Illumination LED Ambient light illumination 6 Taobao Purchase Link Aluminum Oxide Calibration Board Chessboard, camera calibration; Model GP290 12x9 1 Taobao Purchase Link Metal Ball For camera extrinsic calibration, diameter <2 cm 1 Any source Acrylic Light Shield Used to block background clutter and prevent image interference. Size according to experimental requirements. 7 Taobao Purchase Link Notes: - The appropriate focal length of the camera lens needs to be tested by yourself. Factors such as camera distance and experimental box size will affect the choice of focal length. - It is recommended to let the camera manufacturer provide different software identifiers (different names) for each camera to facilitate differentiation. - Sliders are not that necessary, as the field of view can be adjusted by focal length. However, PTZ is necessary because it is needed to adjust the camera angle. - Red light illumination LEDs are placed at the 6 corners of the bracket for even illumination. Otherwise, a single light source can easily cause image shadows, leading to reduced accuracy in subsequent animal analysis. The light intensity is high, so part of it needs to be blocked to achieve a final illumination of about 20 lux. - Do not connect cameras directly to the computer's USB port, as the motherboard's USB bandwidth is severely limited and cannot connect multiple cameras simultaneously. Please use a professional-grade PCIE-USB expansion card (U3412U)!! Experimental Computer Hardware Configuration Used for collecting multi-camera video data and recording videos using OBS Studio. Name Model Notes Operating System Windows 10 - CPU Intel Core i7-12700 - GPU NVIDIA RTX 3060 OBS Studio calls its HEVC video encoder Memory 32GB DDR4 3200MHz - Storage SSD 1TB; HDD 8TB - PCIE-USB Expansion Card Shenzhen Susuyou Technology U3412U , 6-port USB Highly recommended, quantity x2 Cloud Computing Platform Hardware Configuration Used for training models, inference models; data analysis, visualization; cloud computing platform for closed-loop behavioral intervention. Name Model Notes Manufacturer Inspur - Operating System Ubuntu 18.04 - CPU Intel Xeon 4314 dual Dual CPU GPU NVIDIA RTX 3090 Quantity x4 Memory 256GB DDR4 3200MHz - Storage SSD 1TB; HDD 8TB - (Optional) Cloud Storage Hardware (NAS) Configuration Used for storing large amounts of experimental video data and analysis results, and supporting simultaneous access by multiple users. Name Model Notes Synology 1 DS2419+, 96 TB - Synology 2 RS2821RP+, 200 TB -","title":"Hardware List"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/shopping_list/#equipment-assembly-and-list","text":"Includes camera experimental box, experimental computer, and analysis server. Video tutorial: xxx","title":"Equipment Assembly and List"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/shopping_list/#camera-experimental-box","text":"The table below lists all cameras and materials used in the camera experimental box. Name Parameters Quantity Purchase Link K1S293 Camera 1280x800 resolution, 120fps, black and white 9 Taobao Purchase Link Aluminum Profile Bracket Hexagonal, double-layer bracket 1 Self-processing - PTZ and Slider 9 units 9 Taobao Purchase Link Red Light Illumination LED Ambient light illumination 6 Taobao Purchase Link Aluminum Oxide Calibration Board Chessboard, camera calibration; Model GP290 12x9 1 Taobao Purchase Link Metal Ball For camera extrinsic calibration, diameter <2 cm 1 Any source Acrylic Light Shield Used to block background clutter and prevent image interference. Size according to experimental requirements. 7 Taobao Purchase Link Notes: - The appropriate focal length of the camera lens needs to be tested by yourself. Factors such as camera distance and experimental box size will affect the choice of focal length. - It is recommended to let the camera manufacturer provide different software identifiers (different names) for each camera to facilitate differentiation. - Sliders are not that necessary, as the field of view can be adjusted by focal length. However, PTZ is necessary because it is needed to adjust the camera angle. - Red light illumination LEDs are placed at the 6 corners of the bracket for even illumination. Otherwise, a single light source can easily cause image shadows, leading to reduced accuracy in subsequent animal analysis. The light intensity is high, so part of it needs to be blocked to achieve a final illumination of about 20 lux. - Do not connect cameras directly to the computer's USB port, as the motherboard's USB bandwidth is severely limited and cannot connect multiple cameras simultaneously. Please use a professional-grade PCIE-USB expansion card (U3412U)!!","title":"Camera Experimental Box"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/shopping_list/#experimental-computer-hardware-configuration","text":"Used for collecting multi-camera video data and recording videos using OBS Studio. Name Model Notes Operating System Windows 10 - CPU Intel Core i7-12700 - GPU NVIDIA RTX 3060 OBS Studio calls its HEVC video encoder Memory 32GB DDR4 3200MHz - Storage SSD 1TB; HDD 8TB - PCIE-USB Expansion Card Shenzhen Susuyou Technology U3412U , 6-port USB Highly recommended, quantity x2","title":"Experimental Computer Hardware Configuration"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/shopping_list/#cloud-computing-platform-hardware-configuration","text":"Used for training models, inference models; data analysis, visualization; cloud computing platform for closed-loop behavioral intervention. Name Model Notes Manufacturer Inspur - Operating System Ubuntu 18.04 - CPU Intel Xeon 4314 dual Dual CPU GPU NVIDIA RTX 3090 Quantity x4 Memory 256GB DDR4 3200MHz - Storage SSD 1TB; HDD 8TB -","title":"Cloud Computing Platform Hardware Configuration"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/shopping_list/#optional-cloud-storage-hardware-nas-configuration","text":"Used for storing large amounts of experimental video data and analysis results, and supporting simultaneous access by multiple users. Name Model Notes Synology 1 DS2419+, 96 TB - Synology 2 RS2821RP+, 200 TB -","title":"(Optional) Cloud Storage Hardware (NAS) Configuration"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"Server Environment Configuration Only after configuring the server environment can the project run smoothly, including model training, inference, and animal behavior analysis processes. Paper Figure Reproduction\ud83d\udd17 does not require server environment configuration, only local environment configuration is needed. Server Environment Configuration Notice The deep learning environment is the core foundation of this project. We understand that environment setup can be a complex and challenging process, which is a common problem throughout the AI field. Although we are continuously optimizing the deployment process, the current project still has some version compatibility issues. We recommend that you be patient when configuring the environment and have a certain spirit of technical research to deal with possible challenges. Hardware Configuration Server hardware configuration includes: CPU : Intel Xeon 4314 Memory : 256 GB GPU : 4 NVIDIA GeForce RTX 3090 cards Storage : 1 TB SSD + 8 TB HDD Software Environment Software environment includes: Operating System : Ubuntu 18.04 Deep Learning Framework : CUDA 11.4, cuDNN 8.8, TensorRT 8.6 Development Tools : Python 3.7.16, OpenCV-Python 4.8.0, TensorFlow 2.7.0, PyTorch 1.11.0 Used for deep learning model training and data analysis. Important Warning Currently only supports Ubuntu system and NVIDIA graphics cards. Please refer to relevant materials for other systems. Important Warning Since the software was configured in 2019, some software versions may be outdated. It is recommended to choose the latest versions according to actual needs. Most Python libraries can be found in pip and conda, but some libraries may be difficult to install compatibly. This document cannot accommodate all software's latest versions. Please refer to relevant materials. Strongly Recommended Software List Software Name Local Test Version (2022) 2025 Version, Untested Notes Ubuntu 18.04 24.04 Operating system, recommended Python 3.7.16 3.12 Development language, required CUDA 11.4 12.9 Deep learning framework, required cuDNN 8.8 8.9 Deep learning framework, required TensorRT 8.6 10.13 Inference acceleration, required OpenCV-Python 4.8.0 4.12.0 Image processing, required TensorFlow 2.7.0 2.16.0 DANNCE model, required PyTorch 1.11.0 2.7.1 Deep learning framework, required Docker 24.0.6 28.3.0 Containerization, for Mediamtx FFmpeg 4.x 6.x Video reading and writing Mediamtx - - Video stream server, for closed-loop behavioral intervention Test Installation Environment After all software is installed, testing is required to ensure successful installation. Testing methods are as follows: Test nvidia cuda driver $ nvidia-smi Test Nvidia Cuda Compiler $ nvcc --version Test TensorRT Command Line Tools $ trtexec --onnx = /path/to/model.onnx --saveEngine = /path/to/model.engine Test polygraphy (NVIDIA Official Tool) Command Line Tools $ polygraphy inspect model --onnx = /path/to/model.onnx Test FFmpeg Command Line Tools # ffmpeg generate a 640x480 video, 30 fps, 1 minute $ ffmpeg -f lavfi -i testsrc = duration = 60 :size = 640x480:rate = 30 -c:v libx264 -pix_fmt yuv420p -f mp4 /path/to/test.mp4 # convert it to hevc by NVIDIA HEVC encoder $ ffmpeg -i /path/to/test.mp4 -c:v hevc_nvenc -pix_fmt yuv420p -f mp4 /path/to/test_hevc.mp4 Test Docker Command Line Tools $ docker run hello-world $ docker run --rm -it -e MTX_PROTOCOLS = tcp -p 8554 :8554 -p 1935 :1935 bluenviron/mediamtx Third-party Deep Learning Toolkits 1. OPEN-MMLAB/MMDETECTION Model This is an open-source project that provides MaskRCNN for object detection and segmentation. We forked it (in 2022) and added custom models and configuration files to achieve multi-rat segmentation. Please refer to MMdetection's official documentation for installation instructions. Code address: https://github.com/chenxinfeng4/mmdetection.git Important Warning We forked MMDET 1.x version, which currently supports python3.7; the latest MMDET on the official website is 3.x version, which may have serious compatibility issues. Please choose the appropriate version according to actual needs. 2. OPEN-MMLAB/MMPOSE Model This is an open-source project that provides MaskRCNN for human pose keypoint detection. We forked it (in 2022) and added custom models and configuration files to achieve ball detection. Please refer to MMpose's official documentation for installation instructions. Code address: https://github.com/chenxinfeng4/mmpose.git Important Warning We forked MMPOSE 0.x version. New versions and environments may have compatibility issues. Please choose the appropriate version according to actual needs. 3. YOLO-v8 Model This is a lightweight object detection and instance segmentation open-source project. We forked it (in 2024) and added custom models and configuration files to achieve real-time multi-rat segmentation. Code address: https://github.com/chenxinfeng4/ultralytics.git Important Warning Our forked version may have compatibility issues with the latest version. Please choose the appropriate version according to actual needs. 4. DANNCE Model This is a library for multi-view animal pose estimation. We forked it (in 2022) and added custom models and configuration files to achieve real-time multi-rat 3D keypoint recognition. Code address: https://github.com/chenxinfeng4/dannce.git Important Warning Our forked version may have compatibility issues with the latest version. Moreover, this library has high prediction accuracy but slow speed. We performed speed optimization, which caused some differences from the original code and more compatibility issues. Installation is relatively troublesome, and we are optimizing the installation documentation. 5. SmoothNet Model This is a library for pose time smoothing. We forked it (in 2022) and added custom models and configuration files to achieve real-time multi-rat 3D keypoint smoothing. Code address: https://github.com/chenxinfeng4/SmoothNet.git Important Warning Our forked version may have compatibility issues with the latest version. Please choose the appropriate version according to actual needs. Install Python Packages Created and Modified by This Project 1. LILAB Analysis Toolkit Contains common analysis tools, such as camera calibration process, rat segmentation and pose estimation process, behavior recognition process, big data mining related tools, etc. Code address: https://github.com/chenxinfeng4/LILAB-py.git Installation method: git clone https://github.com/chenxinfeng4/LILAB-py.git cd LILAB-py pip install -e . Important Warning Contains many process tools with overly large dependencies, so automatic dependency installation is not performed. If import errors occur, dependencies need to be installed manually. 2. FFMPEGCV Toolkit GPU-accelerated video processing toolkit, convenient for multi-camera video reading and writing, which is 9 times faster than OpenCV in certain scenarios. After I open-sourced it, the annual download volume is 70,000 times . See corresponding documentation . Code address: https://github.com/chenxinfeng4/ffmpegcv.git Installation method: pip install ffmpegcv Important Warning To use GPU acceleration, NVIDIA-driver is required. 3. multiview_calib Toolkit Camera extrinsic calibration (ball calibration) toolkit. Based on third-party libraries, it has been optimized and custom calibration processes have been added. See corresponding documentation . Code address: https://github.com/chenxinfeng4/multiview_calib.git Installation method: pip install git+https://github.com/chenxinfeng4/multiview_calib.git # Simple ball calibration tutorial git clone https://github.com/chenxinfeng4/multiview_ball_calib 4. Other Modified Toolkits torch2trt : torch2trt modification, supporting direct loading of engine files. pip install git+https://github.com/chenxinfeng4/torch2trt cocoapi : Multi-threading version of cocoapi to improve speed. pip install git+https://github.com/chenxinfeng4/cocoapi mmdetection-to-tensorrt : Converting Mask-RCNN model to tensorrt model. pip install git+https://github.com/chenxinfeng4/mmdetection-to-tensorrt","title":"Server Environment Configuration"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#server-environment-configuration","text":"Only after configuring the server environment can the project run smoothly, including model training, inference, and animal behavior analysis processes. Paper Figure Reproduction\ud83d\udd17 does not require server environment configuration, only local environment configuration is needed. Server Environment Configuration Notice The deep learning environment is the core foundation of this project. We understand that environment setup can be a complex and challenging process, which is a common problem throughout the AI field. Although we are continuously optimizing the deployment process, the current project still has some version compatibility issues. We recommend that you be patient when configuring the environment and have a certain spirit of technical research to deal with possible challenges.","title":"Server Environment Configuration"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#hardware-configuration","text":"Server hardware configuration includes: CPU : Intel Xeon 4314 Memory : 256 GB GPU : 4 NVIDIA GeForce RTX 3090 cards Storage : 1 TB SSD + 8 TB HDD","title":"Hardware Configuration"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#software-environment","text":"Software environment includes: Operating System : Ubuntu 18.04 Deep Learning Framework : CUDA 11.4, cuDNN 8.8, TensorRT 8.6 Development Tools : Python 3.7.16, OpenCV-Python 4.8.0, TensorFlow 2.7.0, PyTorch 1.11.0 Used for deep learning model training and data analysis. Important Warning Currently only supports Ubuntu system and NVIDIA graphics cards. Please refer to relevant materials for other systems. Important Warning Since the software was configured in 2019, some software versions may be outdated. It is recommended to choose the latest versions according to actual needs. Most Python libraries can be found in pip and conda, but some libraries may be difficult to install compatibly. This document cannot accommodate all software's latest versions. Please refer to relevant materials.","title":"Software Environment"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#strongly-recommended-software-list","text":"Software Name Local Test Version (2022) 2025 Version, Untested Notes Ubuntu 18.04 24.04 Operating system, recommended Python 3.7.16 3.12 Development language, required CUDA 11.4 12.9 Deep learning framework, required cuDNN 8.8 8.9 Deep learning framework, required TensorRT 8.6 10.13 Inference acceleration, required OpenCV-Python 4.8.0 4.12.0 Image processing, required TensorFlow 2.7.0 2.16.0 DANNCE model, required PyTorch 1.11.0 2.7.1 Deep learning framework, required Docker 24.0.6 28.3.0 Containerization, for Mediamtx FFmpeg 4.x 6.x Video reading and writing Mediamtx - - Video stream server, for closed-loop behavioral intervention","title":"Strongly Recommended Software List"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#test-installation-environment","text":"After all software is installed, testing is required to ensure successful installation. Testing methods are as follows:","title":"Test Installation Environment"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#test-nvidia-cuda-driver","text":"$ nvidia-smi","title":"Test nvidia cuda driver"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#test-nvidia-cuda-compiler","text":"$ nvcc --version","title":"Test Nvidia Cuda Compiler"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#test-tensorrt-command-line-tools","text":"$ trtexec --onnx = /path/to/model.onnx --saveEngine = /path/to/model.engine","title":"Test TensorRT Command Line Tools"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#test-polygraphy-nvidia-official-tool-command-line-tools","text":"$ polygraphy inspect model --onnx = /path/to/model.onnx","title":"Test polygraphy (NVIDIA Official Tool) Command Line Tools"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#test-ffmpeg-command-line-tools","text":"# ffmpeg generate a 640x480 video, 30 fps, 1 minute $ ffmpeg -f lavfi -i testsrc = duration = 60 :size = 640x480:rate = 30 -c:v libx264 -pix_fmt yuv420p -f mp4 /path/to/test.mp4 # convert it to hevc by NVIDIA HEVC encoder $ ffmpeg -i /path/to/test.mp4 -c:v hevc_nvenc -pix_fmt yuv420p -f mp4 /path/to/test_hevc.mp4","title":"Test FFmpeg Command Line Tools"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#test-docker-command-line-tools","text":"$ docker run hello-world $ docker run --rm -it -e MTX_PROTOCOLS = tcp -p 8554 :8554 -p 1935 :1935 bluenviron/mediamtx","title":"Test Docker Command Line Tools"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#third-party-deep-learning-toolkits","text":"","title":"Third-party Deep Learning Toolkits"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#1-open-mmlabmmdetection-model","text":"This is an open-source project that provides MaskRCNN for object detection and segmentation. We forked it (in 2022) and added custom models and configuration files to achieve multi-rat segmentation. Please refer to MMdetection's official documentation for installation instructions. Code address: https://github.com/chenxinfeng4/mmdetection.git Important Warning We forked MMDET 1.x version, which currently supports python3.7; the latest MMDET on the official website is 3.x version, which may have serious compatibility issues. Please choose the appropriate version according to actual needs.","title":"1. OPEN-MMLAB/MMDETECTION Model"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#2-open-mmlabmmpose-model","text":"This is an open-source project that provides MaskRCNN for human pose keypoint detection. We forked it (in 2022) and added custom models and configuration files to achieve ball detection. Please refer to MMpose's official documentation for installation instructions. Code address: https://github.com/chenxinfeng4/mmpose.git Important Warning We forked MMPOSE 0.x version. New versions and environments may have compatibility issues. Please choose the appropriate version according to actual needs.","title":"2. OPEN-MMLAB/MMPOSE Model"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#3-yolo-v8-model","text":"This is a lightweight object detection and instance segmentation open-source project. We forked it (in 2024) and added custom models and configuration files to achieve real-time multi-rat segmentation. Code address: https://github.com/chenxinfeng4/ultralytics.git Important Warning Our forked version may have compatibility issues with the latest version. Please choose the appropriate version according to actual needs.","title":"3. YOLO-v8 Model"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#4-dannce-model","text":"This is a library for multi-view animal pose estimation. We forked it (in 2022) and added custom models and configuration files to achieve real-time multi-rat 3D keypoint recognition. Code address: https://github.com/chenxinfeng4/dannce.git Important Warning Our forked version may have compatibility issues with the latest version. Moreover, this library has high prediction accuracy but slow speed. We performed speed optimization, which caused some differences from the original code and more compatibility issues. Installation is relatively troublesome, and we are optimizing the installation documentation.","title":"4. DANNCE Model"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#5-smoothnet-model","text":"This is a library for pose time smoothing. We forked it (in 2022) and added custom models and configuration files to achieve real-time multi-rat 3D keypoint smoothing. Code address: https://github.com/chenxinfeng4/SmoothNet.git Important Warning Our forked version may have compatibility issues with the latest version. Please choose the appropriate version according to actual needs.","title":"5. SmoothNet Model"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#install-python-packages-created-and-modified-by-this-project","text":"","title":"Install Python Packages Created and Modified by This Project"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#1-lilab-analysis-toolkit","text":"Contains common analysis tools, such as camera calibration process, rat segmentation and pose estimation process, behavior recognition process, big data mining related tools, etc. Code address: https://github.com/chenxinfeng4/LILAB-py.git Installation method: git clone https://github.com/chenxinfeng4/LILAB-py.git cd LILAB-py pip install -e . Important Warning Contains many process tools with overly large dependencies, so automatic dependency installation is not performed. If import errors occur, dependencies need to be installed manually.","title":"1. LILAB Analysis Toolkit"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#2-ffmpegcv-toolkit","text":"GPU-accelerated video processing toolkit, convenient for multi-camera video reading and writing, which is 9 times faster than OpenCV in certain scenarios. After I open-sourced it, the annual download volume is 70,000 times . See corresponding documentation . Code address: https://github.com/chenxinfeng4/ffmpegcv.git Installation method: pip install ffmpegcv Important Warning To use GPU acceleration, NVIDIA-driver is required.","title":"2. FFMPEGCV Toolkit"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#3-multiview_calib-toolkit","text":"Camera extrinsic calibration (ball calibration) toolkit. Based on third-party libraries, it has been optimized and custom calibration processes have been added. See corresponding documentation . Code address: https://github.com/chenxinfeng4/multiview_calib.git Installation method: pip install git+https://github.com/chenxinfeng4/multiview_calib.git # Simple ball calibration tutorial git clone https://github.com/chenxinfeng4/multiview_ball_calib","title":"3. multiview_calib Toolkit"},{"location":"en/%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#4-other-modified-toolkits","text":"torch2trt : torch2trt modification, supporting direct loading of engine files. pip install git+https://github.com/chenxinfeng4/torch2trt cocoapi : Multi-threading version of cocoapi to improve speed. pip install git+https://github.com/chenxinfeng4/cocoapi mmdetection-to-tensorrt : Converting Mask-RCNN model to tensorrt model. pip install git+https://github.com/chenxinfeng4/mmdetection-to-tensorrt","title":"4. Other Modified Toolkits"},{"location":"en/%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/application/","text":"Closed-loop Behavior Control \u26a1\ufe0f Achieve precise behavior control using optogenetic technology and form a closed-loop feedback system through real-time behavior analysis. \u2753 Challenge : Real-time behavior recognition involves heavy computational load, making it difficult to deploy complete models in experimental environments; small models on edge devices lack accuracy; non-specific dopamine stimulation has limited effects on improving autism behaviors. \ud83d\udca1 Solution : Use cloud computing for behavior recognition, uploading experimental videos to the cloud platform for processing and returning results. Reduce latency through model lightweighting and GPU pipeline parallel optimization, and establish an autism behavior-optogenetic reinforcement learning paradigm to provide specific dopamine light stimulation when play behavior is recognized. \ud83c\udf89 Effect : Behavior recognition delay is only 266ms with an accuracy rate of 80%. Specific optogenetic reinforcement learning significantly improves play behavior in autism rats (Shank3+/-), enhancing social abilities and reducing non-social behaviors. Design Principles and Precision Measurement Deploy the behavior recognition model in the cloud to achieve closed-loop behavior control through real-time video stream uploading. The model is lightweighted and optimized with GPU pipeline parallelization to reduce computational latency. The optogenetic laser is controlled by an Arduino board to emit pulse light stimulation at 40Hz 5ms, 0.5s duration. In the experimental design, the experimental group receives dopamine release light stimulation when Shank3+/- rats actively play; the control group receives random light stimulation under non-play behavior conditions, keeping the total amount of light stimulation consistent. Test results (n=32 videos) show that the experimental group gives light during play over 90%, while the control group is less than 10%. The experimental group allocates more light stimulation to play-related social behaviors, while the control group allocates more to non-social behaviors. This shows the precision of closed-loop behavior control. Eventually, improved play behavior and social abilities in Shank3+/- rats were observed.","title":"Applications"},{"location":"en/%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/application/#closed-loop-behavior-control","text":"Achieve precise behavior control using optogenetic technology and form a closed-loop feedback system through real-time behavior analysis. \u2753 Challenge : Real-time behavior recognition involves heavy computational load, making it difficult to deploy complete models in experimental environments; small models on edge devices lack accuracy; non-specific dopamine stimulation has limited effects on improving autism behaviors. \ud83d\udca1 Solution : Use cloud computing for behavior recognition, uploading experimental videos to the cloud platform for processing and returning results. Reduce latency through model lightweighting and GPU pipeline parallel optimization, and establish an autism behavior-optogenetic reinforcement learning paradigm to provide specific dopamine light stimulation when play behavior is recognized. \ud83c\udf89 Effect : Behavior recognition delay is only 266ms with an accuracy rate of 80%. Specific optogenetic reinforcement learning significantly improves play behavior in autism rats (Shank3+/-), enhancing social abilities and reducing non-social behaviors.","title":"Closed-loop Behavior Control \u26a1\ufe0f"},{"location":"en/%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/application/#design-principles-and-precision-measurement","text":"Deploy the behavior recognition model in the cloud to achieve closed-loop behavior control through real-time video stream uploading. The model is lightweighted and optimized with GPU pipeline parallelization to reduce computational latency. The optogenetic laser is controlled by an Arduino board to emit pulse light stimulation at 40Hz 5ms, 0.5s duration. In the experimental design, the experimental group receives dopamine release light stimulation when Shank3+/- rats actively play; the control group receives random light stimulation under non-play behavior conditions, keeping the total amount of light stimulation consistent. Test results (n=32 videos) show that the experimental group gives light during play over 90%, while the control group is less than 10%. The experimental group allocates more light stimulation to play-related social behaviors, while the control group allocates more to non-social behaviors. This shows the precision of closed-loop behavior control. Eventually, improved play behavior and social abilities in Shank3+/- rats were observed.","title":"Design Principles and Precision Measurement"},{"location":"en/%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/","text":"Code Process Developer: Chenxinfeng, update 2025-08-16 The general code process for closed-loop behavior control is as follows: The corresponding code operations are as follows: 1. Start virtual camera for timestamp marking Operate on the DAQ PC, which runs Windows. OBS Studio version 29.1. OBS needs to add a virtual camera (\"OBS Virtual Camera\"), and the Python code will output time codes (e.g., 163) to this camera frame. The time code value is determined by the PC clock and updated every 33ms (30fps to match the video frame rate). The current clock value is also stored on the server 10.50.7.109:20173 for other devices to access to get the current time code. Download from github, virtual_LED.py \ud83d\udd17 . Execute this script in the terminal to start the virtual camera and start the socket service. python3 virtual_LED.py Tip It is recommended to save it as a windows bat file and double-click to run directly. This script also has the function of lighting up the virtual LED color, which can be used for video event tagging, such as for optogenetic Laser trigger event tagging. For details, please refer to \u3010#7\u3011 GUI code. Note You need to install the dependent libraries yourself. Let the DAQ PC firewall open 20173. 2. Update camera and rat model in code Users need to provide the latest multi-camera model file and rat social keypoint model file, and update them in the code. The former is used for 3D reconstruction; the latter is used to calculate the body length of rats of the same age, which is convenient for behavior feature normalization. Usually, the Rat Social Keypoint Model file contains the Multi-Camera Model , so let the multi-camera model equal the Rat Social Keypoint Model . Modify CALIBPKL in lilab/label_live/usv_yolo_seg_dannce_unit_test.py to the multi-camera model path, and model_smooth_matcalibpkl to the rat social keypoint model path. # PATH_TO_LILAB/lilab/label_live/usv_yolo_seg_dannce_unit_test.py CALIBPKL = '/mnt/liying.cibr.ac.cn_Data_Temp_ZZC2/2506batch-chr2/test/ball/2025-06-13_10-16-58_ball.calibpkl' model_smooth_matcalibpkl = '/DATA/zhongzhenchao/2501chr2-shank3/all400p/2025-01-05_15-04-37_l7_sm1_pm6.smoothed_foot.matcalibpkl' model_smooth_matcalibpkl = CALIBPKL = '/a/b/c.matcalibpkl' 3. Start result server daemon source activate mmdet # activate the conda environment python -m lilab.label_live.socketServer Note Pay attention to the Cloud Server firewall and open port 8002. If the port is occupied, it is often because the previous Python program did not close normally. Please close the program that occupies this port first, or execute lsof -i:8002 to view the process that occupies this port, and then kill the process ( kill -9 process number ). Wait for 10 seconds and restart the program. Try multiple times. 4. Start media server daemon Mediamtx Start Mediamtx on Cloud Server to receive OBS streaming and forward it to clients. docker run --rm -it -p 8554 :8554 bluenviron/mediamtx Note Pay attention to the Cloud Server firewall and open port 8554. 5. Start OBS video stream Start OBS on DAQ PC and stream to Cloud Server's Mediamtx. I have configured OBS, and you can start the streaming configuration through the following simple operation: Select, menu>Profile>Social-seq-live streaming Select, menu>Scene Collection>Social-seq-live-push Then click the \"Start Recording\" button (note not \"Start Live Streaming\") to start streaming. If no error prompt pops up within 20 seconds, the streaming is successful. For a new DAQ PC, you need to reconfigure OBS. The specific steps are as follows: Tip Resolution and encoding method are important parameters that affect streaming delay, especially the project's 3840x2400 is a high resolution. This RTSP parameter setting has been tested in various ways, with low delay and good picture quality. Other video streaming projects can refer to this parameter setting. Note Pay attention to OBS's streaming address, which needs to fill in the Cloud Server's IP address, should be rtsp://10.50.60.6:8554/mystream_9cam . You can use tools such as VLC or ffplay to test whether the stream can be played normally. The computer's performance determines the smoothness of the streaming. If the computer's performance is poor, the streaming may not be smooth or there may be stuttering. In addition, the bitrate needs to be set low at 8Mbps, otherwise the streaming delay will be high. 6. Start behavior recognition pipeline code Start the behavior recognition program on Cloud Server to receive OBS streaming, recognize behaviors, and store the recognition result labels (Syllable ID) in the Result server daemon. source activate mmdet # activate the conda environment PATH = /usr/bin: $PATH python -m lilab.label_live.usv_yolo_seg_dannce_unit_test Note Pay attention to check for error messages. Make sure OBS has started streaming normally and the streaming address is correct. Note Check the terminal output frame rate (30fps) and delay (<10 frames). The display iteration should be about 30its/s, and the delay frame count should be within 6-10. Too high a delay frame (>30 frames) will seriously reduce the accuracy of closed-loop stimulation. The empirical reason is 1. The DAQ PC performance is too poor and needs to restart the OBS software (usually); or 2. Someone is using Cloud Server, preempting CPU and GPU resources, then clear these users' resources (communicate in advance). 7. Start Social-seq-live GUI Go to github to download Social-seq-live code and install the dependent packages. python main.py # GUI program, \"closed-loop control\" experimental group python main_exclude.py # GUI program, \"open-loop control\" control group Note Note that the GUI programs for the \"closed-loop control\" experimental group and the \"open-loop control\" control group are different. The operation steps are the same. Closed-loop control automatically starts stimulation after recognizing behavior. Open-loop control needs to exclude target behavior and give stimulation randomly. Then select the corresponding GUI program and start it. After connecting to Cloud Server and Arduino , behavior recognition and optogenetic control will start automatically. In the GUI, check the appropriate target behaviors, such as \"pouncing\", \"pinning\", \"chasing\", etc. Fill in the IP address of Cloud Server and click the \"Connect\" button to connect to the Result server daemon. Select the Arduino serial port and click the \"Connect\" button to connect to Arduino. ( Arduino needs to initialize the burning code, refer to \u3010#9\u3011 ) 8. Start ffmpeg code to dump video to file After the animal experiment starts, the video needs to be recorded. Since the original OBS recording function has been occupied, the video can only be recorded on Cloud Server. Save the following code as the RT_record.sh file of Cloud Server . After each animal experiment starts, run it. It will save a video file in the /DATA/chenxinfeng directory. The file name is the current time, such as 2025-01-01_12-00-00.mp4. #!/bin/bash # Save as RT_record file filename = ` date --date = '2.2 seconds' + \"%Y-%m-%d_%H-%M-%S\" ` /home/liying_lab/chenxinfeng/.conda/envs/mmdet/bin/ffmpeg.bak -rtsp_transport tcp -t 00 :15:06 -i rtsp://10.50.60.6:8554/mystream_9cam -ss 00 :00:02.2 -c:v hevc_nvenc -b:v 10M -maxrate:v 20M -preset:v p4 /DATA/chenxinfeng/ ${ filename } .mp4 9. Arduino Laser pulse Go to github to download Arduino Laser pulse code and burn it. const int PinNum = 6 ; // the number of the LED pin const float duration = 0 .5 ; // time for running, unit = sec. const float Hz = 40 ; // frequency, unit = Hz. const float Duty = 0 .2 ; // duty, unit = 0 ~1. This code indicates that Arduino's D6 pin is connected to the laser's trigger pin. The single stimulation time is 0.5 seconds, the laser frequency is 40Hz, and the duty cycle is 0.2 (5ms). Close OBS and GUI After the experiment ends, restore OBS configuration, close OBS software; close Social seq live GUI. On Cloude Server, close pipeline .","title":"Workflow"},{"location":"en/%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#code-process","text":"Developer: Chenxinfeng, update 2025-08-16 The general code process for closed-loop behavior control is as follows: The corresponding code operations are as follows:","title":"Code Process"},{"location":"en/%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#1-start-virtual-camera-for-timestamp-marking","text":"Operate on the DAQ PC, which runs Windows. OBS Studio version 29.1. OBS needs to add a virtual camera (\"OBS Virtual Camera\"), and the Python code will output time codes (e.g., 163) to this camera frame. The time code value is determined by the PC clock and updated every 33ms (30fps to match the video frame rate). The current clock value is also stored on the server 10.50.7.109:20173 for other devices to access to get the current time code. Download from github, virtual_LED.py \ud83d\udd17 . Execute this script in the terminal to start the virtual camera and start the socket service. python3 virtual_LED.py Tip It is recommended to save it as a windows bat file and double-click to run directly. This script also has the function of lighting up the virtual LED color, which can be used for video event tagging, such as for optogenetic Laser trigger event tagging. For details, please refer to \u3010#7\u3011 GUI code. Note You need to install the dependent libraries yourself. Let the DAQ PC firewall open 20173.","title":"1. Start virtual camera for timestamp marking"},{"location":"en/%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#2-update-camera-and-rat-model-in-code","text":"Users need to provide the latest multi-camera model file and rat social keypoint model file, and update them in the code. The former is used for 3D reconstruction; the latter is used to calculate the body length of rats of the same age, which is convenient for behavior feature normalization. Usually, the Rat Social Keypoint Model file contains the Multi-Camera Model , so let the multi-camera model equal the Rat Social Keypoint Model . Modify CALIBPKL in lilab/label_live/usv_yolo_seg_dannce_unit_test.py to the multi-camera model path, and model_smooth_matcalibpkl to the rat social keypoint model path. # PATH_TO_LILAB/lilab/label_live/usv_yolo_seg_dannce_unit_test.py CALIBPKL = '/mnt/liying.cibr.ac.cn_Data_Temp_ZZC2/2506batch-chr2/test/ball/2025-06-13_10-16-58_ball.calibpkl' model_smooth_matcalibpkl = '/DATA/zhongzhenchao/2501chr2-shank3/all400p/2025-01-05_15-04-37_l7_sm1_pm6.smoothed_foot.matcalibpkl' model_smooth_matcalibpkl = CALIBPKL = '/a/b/c.matcalibpkl'","title":"2. Update camera and rat model in code"},{"location":"en/%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#3-start-result-server-daemon","text":"source activate mmdet # activate the conda environment python -m lilab.label_live.socketServer Note Pay attention to the Cloud Server firewall and open port 8002. If the port is occupied, it is often because the previous Python program did not close normally. Please close the program that occupies this port first, or execute lsof -i:8002 to view the process that occupies this port, and then kill the process ( kill -9 process number ). Wait for 10 seconds and restart the program. Try multiple times.","title":"3. Start result server daemon"},{"location":"en/%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#4-start-media-server-daemon-mediamtx","text":"Start Mediamtx on Cloud Server to receive OBS streaming and forward it to clients. docker run --rm -it -p 8554 :8554 bluenviron/mediamtx Note Pay attention to the Cloud Server firewall and open port 8554.","title":"4. Start media server daemon Mediamtx"},{"location":"en/%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#5-start-obs-video-stream","text":"Start OBS on DAQ PC and stream to Cloud Server's Mediamtx. I have configured OBS, and you can start the streaming configuration through the following simple operation: Select, menu>Profile>Social-seq-live streaming Select, menu>Scene Collection>Social-seq-live-push Then click the \"Start Recording\" button (note not \"Start Live Streaming\") to start streaming. If no error prompt pops up within 20 seconds, the streaming is successful. For a new DAQ PC, you need to reconfigure OBS. The specific steps are as follows: Tip Resolution and encoding method are important parameters that affect streaming delay, especially the project's 3840x2400 is a high resolution. This RTSP parameter setting has been tested in various ways, with low delay and good picture quality. Other video streaming projects can refer to this parameter setting. Note Pay attention to OBS's streaming address, which needs to fill in the Cloud Server's IP address, should be rtsp://10.50.60.6:8554/mystream_9cam . You can use tools such as VLC or ffplay to test whether the stream can be played normally. The computer's performance determines the smoothness of the streaming. If the computer's performance is poor, the streaming may not be smooth or there may be stuttering. In addition, the bitrate needs to be set low at 8Mbps, otherwise the streaming delay will be high.","title":"5. Start OBS video stream"},{"location":"en/%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#6-start-behavior-recognition-pipeline-code","text":"Start the behavior recognition program on Cloud Server to receive OBS streaming, recognize behaviors, and store the recognition result labels (Syllable ID) in the Result server daemon. source activate mmdet # activate the conda environment PATH = /usr/bin: $PATH python -m lilab.label_live.usv_yolo_seg_dannce_unit_test Note Pay attention to check for error messages. Make sure OBS has started streaming normally and the streaming address is correct. Note Check the terminal output frame rate (30fps) and delay (<10 frames). The display iteration should be about 30its/s, and the delay frame count should be within 6-10. Too high a delay frame (>30 frames) will seriously reduce the accuracy of closed-loop stimulation. The empirical reason is 1. The DAQ PC performance is too poor and needs to restart the OBS software (usually); or 2. Someone is using Cloud Server, preempting CPU and GPU resources, then clear these users' resources (communicate in advance).","title":"6. Start behavior recognition pipeline code"},{"location":"en/%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#7-start-social-seq-live-gui","text":"Go to github to download Social-seq-live code and install the dependent packages. python main.py # GUI program, \"closed-loop control\" experimental group python main_exclude.py # GUI program, \"open-loop control\" control group Note Note that the GUI programs for the \"closed-loop control\" experimental group and the \"open-loop control\" control group are different. The operation steps are the same. Closed-loop control automatically starts stimulation after recognizing behavior. Open-loop control needs to exclude target behavior and give stimulation randomly. Then select the corresponding GUI program and start it. After connecting to Cloud Server and Arduino , behavior recognition and optogenetic control will start automatically. In the GUI, check the appropriate target behaviors, such as \"pouncing\", \"pinning\", \"chasing\", etc. Fill in the IP address of Cloud Server and click the \"Connect\" button to connect to the Result server daemon. Select the Arduino serial port and click the \"Connect\" button to connect to Arduino. ( Arduino needs to initialize the burning code, refer to \u3010#9\u3011 )","title":"7. Start Social-seq-live GUI"},{"location":"en/%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#8-start-ffmpeg-code-to-dump-video-to-file","text":"After the animal experiment starts, the video needs to be recorded. Since the original OBS recording function has been occupied, the video can only be recorded on Cloud Server. Save the following code as the RT_record.sh file of Cloud Server . After each animal experiment starts, run it. It will save a video file in the /DATA/chenxinfeng directory. The file name is the current time, such as 2025-01-01_12-00-00.mp4. #!/bin/bash # Save as RT_record file filename = ` date --date = '2.2 seconds' + \"%Y-%m-%d_%H-%M-%S\" ` /home/liying_lab/chenxinfeng/.conda/envs/mmdet/bin/ffmpeg.bak -rtsp_transport tcp -t 00 :15:06 -i rtsp://10.50.60.6:8554/mystream_9cam -ss 00 :00:02.2 -c:v hevc_nvenc -b:v 10M -maxrate:v 20M -preset:v p4 /DATA/chenxinfeng/ ${ filename } .mp4","title":"8. Start ffmpeg code to dump video to file"},{"location":"en/%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#9-arduino-laser-pulse","text":"Go to github to download Arduino Laser pulse code and burn it. const int PinNum = 6 ; // the number of the LED pin const float duration = 0 .5 ; // time for running, unit = sec. const float Hz = 40 ; // frequency, unit = Hz. const float Duty = 0 .2 ; // duty, unit = 0 ~1. This code indicates that Arduino's D6 pin is connected to the laser's trigger pin. The single stimulation time is 0.5 seconds, the laser frequency is 40Hz, and the duty cycle is 0.2 (5ms).","title":"9. Arduino Laser pulse"},{"location":"en/%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#close-obs-and-gui","text":"After the experiment ends, restore OBS configuration, close OBS software; close Social seq live GUI. On Cloude Server, close pipeline .","title":"Close OBS and GUI"},{"location":"figure_reproduce/","text":"\u8bba\u6587\u4ee3\u7801\u590d\u73b0 \"(2025) Decoding the Valence of Developmental Social Behavior: Dopamine Governs Social Motivation Deficits in Autism. In preparation\" \u4f5c\u8005 : \u9648\u6615\u67ab, 2025-08-09 \u4fee\u6539 : \u9676\u73b0\u660e\uff0c2025-08-15 Figures \u56fe\u5e93 \u8fd0\u884c\u6b64\u4ed3\u5e93\u4e2d\u7684\u4ee3\u7801\u4ee5\u590d\u73b0\u8bba\u6587\u4e2d\u7684\u56fe\u8868\u3002 \u4ee3\u7801\u548c\u6570\u636e\u4e0b\u8f7d \u6570\u636e\u548c\u4ee3\u7801\u5df2\u5f00\u6e90\uff0c\u94fe\u63a5\u4e3a Figshare_DATA_20250818.zip ( ~1.0 GB )\u3002 \u4e0b\u8f7d\u540e\u89e3\u538b\u5230\u6587\u4ef6\u5939\uff0c\u547d\u540d\u4e3a Figshare \u3002 \u5b89\u88c5 \u652f\u6301 Windows\u3001Linux \u548c MacOS \u7cfb\u7edf\u3002 \u9996\u5148\uff0c\u901a\u8fc7 uv \u5de5\u5177 \u5b89\u88c5\u4f9d\u8d56\u73af\u5883 \u3002 !!!warning \"\u8b66\u544a\u201d \u4e0d\u8981\u540c\u65f6\u4f7f\u7528 uv \u548c conda \u3002\u8fd9\u4f1a\u5bfc\u81f4\u5305\u5b89\u88c5\u51b2\u7a81\u3002\u5728\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\u4e4b\u524d\uff0c\u8bf7\u5148\u8fd0\u884c conda deactivate \u3002 # \u5728\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\u4e4b\u524d\uff0c\u8bf7\u4e0b\u8f7d FIGSHARE \u4ee3\u7801\u548c\u6570\u636e\u3002 unzip Figshare_DATA_2025*.zip -d Figshare cd Figshare python3 -m pip install uv # UV \u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684 Python \u5305\u7ba1\u7406\u5668\uff0c\u7c7b\u4f3c\u4e8e conda\u3002 uv sync --index-url https://pypi.tuna.tsinghua.edu.cn/simple # \u4e2d\u56fd\u7528\u6237\u53ef\u9009\u6e05\u534e\u955c\u50cf\u6e90\uff0c\u5426\u5219\u5b89\u88c5\u901f\u5ea6\u5f88\u6162\u3002 uv run python --version # \u9a8c\u8bc1 Python \u7248\u672c\uff08\u5e94\u4e3a 3.12\uff09 \u5b89\u88c5\u81ea\u5b9a\u4e49\u5305 uv pip install git+https://github.com/chenxinfeng4/multiview_calib.git git clone https://github.com/chenxinfeng4/LILAB-py.git ../LILAB-py uv pip install -e ../LILAB-py uv run python -m lilab.multiview_scripts_dev.p1_checkboard_global -h # \u9a8c\u8bc1\u5b89\u88c5 \u751f\u6210\u5355\u4e2a\u56fe\u8868\uff1aFig1C.pdf \u60a8\u53ef\u4ee5\u9010\u4e2a\u8fd0\u884c Fig*/Fig*.py \u4e2d\u7684\u4ee3\u7801\u6765\u751f\u6210\u56fe\u8868\u3002 uv run python Fig1_S1/Fig1C.py # \u7ed3\u679c\u4fdd\u5b58\u5230 Fig1_S1/result/Fig1C.pdf \u6ce8\u610f : \u5982\u679c\u51fa\u73b0\u4efb\u4f55\u9519\u8bef\uff0c\u8bf7\u786e\u4fdd\u6240\u6709\u6570\u636e\u6587\u4ef6\u90fd\u5df2\u6b63\u786e\u4e0b\u8f7d\u3002 \u901a\u8fc7\u4e00\u4e2a\u547d\u4ee4\u751f\u6210\u6240\u6709\u56fe\u8868 uv run python main.py test \u751f\u6210 Fig1 .pdf, FigS1 .pdf, Fig2*.pdf, ... \u7ed3\u679c\u4fdd\u5b58\u5230\u76f8\u5e94\u7684\u6587\u4ef6\u5939\u4e2d\u3002 Fig*/result/*.pdf \uff0c\u4f8b\u5982 Fig1_S1/result/Fig1E.pdf \u3002 \u6e05\u7406\u6240\u6709\u7ed3\u679c\uff0c\u590d\u539f #1. \u5220\u9664\u6240\u6709\u7ed3\u679c\u6570\u636e uv run python main.py clean #2. \u6216\u8005\u624b\u52a8\u5220\u9664\u6240\u6709\u7ed3\u679c\u6570\u636e rm Fig*/result/*pdf Fig*/result/*pkl Fig*/result/*png","title":"\u6587\u7ae0\u56fe\u8868\u590d\u73b0"},{"location":"figure_reproduce/#_1","text":"\"(2025) Decoding the Valence of Developmental Social Behavior: Dopamine Governs Social Motivation Deficits in Autism. In preparation\" \u4f5c\u8005 : \u9648\u6615\u67ab, 2025-08-09 \u4fee\u6539 : \u9676\u73b0\u660e\uff0c2025-08-15","title":"\u8bba\u6587\u4ee3\u7801\u590d\u73b0"},{"location":"figure_reproduce/#figures","text":"\u8fd0\u884c\u6b64\u4ed3\u5e93\u4e2d\u7684\u4ee3\u7801\u4ee5\u590d\u73b0\u8bba\u6587\u4e2d\u7684\u56fe\u8868\u3002","title":"Figures \u56fe\u5e93"},{"location":"figure_reproduce/#_2","text":"\u6570\u636e\u548c\u4ee3\u7801\u5df2\u5f00\u6e90\uff0c\u94fe\u63a5\u4e3a Figshare_DATA_20250818.zip ( ~1.0 GB )\u3002 \u4e0b\u8f7d\u540e\u89e3\u538b\u5230\u6587\u4ef6\u5939\uff0c\u547d\u540d\u4e3a Figshare \u3002","title":"\u4ee3\u7801\u548c\u6570\u636e\u4e0b\u8f7d"},{"location":"figure_reproduce/#_3","text":"\u652f\u6301 Windows\u3001Linux \u548c MacOS \u7cfb\u7edf\u3002 \u9996\u5148\uff0c\u901a\u8fc7 uv \u5de5\u5177 \u5b89\u88c5\u4f9d\u8d56\u73af\u5883 \u3002 !!!warning \"\u8b66\u544a\u201d \u4e0d\u8981\u540c\u65f6\u4f7f\u7528 uv \u548c conda \u3002\u8fd9\u4f1a\u5bfc\u81f4\u5305\u5b89\u88c5\u51b2\u7a81\u3002\u5728\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\u4e4b\u524d\uff0c\u8bf7\u5148\u8fd0\u884c conda deactivate \u3002 # \u5728\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\u4e4b\u524d\uff0c\u8bf7\u4e0b\u8f7d FIGSHARE \u4ee3\u7801\u548c\u6570\u636e\u3002 unzip Figshare_DATA_2025*.zip -d Figshare cd Figshare python3 -m pip install uv # UV \u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684 Python \u5305\u7ba1\u7406\u5668\uff0c\u7c7b\u4f3c\u4e8e conda\u3002 uv sync --index-url https://pypi.tuna.tsinghua.edu.cn/simple # \u4e2d\u56fd\u7528\u6237\u53ef\u9009\u6e05\u534e\u955c\u50cf\u6e90\uff0c\u5426\u5219\u5b89\u88c5\u901f\u5ea6\u5f88\u6162\u3002 uv run python --version # \u9a8c\u8bc1 Python \u7248\u672c\uff08\u5e94\u4e3a 3.12\uff09 \u5b89\u88c5\u81ea\u5b9a\u4e49\u5305 uv pip install git+https://github.com/chenxinfeng4/multiview_calib.git git clone https://github.com/chenxinfeng4/LILAB-py.git ../LILAB-py uv pip install -e ../LILAB-py uv run python -m lilab.multiview_scripts_dev.p1_checkboard_global -h # \u9a8c\u8bc1\u5b89\u88c5","title":"\u5b89\u88c5"},{"location":"figure_reproduce/#fig1cpdf","text":"\u60a8\u53ef\u4ee5\u9010\u4e2a\u8fd0\u884c Fig*/Fig*.py \u4e2d\u7684\u4ee3\u7801\u6765\u751f\u6210\u56fe\u8868\u3002 uv run python Fig1_S1/Fig1C.py # \u7ed3\u679c\u4fdd\u5b58\u5230 Fig1_S1/result/Fig1C.pdf \u6ce8\u610f : \u5982\u679c\u51fa\u73b0\u4efb\u4f55\u9519\u8bef\uff0c\u8bf7\u786e\u4fdd\u6240\u6709\u6570\u636e\u6587\u4ef6\u90fd\u5df2\u6b63\u786e\u4e0b\u8f7d\u3002","title":"\u751f\u6210\u5355\u4e2a\u56fe\u8868\uff1aFig1C.pdf"},{"location":"figure_reproduce/#_4","text":"uv run python main.py test \u751f\u6210 Fig1 .pdf, FigS1 .pdf, Fig2*.pdf, ... \u7ed3\u679c\u4fdd\u5b58\u5230\u76f8\u5e94\u7684\u6587\u4ef6\u5939\u4e2d\u3002 Fig*/result/*.pdf \uff0c\u4f8b\u5982 Fig1_S1/result/Fig1E.pdf \u3002","title":"\u901a\u8fc7\u4e00\u4e2a\u547d\u4ee4\u751f\u6210\u6240\u6709\u56fe\u8868"},{"location":"figure_reproduce/#_5","text":"#1. \u5220\u9664\u6240\u6709\u7ed3\u679c\u6570\u636e uv run python main.py clean #2. \u6216\u8005\u624b\u52a8\u5220\u9664\u6240\u6709\u7ed3\u679c\u6570\u636e rm Fig*/result/*pdf Fig*/result/*pkl Fig*/result/*png","title":"\u6e05\u7406\u6240\u6709\u7ed3\u679c\uff0c\u590d\u539f"},{"location":"","text":"\u6b22\u8fce\u6765\u5230 Social-Seq \u9879\u76ee \u8fd9\u662f Social-Seq \u9879\u76ee\u7684\u4e00\u4e9b\u8bf4\u660e\u6587\u6863\u3002\u4f7f\u7528 Social-seq \u89e3\u6790\u52a8\u7269\u5bc6\u5207\u63a5\u89e6\u65f6\u7684\u4e09\u7ef4\u59ff\u6001\uff0c\u793e\u4ea4\u7c7b\u522b\uff0c\u4ee5\u53ca\u793e\u4ea4\u80cc\u540e\u7684\u60c5\u7eea\u72b6\u6001\u3002\u901a\u8fc7\u6784\u9020\u5b9e\u65f6\u884c\u4e3a\u5206\u7c7b\u7cfb\u7edf\uff0c\u6709\u671b\u6cbb\u7597\u5b64\u72ec\u75c7\uff08ASD\uff09\u793e\u4ea4\u969c\u788d\u3002 \u4ee3\u7801\u5730\u5740 \ud83d\udce6\uff1ahttps://github.com/LiLab-CIBR/Social_Seq \u9879\u76ee\u6587\u6863 \ud83d\udcda\uff1ahttps://lilab-cibr.github.io/Social_Seq/ \u5305\u542b\u5185\u5bb9 \u786c\u8f6f\u4ef6\u7cfb\u7edf\u5b89\u88c5 - \u5b89\u88c5\u591a\u76f8\u673a\u7cfb\u7edf\uff0c\u8c03\u8bd5OBS\uff0c\u542f\u7528F2\u540c\u6b65\u52a9\u624b\u3002 \u5c0f\u7403\u77eb\u6b63 - \u6807\u5b9a\u591a\u76f8\u673a\u7cfb\u7edf\u7684\u7a7a\u95f4\u5750\u6807\u7cfb\u3002 \u5c0f\u9f20\u56fe\u50cf\u5206\u5272 - \u5728\u590d\u6742\u80cc\u666f\u4e2d\uff0c\u4f7f\u7528\u5206\u5272\u6a21\u578b\uff0c\u589e\u5f3a\u5c0f\u9f20\u4fe1\u566a\u6bd4\u3002\u5355\u9f20\u3002 Social \u4e09\u7ef4\u5173\u952e\u70b9\u91cd\u6784 - \u4e24\u53ea\u5927\u9f20\u5206\u5272\u3001\u5173\u952e\u70b9\u9884\u6d4b\u3001\u5e73\u6ed1. Seq \u884c\u4e3a\u6807\u7b7e - \u83b7\u53d6\u5927\u9f20\u793e\u4ea4\u4e00\u81f4\u6027\u768436\u7c7b\u884c\u4e3a\u6807\u7b7e\u3002 \u4ee3\u7801\u53d1\u5e03 \ud83d\udcc5 \u6700\u540e\u66f4\u65b0\u65f6\u95f4 2025-8-15\uff0c\u4f5c\u8005 ChenXinfeng\u3002\ud83d\udc68\u200d\ud83d\udcbb \u5f15\u7528 \ud83d\udcda Xinfeng Chen; Xianming Tao; Zhenchao Zhong; Yuanqing Zhang; Yixuan Li; Ye Ouyang; Zhaoyi Ding; Min An; Miao Wang; Ying Li* (2025). Decoding the Valence of Developmental Social Behavior: Dopamine Governs Social Motivation Deficits in Autism. In preparation. \u9648\u6615\u67ab. (2025). \u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684\u52a8\u7269\u81ea\u7531\u793e\u4ea4\u884c\u4e3a\u5206\u6790\u7814\u7a76. \u535a\u58eb\u8bba\u6587\uff0c\u5317\u4eac\u5927\u5b66. \u5f00\u6e90\u8bb8\u53ef\u8bc1 \u672c\u9879\u76ee\u91c7\u7528 MIT \u8bb8\u53ef\u8bc1\u5f00\u6e90\u3002\u60a8\u53ef\u4ee5\u5728\u9075\u5b88\u8bb8\u53ef\u8bc1\u6761\u6b3e\u7684\u524d\u63d0\u4e0b\u81ea\u7531\u4f7f\u7528\u3001\u4fee\u6539\u548c\u5206\u53d1\u672c\u9879\u76ee\u7684\u4ee3\u7801\u3002 \u901a\u8baf\u4f5c\u8005 \ud83d\udcec \u674e\u83b9\uff1aliying","title":"\u9996\u9875"},{"location":"#social-seq","text":"\u8fd9\u662f Social-Seq \u9879\u76ee\u7684\u4e00\u4e9b\u8bf4\u660e\u6587\u6863\u3002\u4f7f\u7528 Social-seq \u89e3\u6790\u52a8\u7269\u5bc6\u5207\u63a5\u89e6\u65f6\u7684\u4e09\u7ef4\u59ff\u6001\uff0c\u793e\u4ea4\u7c7b\u522b\uff0c\u4ee5\u53ca\u793e\u4ea4\u80cc\u540e\u7684\u60c5\u7eea\u72b6\u6001\u3002\u901a\u8fc7\u6784\u9020\u5b9e\u65f6\u884c\u4e3a\u5206\u7c7b\u7cfb\u7edf\uff0c\u6709\u671b\u6cbb\u7597\u5b64\u72ec\u75c7\uff08ASD\uff09\u793e\u4ea4\u969c\u788d\u3002 \u4ee3\u7801\u5730\u5740 \ud83d\udce6\uff1ahttps://github.com/LiLab-CIBR/Social_Seq \u9879\u76ee\u6587\u6863 \ud83d\udcda\uff1ahttps://lilab-cibr.github.io/Social_Seq/","title":"\u6b22\u8fce\u6765\u5230 Social-Seq \u9879\u76ee"},{"location":"#_1","text":"\u786c\u8f6f\u4ef6\u7cfb\u7edf\u5b89\u88c5 - \u5b89\u88c5\u591a\u76f8\u673a\u7cfb\u7edf\uff0c\u8c03\u8bd5OBS\uff0c\u542f\u7528F2\u540c\u6b65\u52a9\u624b\u3002 \u5c0f\u7403\u77eb\u6b63 - \u6807\u5b9a\u591a\u76f8\u673a\u7cfb\u7edf\u7684\u7a7a\u95f4\u5750\u6807\u7cfb\u3002 \u5c0f\u9f20\u56fe\u50cf\u5206\u5272 - \u5728\u590d\u6742\u80cc\u666f\u4e2d\uff0c\u4f7f\u7528\u5206\u5272\u6a21\u578b\uff0c\u589e\u5f3a\u5c0f\u9f20\u4fe1\u566a\u6bd4\u3002\u5355\u9f20\u3002 Social \u4e09\u7ef4\u5173\u952e\u70b9\u91cd\u6784 - \u4e24\u53ea\u5927\u9f20\u5206\u5272\u3001\u5173\u952e\u70b9\u9884\u6d4b\u3001\u5e73\u6ed1. Seq \u884c\u4e3a\u6807\u7b7e - \u83b7\u53d6\u5927\u9f20\u793e\u4ea4\u4e00\u81f4\u6027\u768436\u7c7b\u884c\u4e3a\u6807\u7b7e\u3002","title":"\u5305\u542b\u5185\u5bb9"},{"location":"#_2","text":"\u6700\u540e\u66f4\u65b0\u65f6\u95f4 2025-8-15\uff0c\u4f5c\u8005 ChenXinfeng\u3002\ud83d\udc68\u200d\ud83d\udcbb","title":"\u4ee3\u7801\u53d1\u5e03 \ud83d\udcc5"},{"location":"#_3","text":"Xinfeng Chen; Xianming Tao; Zhenchao Zhong; Yuanqing Zhang; Yixuan Li; Ye Ouyang; Zhaoyi Ding; Min An; Miao Wang; Ying Li* (2025). Decoding the Valence of Developmental Social Behavior: Dopamine Governs Social Motivation Deficits in Autism. In preparation. \u9648\u6615\u67ab. (2025). \u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684\u52a8\u7269\u81ea\u7531\u793e\u4ea4\u884c\u4e3a\u5206\u6790\u7814\u7a76. \u535a\u58eb\u8bba\u6587\uff0c\u5317\u4eac\u5927\u5b66.","title":"\u5f15\u7528 \ud83d\udcda"},{"location":"#_4","text":"\u672c\u9879\u76ee\u91c7\u7528 MIT \u8bb8\u53ef\u8bc1\u5f00\u6e90\u3002\u60a8\u53ef\u4ee5\u5728\u9075\u5b88\u8bb8\u53ef\u8bc1\u6761\u6b3e\u7684\u524d\u63d0\u4e0b\u81ea\u7531\u4f7f\u7528\u3001\u4fee\u6539\u548c\u5206\u53d1\u672c\u9879\u76ee\u7684\u4ee3\u7801\u3002","title":"\u5f00\u6e90\u8bb8\u53ef\u8bc1"},{"location":"#_5","text":"\u674e\u83b9\uff1aliying","title":"\u901a\u8baf\u4f5c\u8005 \ud83d\udcec"},{"location":"%E5%8D%95%E9%BC%A0%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/application/","text":"","title":"Application"},{"location":"%E5%8D%95%E9%BC%A0%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/","text":"","title":"Dataset"},{"location":"%E5%8D%95%E9%BC%A0%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/process/","text":"\u5355\u53ea\u5927\u9f20\u4e09\u7ef4\u59ff\u6001\u91cd\u6784 \u5f00\u53d1\u8005\uff1a\u9648\u6615\u67ab\uff0c 2025-8-15 \u9700\u8981\uff1a * *.calib - \u5c0f\u7403\u77eb\u6b63\u6587\u4ef6\u3002 * vdir/*.mp4 - \u5927\u9f209\u89c6\u89d2\u89c6\u9891\u3002 * volsize - \u52a8\u7269\u5360\u636e\u7684\u7acb\u4f53\u7a7a\u95f4\uff0c\u4ee5\u80cc\u4e3a\u4e2d\u5fc3\u70b9\u3002 \u5b8c\u6574\u4ee3\u7801 ## 1 \u5fc5\u9009\u9879\u53c2\u6570 vdir = '/mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zyq_to_dzy/20221116/solo' # \u8981\u5206\u6790\u7684\u89c6\u9891\u6587\u4ef6/\u6587\u4ef6\u5939 vdir = '/mnt/liying.cibr.ac_cn_Data_Temp/multiview_9/zyq_to_dzy/20221123/solo' vcalib = ` ls /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/dzy_oyy_ball/checked/0328-0330/solo/*.calibpkl ` # \u5c0f\u7403\u77eb\u6b63\u7684\u6587\u4ef6 volsize = 210 #vdir=/mnt/liying.cibr.ac_cn_Data_Temp/multiview_9/oyy/test_singlerat2022-11-24_17-08-23_baseline_rat1.mp4 ## volsize for rats # | | Male | Female | # | ------- | ---- | ------ | # | DAY35 | 160 | 160 | # | DAY50 | 190 | 180 | # | DAY75 | 220 | 200 | # | DAY\u6210\u5e74 | 220 | 210 | ## 2. \u63a8\u8350\uff08\u9ed8\u8ba4\uff09\u7684\u6a21\u578b\u6587\u4ef6 config = '/home/liying_lab/chenxinfeng/DATA/mmpose/res50_coco_com2d_512x320_oyy.py' # com2d \u7684\u6a21\u578b\u914d\u7f6e\u6587\u4ef6 dannce_project = '/home/liying_lab/chenxinfeng/DATA/dannce/demo_single/rat14_1280x800x9_mono' # dannce \u7684\u6a21\u578b\u8def\u5f84 ## 3. \u6587\u4ef6\u540d\u89e3\u6790 vfiles_nake = ` ls $vdir /*.mp4 | egrep -v \"com3d|sktdraw|mask\" | sed 's/.mp4//' ` vfiles = ` echo \" $vfiles_nake \" | xargs -I {} echo {} .segpkl ` volsize_vfiles = ` echo \" $vfiles \" | xargs -I {} echo $volsize {} ` ## 4. predict com3d python -m lilab.multiview_scripts_dev.s1_ballvideo2matpkl_full_faster $vdir --pannels 9 --config $config echo \" $vfiles_nake \" | xargs -n 1 -P 0 -I {} python -m lilab.multiview_scripts_dev.s4_matpkl2matcalibpkl {} .matpkl $vcalib echo \" $vfiles_nake \" | xargs -n 1 -P 0 -I {} python -m lilab.dannce_single.s1_matcalibpkl_com3d_to_segpkl {} .matcalibpkl # ls $vdir/*.segpkl | sed 's/.segpkl/.mp4/' | xargs -n 1 -P 0 python -m lilab.mmdet_dev.s4_segpkl_com3d_to_video --vox_size $volsize --maxlen 9000 ## 5. dannce predict cd $dannce_project echo \" $volsize_vfiles \" | sed 's/.segpkl/.mp4/' | cat -n | xargs -P 4 -l bash -c '/home/liying_lab/chenxinfeng/.conda/envs/mmdet/bin/dannce-predict-video-trt ../../configs/dannce_rat14_1280x800x9_max_config.yaml --vol-size $1 --video-file $2 --gpu-id $(($0%4))' echo \" $vfiles \" | sed 's/.segpkl/_dannce_predict.pkl/' | xargs -P 0 -l -r python -m lilab.dannce.s4_videopredictpkl2matcalibpkl # Smooth foot_w16, body_w64, one hit echo \" $vfiles \" | sed 's/.segpkl/.matcalibpkl/' | xargs -l -P 6 -r python -m lilab.smoothnet.s1_matcalibpkl2smooth_foot ## 6. \u7ed8\u5236 video # plot video # echo \"$vfiles\" | sed 's/.segpkl/.matcalibpkl/' | # xargs -P 6 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d $0 --iview 1 --maxlen 9000' echo \" $vfiles \" | sed 's/.segpkl/.smoothed_foot.matcalibpkl/' | xargs -P 6 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d $0 --iview 1 --postfix smoothed_foot --maxlen 9000' ## 7. Clean echo \" $vfiles_nake \" | xargs -n 1 -I {} rm {} .matpkl {} _dannce_predict*","title":"\u5355\u53ea\u5927\u9f20\u4e09\u7ef4\u59ff\u6001\u91cd\u6784"},{"location":"%E5%8D%95%E9%BC%A0%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/process/#_1","text":"\u5f00\u53d1\u8005\uff1a\u9648\u6615\u67ab\uff0c 2025-8-15 \u9700\u8981\uff1a * *.calib - \u5c0f\u7403\u77eb\u6b63\u6587\u4ef6\u3002 * vdir/*.mp4 - \u5927\u9f209\u89c6\u89d2\u89c6\u9891\u3002 * volsize - \u52a8\u7269\u5360\u636e\u7684\u7acb\u4f53\u7a7a\u95f4\uff0c\u4ee5\u80cc\u4e3a\u4e2d\u5fc3\u70b9\u3002","title":"\u5355\u53ea\u5927\u9f20\u4e09\u7ef4\u59ff\u6001\u91cd\u6784"},{"location":"%E5%8D%95%E9%BC%A0%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/process/#_2","text":"## 1 \u5fc5\u9009\u9879\u53c2\u6570 vdir = '/mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zyq_to_dzy/20221116/solo' # \u8981\u5206\u6790\u7684\u89c6\u9891\u6587\u4ef6/\u6587\u4ef6\u5939 vdir = '/mnt/liying.cibr.ac_cn_Data_Temp/multiview_9/zyq_to_dzy/20221123/solo' vcalib = ` ls /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/dzy_oyy_ball/checked/0328-0330/solo/*.calibpkl ` # \u5c0f\u7403\u77eb\u6b63\u7684\u6587\u4ef6 volsize = 210 #vdir=/mnt/liying.cibr.ac_cn_Data_Temp/multiview_9/oyy/test_singlerat2022-11-24_17-08-23_baseline_rat1.mp4 ## volsize for rats # | | Male | Female | # | ------- | ---- | ------ | # | DAY35 | 160 | 160 | # | DAY50 | 190 | 180 | # | DAY75 | 220 | 200 | # | DAY\u6210\u5e74 | 220 | 210 | ## 2. \u63a8\u8350\uff08\u9ed8\u8ba4\uff09\u7684\u6a21\u578b\u6587\u4ef6 config = '/home/liying_lab/chenxinfeng/DATA/mmpose/res50_coco_com2d_512x320_oyy.py' # com2d \u7684\u6a21\u578b\u914d\u7f6e\u6587\u4ef6 dannce_project = '/home/liying_lab/chenxinfeng/DATA/dannce/demo_single/rat14_1280x800x9_mono' # dannce \u7684\u6a21\u578b\u8def\u5f84 ## 3. \u6587\u4ef6\u540d\u89e3\u6790 vfiles_nake = ` ls $vdir /*.mp4 | egrep -v \"com3d|sktdraw|mask\" | sed 's/.mp4//' ` vfiles = ` echo \" $vfiles_nake \" | xargs -I {} echo {} .segpkl ` volsize_vfiles = ` echo \" $vfiles \" | xargs -I {} echo $volsize {} ` ## 4. predict com3d python -m lilab.multiview_scripts_dev.s1_ballvideo2matpkl_full_faster $vdir --pannels 9 --config $config echo \" $vfiles_nake \" | xargs -n 1 -P 0 -I {} python -m lilab.multiview_scripts_dev.s4_matpkl2matcalibpkl {} .matpkl $vcalib echo \" $vfiles_nake \" | xargs -n 1 -P 0 -I {} python -m lilab.dannce_single.s1_matcalibpkl_com3d_to_segpkl {} .matcalibpkl # ls $vdir/*.segpkl | sed 's/.segpkl/.mp4/' | xargs -n 1 -P 0 python -m lilab.mmdet_dev.s4_segpkl_com3d_to_video --vox_size $volsize --maxlen 9000 ## 5. dannce predict cd $dannce_project echo \" $volsize_vfiles \" | sed 's/.segpkl/.mp4/' | cat -n | xargs -P 4 -l bash -c '/home/liying_lab/chenxinfeng/.conda/envs/mmdet/bin/dannce-predict-video-trt ../../configs/dannce_rat14_1280x800x9_max_config.yaml --vol-size $1 --video-file $2 --gpu-id $(($0%4))' echo \" $vfiles \" | sed 's/.segpkl/_dannce_predict.pkl/' | xargs -P 0 -l -r python -m lilab.dannce.s4_videopredictpkl2matcalibpkl # Smooth foot_w16, body_w64, one hit echo \" $vfiles \" | sed 's/.segpkl/.matcalibpkl/' | xargs -l -P 6 -r python -m lilab.smoothnet.s1_matcalibpkl2smooth_foot ## 6. \u7ed8\u5236 video # plot video # echo \"$vfiles\" | sed 's/.segpkl/.matcalibpkl/' | # xargs -P 6 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d $0 --iview 1 --maxlen 9000' echo \" $vfiles \" | sed 's/.segpkl/.smoothed_foot.matcalibpkl/' | xargs -P 6 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d $0 --iview 1 --postfix smoothed_foot --maxlen 9000' ## 7. Clean echo \" $vfiles_nake \" | xargs -n 1 -I {} rm {} .matpkl {} _dannce_predict*","title":"\u5b8c\u6574\u4ee3\u7801"},{"location":"%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/basic_command/","text":"\u4e00\u4e9b\u57fa\u7840\u6280\u80fd \u4f7f\u7528 htop \u67e5\u770b CPU \u548c\u5185\u5b58\u4f7f\u7528\u60c5\u51b5 \u4f7f\u7528 nv \u547d\u4ee4\u67e5\u770b GPU \u4f7f\u7528\u60c5\u51b5\u3002 \u5c06\u4e0b\u9762\u547d\u4ee4\u6dfb\u52a0\u5230 ~/.bashrc ,\u7136\u540e\u91cd\u542f\u7ec8\u7aef\u3002 # \u4f7f\u7528`nv` \u547d\u4ee4\u67e5\u770b GPU \u4f7f\u7528\u60c5\u51b5 alias nv = 'watch -n 1 nvidia-smi' # \u4f7f\u7528\u67d0\u51e0\u4e2aGPU (0,1,2,3), \u5176\u5b83GPU\u4e0d\u7528 # $choosecuda 0,1,2,3 $choosecuda 3 function choosecuda { if [ -z \" $1 \" ] ; then num = 0 ; else num = \" $1 \" ; fi CUDA_VISIBLE_DEVICES = $num export CUDA_VISIBLE_DEVICES } # \u4f7f\u7528 killcuda \u5f3a\u884c\u91ca\u653e\u672c\u8d26\u6237\u7684 GPU \u5185\u5b58\u5360\u7528 # $killcuda alias killcuda = \"ps -o pid= -u $( whoami ) | \\ grep -wFf <( nvidia-smi -q -x | grep pid | sed -e 's/<pid>//g' -e 's/<\\/pid>//g' -e 's/^[[:space:]]*//' | sort | uniq ) | \\ xargs kill -9 \" # \u4f7f\u7528 killcuda2 \u5f3a\u884c\u91ca\u653e\u6240\u6709\u8d26\u6237\u7684 GPU \u5185\u5b58\u5360\u7528 # $sudo killcuda2 alias killcuda2 = \"fuser -v /dev/nvidia-uvm 2> /dev/null | xargs kill -9 \" # \u67e5\u627e\u5f53\u524d\u6587\u4ef6\u5939\u5185 python \u6587\u4ef6\u4e2d\u5305\u542b\u67d0\u5b57\u6bb5\u7684\u6587\u4ef6 # $findgrep WORDS alias findgrep = 'find . -name \"*.py\" -type f -exec echo \\\"{}\\\" \\; | xargs grep -n ' choosecuda \u7528\u4e8e\u9009\u62e9 GPU \u7684ID\u3002 killcuda \u548c killcuda2 \u7528\u6237\u91ca\u653e GPU \u7684\u5360\u7528\u3002 \u8b66\u544a \u4f7f\u7528 GPU \u4e4b\u524d\uff0c\u5148\u7528 nv \u547d\u4ee4\u770b\u4e00\u4e0bGPU\u7684\u5360\u7528\u60c5\u51b5\uff0c\u6267\u884c choosecuda \u9009\u62e9\u7a7a\u95f2\u7684GPU\u4f7f\u7528\u3002\u5982\u679c\u6709\u4e00\u4e2aGPU\u5185\u5b58\u5360\u7528\u9ad8\u4f46\u662f\u8fd0\u7b97\u5360\u7528\u7387\u4f4e\uff0c\u5219\u4f7f\u7528 killcuda \u91ca\u653e\u3002 choosecuda \u53ea\u5bf9\u5f53\u524d\u7684\u7ec8\u7aef\u4e34\u65f6\u6709\u6548\uff0c\u5728\u7ec8\u7aef\u91cd\u542f\u6216\u8de8\u7ec8\u7aef\u5219\u65e0\u6548\u3002 findgrep \u7528\u4e8e\u67e5\u627epython\u4ee3\u7801 \u6302\u8f7d\u7fa4\u8f89\u7684\u4e91\u76d8\u8def\u5f84\u5230\u670d\u52a1\u5668\u4e0a\u3002\u66ff\u6362\u5176\u4e2d\u7684 username \u4e3a\u7fa4\u8f89\u7684\u7528\u6237\u540d\uff0c uid \u4e3a\u670d\u52a1\u5668\u8d26\u53f7\u7684\u7528\u6237\u540d\u3002\u4f1a\u8981\u6c42\u8f93\u5165\u7fa4\u8f89\u7528\u6237\u7684\u5bc6\u7801\u3002 sudo mkdir /mnt/liying.cibr.ac.cn_usb3 #\u521b\u5efa\u6587\u4ef6\u5939 # \u6302\u8f7d\u7fa4\u8f89\u7684\u8def\u5f84\u5230\u670d\u52a1\u5668 sudo mount -t cifs -o \\ vers = 2 .0,username = chenxinfeng \\ //liying.cibr.ac.cn/usbshare3-2 \\ /mnt/liying.cibr.ac.cn_usb3/ -o \\ uid = chenxinfeng,file_mode = 0766 ,dir_mode = 0777 \u8b66\u544a file_mode=0766,dir_mode=0777 \u6743\u9650\u653e\u5f97\u592a\u5bbd\uff0c\u8ba9\u6240\u6709\u7528\u6237\u90fd\u5177\u7fa4\u8f89\u6587\u4ef6\u7684\u4fee\u6539\u6743\u9650\u3002\u6709\u53ef\u80fd\u4f1a\u5bf9\u7fa4\u8f89\u7684\u6587\u4ef6\u7684\u5b8c\u5168\u9020\u6210\u5371\u9669\u3002\u6743\u9650\u63a7\u5236\u592a\u7d27\uff0c\u53ef\u80fd\u6ca1\u6cd5\u987a\u5229\u52a0\u8f7d\u3002\u8bf7\u81ea\u884c\u63a7\u5236 file_mode \u548c dir_mod \u6743\u9650\u3002","title":"\u4e00\u4e9b\u57fa\u7840\u6280\u80fd"},{"location":"%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/basic_command/#_1","text":"\u4f7f\u7528 htop \u67e5\u770b CPU \u548c\u5185\u5b58\u4f7f\u7528\u60c5\u51b5 \u4f7f\u7528 nv \u547d\u4ee4\u67e5\u770b GPU \u4f7f\u7528\u60c5\u51b5\u3002 \u5c06\u4e0b\u9762\u547d\u4ee4\u6dfb\u52a0\u5230 ~/.bashrc ,\u7136\u540e\u91cd\u542f\u7ec8\u7aef\u3002 # \u4f7f\u7528`nv` \u547d\u4ee4\u67e5\u770b GPU \u4f7f\u7528\u60c5\u51b5 alias nv = 'watch -n 1 nvidia-smi' # \u4f7f\u7528\u67d0\u51e0\u4e2aGPU (0,1,2,3), \u5176\u5b83GPU\u4e0d\u7528 # $choosecuda 0,1,2,3 $choosecuda 3 function choosecuda { if [ -z \" $1 \" ] ; then num = 0 ; else num = \" $1 \" ; fi CUDA_VISIBLE_DEVICES = $num export CUDA_VISIBLE_DEVICES } # \u4f7f\u7528 killcuda \u5f3a\u884c\u91ca\u653e\u672c\u8d26\u6237\u7684 GPU \u5185\u5b58\u5360\u7528 # $killcuda alias killcuda = \"ps -o pid= -u $( whoami ) | \\ grep -wFf <( nvidia-smi -q -x | grep pid | sed -e 's/<pid>//g' -e 's/<\\/pid>//g' -e 's/^[[:space:]]*//' | sort | uniq ) | \\ xargs kill -9 \" # \u4f7f\u7528 killcuda2 \u5f3a\u884c\u91ca\u653e\u6240\u6709\u8d26\u6237\u7684 GPU \u5185\u5b58\u5360\u7528 # $sudo killcuda2 alias killcuda2 = \"fuser -v /dev/nvidia-uvm 2> /dev/null | xargs kill -9 \" # \u67e5\u627e\u5f53\u524d\u6587\u4ef6\u5939\u5185 python \u6587\u4ef6\u4e2d\u5305\u542b\u67d0\u5b57\u6bb5\u7684\u6587\u4ef6 # $findgrep WORDS alias findgrep = 'find . -name \"*.py\" -type f -exec echo \\\"{}\\\" \\; | xargs grep -n ' choosecuda \u7528\u4e8e\u9009\u62e9 GPU \u7684ID\u3002 killcuda \u548c killcuda2 \u7528\u6237\u91ca\u653e GPU \u7684\u5360\u7528\u3002 \u8b66\u544a \u4f7f\u7528 GPU \u4e4b\u524d\uff0c\u5148\u7528 nv \u547d\u4ee4\u770b\u4e00\u4e0bGPU\u7684\u5360\u7528\u60c5\u51b5\uff0c\u6267\u884c choosecuda \u9009\u62e9\u7a7a\u95f2\u7684GPU\u4f7f\u7528\u3002\u5982\u679c\u6709\u4e00\u4e2aGPU\u5185\u5b58\u5360\u7528\u9ad8\u4f46\u662f\u8fd0\u7b97\u5360\u7528\u7387\u4f4e\uff0c\u5219\u4f7f\u7528 killcuda \u91ca\u653e\u3002 choosecuda \u53ea\u5bf9\u5f53\u524d\u7684\u7ec8\u7aef\u4e34\u65f6\u6709\u6548\uff0c\u5728\u7ec8\u7aef\u91cd\u542f\u6216\u8de8\u7ec8\u7aef\u5219\u65e0\u6548\u3002 findgrep \u7528\u4e8e\u67e5\u627epython\u4ee3\u7801 \u6302\u8f7d\u7fa4\u8f89\u7684\u4e91\u76d8\u8def\u5f84\u5230\u670d\u52a1\u5668\u4e0a\u3002\u66ff\u6362\u5176\u4e2d\u7684 username \u4e3a\u7fa4\u8f89\u7684\u7528\u6237\u540d\uff0c uid \u4e3a\u670d\u52a1\u5668\u8d26\u53f7\u7684\u7528\u6237\u540d\u3002\u4f1a\u8981\u6c42\u8f93\u5165\u7fa4\u8f89\u7528\u6237\u7684\u5bc6\u7801\u3002 sudo mkdir /mnt/liying.cibr.ac.cn_usb3 #\u521b\u5efa\u6587\u4ef6\u5939 # \u6302\u8f7d\u7fa4\u8f89\u7684\u8def\u5f84\u5230\u670d\u52a1\u5668 sudo mount -t cifs -o \\ vers = 2 .0,username = chenxinfeng \\ //liying.cibr.ac.cn/usbshare3-2 \\ /mnt/liying.cibr.ac.cn_usb3/ -o \\ uid = chenxinfeng,file_mode = 0766 ,dir_mode = 0777 \u8b66\u544a file_mode=0766,dir_mode=0777 \u6743\u9650\u653e\u5f97\u592a\u5bbd\uff0c\u8ba9\u6240\u6709\u7528\u6237\u90fd\u5177\u7fa4\u8f89\u6587\u4ef6\u7684\u4fee\u6539\u6743\u9650\u3002\u6709\u53ef\u80fd\u4f1a\u5bf9\u7fa4\u8f89\u7684\u6587\u4ef6\u7684\u5b8c\u5168\u9020\u6210\u5371\u9669\u3002\u6743\u9650\u63a7\u5236\u592a\u7d27\uff0c\u53ef\u80fd\u6ca1\u6cd5\u987a\u5229\u52a0\u8f7d\u3002\u8bf7\u81ea\u884c\u63a7\u5236 file_mode \u548c dir_mod \u6743\u9650\u3002","title":"\u4e00\u4e9b\u57fa\u7840\u6280\u80fd"},{"location":"%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/installed_models/","text":"\u5df2\u7ecf\u5b89\u88c5\u7684\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b \u6a21\u578b (conda) \u7528\u9014 \u9879\u76ee\u8def\u5f84 Mask-RCNN (mmpose) \u5927\u9f20\u5206\u5272\uff0c\u5c0f\u9f20\u5206\u5272 /home/liying_lab/chenxinfeng/DATA/CBNetV2 mmpose (mmpose) 2D \u5173\u952e\u70b9\u68c0\u6d4b xxx/DATA/mmpose YOLO-v8 (open-mmlab) \u52a8\u7269\u5feb\u901f\u68c0\u6d4b&\u5206\u5272 xxx/DATA/ultralytic DANNCE (mmdet) \u52a8\u72693D\u5173\u952e\u70b9\u68c0\u6d4b xxx/DATA/dannce SmoothNet (mmdet) \u5173\u952e\u70b9\u65f6\u5e8f\u5e73\u6ed1 xxx/DATA/SmoothNet","title":"\u5df2\u5b89\u88c5\u7684\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b"},{"location":"%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/installed_models/#_1","text":"\u6a21\u578b (conda) \u7528\u9014 \u9879\u76ee\u8def\u5f84 Mask-RCNN (mmpose) \u5927\u9f20\u5206\u5272\uff0c\u5c0f\u9f20\u5206\u5272 /home/liying_lab/chenxinfeng/DATA/CBNetV2 mmpose (mmpose) 2D \u5173\u952e\u70b9\u68c0\u6d4b xxx/DATA/mmpose YOLO-v8 (open-mmlab) \u52a8\u7269\u5feb\u901f\u68c0\u6d4b&\u5206\u5272 xxx/DATA/ultralytic DANNCE (mmdet) \u52a8\u72693D\u5173\u952e\u70b9\u68c0\u6d4b xxx/DATA/dannce SmoothNet (mmdet) \u5173\u952e\u70b9\u65f6\u5e8f\u5e73\u6ed1 xxx/DATA/SmoothNet","title":"\u5df2\u7ecf\u5b89\u88c5\u7684\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b"},{"location":"%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/login_server/","text":"\u8fde\u63a5\u5230\u670d\u52a1\u5668 \u670d\u52a1\u5668\u7684\u8be6\u7ec6\u53c2\u6570 \u5b9e\u9a8c\u5ba4\u6709\u4e00\u5957\u670d\u52a1\u5668\u548c\u4e00\u53f0\u6d4b\u8bd5\u673a\u3002\u670d\u52a1\u5668\u7528\u6765\u4e13\u95e8\u505a\u6570\u636e\u5206\u6790\uff0c\u4e0d\u8981\u79c1\u81ea\u5b89\u88c5\u8f6f\u4ef6\u5305\uff0c\u4ee5\u514d\u7834\u5316\u5b83\u7684\u73af\u5883\u3002 \u60f3\u8981\u5b66\u4e60linux\u7684\u57fa\u672c\u547d\u4ee4\uff0c\u53ef\u4ee5\u5728\u6d4b\u8bd5\u673a\u4e0a\u505a\u3002 \u670d\u52a1\u5668\uff08\u9ad8\u6027\u80fd\uff0c\u6d6a\u6f6e\uff09 \u6d4b\u8bd5\u673a\uff08\u4e34\u65f6\u4f7f\u7528\uff09 \u7528\u9014 \u8dd1\u6a21\u578b\uff0c\u8dd1\u6d41\u7a0b\uff0c\u5206\u6790\u6570\u636e \u6d4b\u8bd5\u4ee3\u7801\uff0c\u7f51\u9875\u670d\u52a1 \u5730\u70b9 \u4fe1\u606f\u5316\u4e2d\u5fc3B\u533a\u8d1f\u4e8c\u697c\u673a\u623f \u5b9e\u9a8c\u5ba4 \u5730\u5740 ssh chenxinfeng@ 10.50.60.6 - \u7cfb\u7edf Ubuntu 18.04 - \u57fa\u7840\u547d\u4ee4 sudo apt install PACKAGE - \u5185\u5b58 256 GB - \u786c\u76d8 1 TB\u56fa\u6001 + 8 TB\u673a\u68b0 - CPU Intel Silver 4314\uff0c32\u6838\u5fc3 64\u7ebf\u7a0b - GPU 4\u5757 NVIDIA RTX3090 \uff0824 GB\u663e\u5b58\uff09 - docker \u652f\u6301 - \u767b\u5f55\u5230\u670d\u52a1\u5668\uff08/\u6d4b\u8bd5\u673a\uff09 \u670d\u52a1\u5668\u652f\u6301 \u8fdc\u7a0b\u684c\u9762 , ssh \u548c vscode \u7684\u767b\u5f55\u65b9\u5f0f\u3002\u63a8\u8350\u4f7f\u7528 vscode \u3002 1. \u4f7f\u7528 vscode [\u6700\u63a8\u8350] \u53bb\u5b98\u7f51 \u4e0b\u8f7d VSCODE \uff0c\u5b89\u88c5\u3002\u4e4b\u540e\u518d\u5b89\u88c5 Remote - SSH \u63d2\u4ef6\u3002\u901a\u8fc7\u63d2\u4ef6\u8fdb\u5165\u8fdc\u7a0b\u7684\u670d\u52a1\u5668\u3002\u5728\u670d\u52a1\u5668\u4e2d\u8fdb\u5165\u9879\u76ee\u76ee\u5f55\uff0c\u518d\u5b89\u88c5 Python \u548c Jupyter \u63d2\u4ef6\u3002 \u8b66\u544a \u9996\u6b21\u7528 VSCODE \u767b\u5f55\u8fdc\u7a0bSSH\uff0c\u4f1a\u5728\u670d\u52a1\u5668\u4e2d\u81ea\u52a8\u4e0b\u8f7d\u8f6f\u4ef6\u5e76\u914d\u7f6e\u73af\u5883\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f85\u3002VSCODE \u7ecf\u5e38\u66f4\u65b0\uff0c\u4f1a\u5bfc\u81f4 Python \u548c Jupyter \u73af\u5883\u65f6\u6548\u3002\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff0c\u8bf7\u66f4\u65b0 VSCODE \u5e76\u91cd\u542f\u8f6f\u4ef6\u3002\u53ef\u4ee5\u5728\u8bbe\u7f6e\u91cc\u9762\u53d6\u6d88 VSCODE \u81ea\u52a8\u66f4\u65b0\u3002 \u9519\u8bef \u65e9\u671f\u7684 WINDOWS \u7535\u8111\u7684\u7cfb\u7edf\u6709\u95ee\u9898\uff0cVSCODE\u4e2d\u4f7f\u7528 SSH \u8fde\u63a5\u65f6\u4e00\u76f4\u8f6c\u5708\u5708\u6216\u5931\u8d25\u3002\u8bf7\u4ece OPEN-SSH \u5b98\u7f51\u5b89\u88c5\u6700\u65b0\u8f6f\u4ef6\u5e76\u6dfb\u52a0\u5230\u641c\u7d22\u76ee\u5f55\u4e2d\uff0c\u66ff\u6362\u6389\u539f\u6765\u7684 SSH\u3002 2. \u4f7f\u7528 ssh \u5728 windows \u5ba2\u6237\u7535\u8111\u4e2d\uff0c\u6309\u4f4f Win R \u5feb\u6377\u952e\uff0c\u5728\u5f39\u51fa\u7684 \u8fd0\u884c \u7a97\u53e3\u4e2d\uff0c\u8f93\u5165 cmd \u6307\u4ee4\u3002\u5728\u5f39\u51fa\u7684\u7ec8\u7aef\u547d\u4ee4\u7a97\u4e2d\uff0c\u8f93\u5165\u4e0b\u9762\u547d\u4ee4\uff0c\u5e76\u8f93\u5165\u5bc6\u7801\u3002 ssh chenxinfeng@10.50.60.6 \u63d0\u793a \u5982\u679c\u60f3\u8981\u514d\u5bc6\u767b\u5f55\uff0c\u53ef\u4ee5\u53bb\u4e92\u8054\u7f51\u641c\u7d22\u201cssh \u514d\u5bc6\u767b\u5f55\u201d\u3002 3. \u4f7f\u7528\u8fdc\u7a0b\u684c\u9762\u767b\u5f55 [\u907f\u514d] \u5728 windows \u5ba2\u6237\u7535\u8111\u4e2d\uff0c\u6309\u4f4f Win R \u5feb\u6377\u952e\uff0c\u5728\u5f39\u51fa\u7684 \u8fd0\u884c \u7a97\u53e3\u4e2d\uff0c\u8f93\u5165 mstc \u6307\u4ee4\u3002\u5f39\u51fa\u8fdc\u7a0b\u684c\u9762\u767b\u5f55\u7a97\u53e3\u3002 \u8f93\u5165\u670d\u52a1\u5668\u7684IP\u5730\u5740\uff0c \u8fde\u63a5 \u3002\u63a5\u7740\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002 \u5728\u4e00\u822c\u573a\u666f\u4e0b\uff0c\u90fd\u63a8\u8350\u4f7f\u7528 VSCODE \u4f5c\u4e3a\u670d\u52a1\u5668\u8fde\u63a5\u5de5\u5177\u3002\u5e76\u4e14\u5efa\u8bae\u5728 VSCODE \u4e2d\u5b89\u88c5 CodeGeeX \u8fd9\u79cdAI\u7f16\u7a0b\u52a9\u624b\uff08\u9700\u8981\u6ce8\u518c\uff09\u3002 \u9002\u7528\u573a\u666f \u7f3a\u70b9 VSCODE \u6587\u672c\u548c\u4ee3\u7801\u7f16\u8f91\u3001jupyter\u5206\u6790\u4f5c\u56fe \u7ecf\u5e38\u66f4\u65b0\uff0c\u73af\u5883\u914d\u7f6e\u9ebb\u70e6\uff0c\u6d88\u8017\u670d\u52a1\u5668\u6027\u80fd SSH \u4e34\u65f6\u8dd1\u4e2a\u811a\u672c\u6216\u4fee\u6539\u73af\u5883 \u53ef\u89c6\u5316\u5dee \u8fdc\u7a0b\u684c\u9762 \u56fe\u5f62\u754c\u9762\u7a0b\u5e8f \u5361\uff0c\u53d7\u9650\u4e8e\u7f51\u7edc\u8d28\u91cf","title":"\u8fde\u63a5\u8fdb\u5165\u670d\u52a1\u5668"},{"location":"%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/login_server/#_1","text":"","title":"\u8fde\u63a5\u5230\u670d\u52a1\u5668"},{"location":"%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/login_server/#_2","text":"\u5b9e\u9a8c\u5ba4\u6709\u4e00\u5957\u670d\u52a1\u5668\u548c\u4e00\u53f0\u6d4b\u8bd5\u673a\u3002\u670d\u52a1\u5668\u7528\u6765\u4e13\u95e8\u505a\u6570\u636e\u5206\u6790\uff0c\u4e0d\u8981\u79c1\u81ea\u5b89\u88c5\u8f6f\u4ef6\u5305\uff0c\u4ee5\u514d\u7834\u5316\u5b83\u7684\u73af\u5883\u3002 \u60f3\u8981\u5b66\u4e60linux\u7684\u57fa\u672c\u547d\u4ee4\uff0c\u53ef\u4ee5\u5728\u6d4b\u8bd5\u673a\u4e0a\u505a\u3002 \u670d\u52a1\u5668\uff08\u9ad8\u6027\u80fd\uff0c\u6d6a\u6f6e\uff09 \u6d4b\u8bd5\u673a\uff08\u4e34\u65f6\u4f7f\u7528\uff09 \u7528\u9014 \u8dd1\u6a21\u578b\uff0c\u8dd1\u6d41\u7a0b\uff0c\u5206\u6790\u6570\u636e \u6d4b\u8bd5\u4ee3\u7801\uff0c\u7f51\u9875\u670d\u52a1 \u5730\u70b9 \u4fe1\u606f\u5316\u4e2d\u5fc3B\u533a\u8d1f\u4e8c\u697c\u673a\u623f \u5b9e\u9a8c\u5ba4 \u5730\u5740 ssh chenxinfeng@ 10.50.60.6 - \u7cfb\u7edf Ubuntu 18.04 - \u57fa\u7840\u547d\u4ee4 sudo apt install PACKAGE - \u5185\u5b58 256 GB - \u786c\u76d8 1 TB\u56fa\u6001 + 8 TB\u673a\u68b0 - CPU Intel Silver 4314\uff0c32\u6838\u5fc3 64\u7ebf\u7a0b - GPU 4\u5757 NVIDIA RTX3090 \uff0824 GB\u663e\u5b58\uff09 - docker \u652f\u6301 -","title":"\u670d\u52a1\u5668\u7684\u8be6\u7ec6\u53c2\u6570"},{"location":"%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/login_server/#_3","text":"\u670d\u52a1\u5668\u652f\u6301 \u8fdc\u7a0b\u684c\u9762 , ssh \u548c vscode \u7684\u767b\u5f55\u65b9\u5f0f\u3002\u63a8\u8350\u4f7f\u7528 vscode \u3002","title":"\u767b\u5f55\u5230\u670d\u52a1\u5668\uff08/\u6d4b\u8bd5\u673a\uff09"},{"location":"%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/login_server/#1-vscode","text":"\u53bb\u5b98\u7f51 \u4e0b\u8f7d VSCODE \uff0c\u5b89\u88c5\u3002\u4e4b\u540e\u518d\u5b89\u88c5 Remote - SSH \u63d2\u4ef6\u3002\u901a\u8fc7\u63d2\u4ef6\u8fdb\u5165\u8fdc\u7a0b\u7684\u670d\u52a1\u5668\u3002\u5728\u670d\u52a1\u5668\u4e2d\u8fdb\u5165\u9879\u76ee\u76ee\u5f55\uff0c\u518d\u5b89\u88c5 Python \u548c Jupyter \u63d2\u4ef6\u3002 \u8b66\u544a \u9996\u6b21\u7528 VSCODE \u767b\u5f55\u8fdc\u7a0bSSH\uff0c\u4f1a\u5728\u670d\u52a1\u5668\u4e2d\u81ea\u52a8\u4e0b\u8f7d\u8f6f\u4ef6\u5e76\u914d\u7f6e\u73af\u5883\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f85\u3002VSCODE \u7ecf\u5e38\u66f4\u65b0\uff0c\u4f1a\u5bfc\u81f4 Python \u548c Jupyter \u73af\u5883\u65f6\u6548\u3002\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff0c\u8bf7\u66f4\u65b0 VSCODE \u5e76\u91cd\u542f\u8f6f\u4ef6\u3002\u53ef\u4ee5\u5728\u8bbe\u7f6e\u91cc\u9762\u53d6\u6d88 VSCODE \u81ea\u52a8\u66f4\u65b0\u3002 \u9519\u8bef \u65e9\u671f\u7684 WINDOWS \u7535\u8111\u7684\u7cfb\u7edf\u6709\u95ee\u9898\uff0cVSCODE\u4e2d\u4f7f\u7528 SSH \u8fde\u63a5\u65f6\u4e00\u76f4\u8f6c\u5708\u5708\u6216\u5931\u8d25\u3002\u8bf7\u4ece OPEN-SSH \u5b98\u7f51\u5b89\u88c5\u6700\u65b0\u8f6f\u4ef6\u5e76\u6dfb\u52a0\u5230\u641c\u7d22\u76ee\u5f55\u4e2d\uff0c\u66ff\u6362\u6389\u539f\u6765\u7684 SSH\u3002","title":"1. \u4f7f\u7528 vscode [\u6700\u63a8\u8350]"},{"location":"%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/login_server/#2-ssh","text":"\u5728 windows \u5ba2\u6237\u7535\u8111\u4e2d\uff0c\u6309\u4f4f Win R \u5feb\u6377\u952e\uff0c\u5728\u5f39\u51fa\u7684 \u8fd0\u884c \u7a97\u53e3\u4e2d\uff0c\u8f93\u5165 cmd \u6307\u4ee4\u3002\u5728\u5f39\u51fa\u7684\u7ec8\u7aef\u547d\u4ee4\u7a97\u4e2d\uff0c\u8f93\u5165\u4e0b\u9762\u547d\u4ee4\uff0c\u5e76\u8f93\u5165\u5bc6\u7801\u3002 ssh chenxinfeng@10.50.60.6 \u63d0\u793a \u5982\u679c\u60f3\u8981\u514d\u5bc6\u767b\u5f55\uff0c\u53ef\u4ee5\u53bb\u4e92\u8054\u7f51\u641c\u7d22\u201cssh \u514d\u5bc6\u767b\u5f55\u201d\u3002","title":"2. \u4f7f\u7528 ssh"},{"location":"%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%9F%B9%E8%AE%AD/login_server/#3","text":"\u5728 windows \u5ba2\u6237\u7535\u8111\u4e2d\uff0c\u6309\u4f4f Win R \u5feb\u6377\u952e\uff0c\u5728\u5f39\u51fa\u7684 \u8fd0\u884c \u7a97\u53e3\u4e2d\uff0c\u8f93\u5165 mstc \u6307\u4ee4\u3002\u5f39\u51fa\u8fdc\u7a0b\u684c\u9762\u767b\u5f55\u7a97\u53e3\u3002 \u8f93\u5165\u670d\u52a1\u5668\u7684IP\u5730\u5740\uff0c \u8fde\u63a5 \u3002\u63a5\u7740\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002 \u5728\u4e00\u822c\u573a\u666f\u4e0b\uff0c\u90fd\u63a8\u8350\u4f7f\u7528 VSCODE \u4f5c\u4e3a\u670d\u52a1\u5668\u8fde\u63a5\u5de5\u5177\u3002\u5e76\u4e14\u5efa\u8bae\u5728 VSCODE \u4e2d\u5b89\u88c5 CodeGeeX \u8fd9\u79cdAI\u7f16\u7a0b\u52a9\u624b\uff08\u9700\u8981\u6ce8\u518c\uff09\u3002 \u9002\u7528\u573a\u666f \u7f3a\u70b9 VSCODE \u6587\u672c\u548c\u4ee3\u7801\u7f16\u8f91\u3001jupyter\u5206\u6790\u4f5c\u56fe \u7ecf\u5e38\u66f4\u65b0\uff0c\u73af\u5883\u914d\u7f6e\u9ebb\u70e6\uff0c\u6d88\u8017\u670d\u52a1\u5668\u6027\u80fd SSH \u4e34\u65f6\u8dd1\u4e2a\u811a\u672c\u6216\u4fee\u6539\u73af\u5883 \u53ef\u89c6\u5316\u5dee \u8fdc\u7a0b\u684c\u9762 \u56fe\u5f62\u754c\u9762\u7a0b\u5e8f \u5361\uff0c\u53d7\u9650\u4e8e\u7f51\u7edc\u8d28\u91cf","title":"3. \u4f7f\u7528\u8fdc\u7a0b\u684c\u9762\u767b\u5f55 [\u907f\u514d]"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/bug_fix/","text":"\u8865\u4e01\uff1aLinux \u4e3b\u673a Docker\uff08\u5982\u6709\u9700\u8981\uff09 \u4e3a\u4f55\u9700\u8981\u8865\u4e01\uff1a\u6b64 Docker \u955c\u50cf\u5728 Windows \u4e3b\u673a\u4e0a\u6784\u5efa\uff0c\u5728 Linux \u4e3b\u673a\u4e0a\u8fd0\u884c\u65f6\u53ef\u80fd\u4f1a\u51fa\u73b0\u95ee\u9898\u3002 \u5982\u679c\u4f60\u7684\u670d\u52a1\u5668\u662f Linux \u7cfb\u7edf\uff1a $ nvidia-smi # \u6b63\u5e38\u60c5\u51b5\u4e0b\u5e94\u80fd\u770b\u5230 GPU \u4fe1\u606f\uff0c\u82e5\u51fa\u73b0\"not found libnvidia-ml.so.1\"\u9519\u8bef\uff0c\u5219\u9700\u8981\u5e94\u7528\u8865\u4e01\u3002 \u6b64\u65f6\uff0c\u4f60\u53ef\u4ee5\u8fdb\u5165docker\u5bb9\u5668\uff0c\u5c1d\u8bd5\u4ee5\u4e0b\u8865\u4e01\u64cd\u4f5c\uff1a cd /usr/lib/x86_64-linux-gnu ln -sf libnvidia-ml.so.5* libnvidia-ml.so.1 ln -sf libnvidia-ml.so.5* libnvidia-ml.so ln -sf libcuda.so.5* libcuda.so.1 # \u53ef\u9009 ln -sf libcudadebugger.so.5* libcudadebugger.so.1 # \u53ef\u9009 ldconfig \u53ef\u4ee5\u68c0\u67e5 torch \u662f\u5426\u6b63\u5e38\u5de5\u4f5c python -c \"import torch; print(torch.zeros(3,3).cuda())\" \u8865\u4e01: LILAB-pkg (\u5982\u6709\u9700\u8981) \u4e3a\u4f55\u9700\u8981\u8865\u4e01\uff1a\u8be5 Docker \u4e0d\u652f\u6301 NVIDIA \u89c6\u9891\u89e3\u7801\u5668/\u7f16\u7801\u5668\uff0c\u800c\u4e3b\u8981\u7684 LILAB-pkg \u4f1a\u7528\u5230 NVIDIA \u89c6\u9891\u5305\uff0c\u56e0\u6b64\u9700\u8981\u5c06 Docker \u4e2d\u7684\u76f8\u5173\u5305\u964d\u7ea7\u4e3a CPU \u89c6\u9891\u5305\u3002 \u6bcf\u5f53\u4f60\u4ece GitHub \u4e0a\u66f4\u65b0 LILAB-pkg \u540e\uff0c\u90fd\u9700\u8981\u6267\u884c\u6b64\u8865\u4e01\u64cd\u4f5c\uff1a cp -r /root/Downloads/pipeline/LILAB-pkg-patch-for-docker/* ~/LILAB-pkg/ \u4e3b\u673a8080\u7aef\u53e3\u5df2\u88ab\u5360\u7528 \u5982\u679c\u8fd0\u884c\u4e0b\u9762\u547d\u4ee4\u65f6\u51fa\u73b0 \"Error starting userland proxy: listen tcp 0.0.0.0:8080: bind: address already in use\" \u9519\u8bef\uff0c\u8bf4\u660e\u4e3b\u673a8080\u7aef\u53e3\u5df2\u88ab\u5360\u7528\u3002 docker run --rm -it -p 8080:8080 ... \u5219\u9700\u8981\u5c06\u7aef\u53e3\u6620\u5c04\u4fee\u6539\u4e3a\u5176\u4ed6\u7aef\u53e3\uff08\u59828081\uff0chttp://localhost:8081/\uff09\uff0c\u4f8b\u5982\uff1a docker run --rm -it -p 8081:8080 ... \u8fdc\u7a0b\u670d\u52a1\u56688080\u7aef\u53e3\u8f6c\u53d1\u5230\u672c\u5730 \u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f Windows Docker\uff0c\u53ef\u4ee5\u8df3\u8fc7\u6b64\u6b65\u9aa4\u3002 \u4e3a\u4ec0\u4e48\u9700\u8981\u8f6c\u53d1\uff1f \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd0\u884c web \u754c\u9762\u7684\u5ba2\u6237\u7aef\u7535\u8111\uff08\u4f8b\u5982\uff0cIP 10.50.7.103\uff09\u548c\u8fdc\u7a0b\u670d\u52a1\u5668\uff08\u4f8b\u5982\uff0cIP 10.50.60.6\uff09\u4f4d\u4e8e\u4e0d\u540c\u673a\u5668\u4e0a\u3002\u7531\u4e8e Chrome \u7684\u9650\u5236\uff0c\u867d\u7136\u53ef\u4ee5\u8bbf\u95ee vs-code-server\uff08http://10.50.60.6:8080\uff09\uff0c\u4f46\u9ad8\u7ea7\u529f\u80fd\uff08\u6587\u4ef6\u6d4f\u89c8\u3001Jupyter \u7b49\uff09\u65e0\u6cd5\u4f7f\u7528\u3002 \u89e3\u51b3\u65b9\u6cd5 \u4e0d\u63a8\u8350\uff1a\u914d\u7f6e\u5347\u7ea7 HTTPS \u534f\u8bae\uff0c\u5373\uff08https://10.50.60.6:8080\uff09\uff0c\u4f46\u8fd9\u9700\u8981\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u914d\u7f6e SSL \u8bc1\u4e66\uff0c\u8fc7\u7a0b\u8f83\u4e3a\u7e41\u7410\u3002 \u63a8\u8350\uff1a\u5c06\u7f51\u7ad9\u7aef\u53e3\uff08http://10.50.60.6:8080\uff09\u8f6c\u53d1\u5230\u672c\u5730\u3002\u5c06\u8fdc\u7a0b\u670d\u52a1\u5668\u7684 8080 \u7aef\u53e3\u8f6c\u53d1\u5230\u672c\u5730\uff08http://localhost:8080\uff0c\u5373 http://10.50.7.103:8080\uff09\uff0cChrome \u6d4f\u89c8\u5668\u5373\u53ef\u6b63\u5e38\u8bbf\u95ee\u3002\u8fd9\u662f\u56e0\u4e3a Chrome \u5bf9 localhost \u7684\u8bbf\u95ee\u6ca1\u6709\u9650\u5236\u3002 ssh -L 8080:10.50.60.6:8080 username@10.50.60.6 \u64cd\u4f5c\u6b65\u9aa4 Windows \u5ba2\u6237\u7aef\u7535\u8111\u53ef\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff0c\u6ce8\u610f\u66ff\u6362 IP \u5730\u5740\u4e3a\u5b9e\u9645\u7684\u670d\u52a1\u5668\u5730\u5740\u548c\u7aef\u53e3\u3002 \u5ba2\u6237\u7aef\u64cd\u4f5c\u7cfb\u7edf \u670d\u52a1\u5668\u9632\u706b\u5899 8080 \u7aef\u53e3 \u4ee3\u7406\u65b9\u6cd5 Windows \u5df2\u653e\u884c netsh interface portproxy add v4tov4 listenaddress=127.0.0.1 listenport=8080 connectaddress=10.50.60.6 connectport=8080 Linux \u5df2\u653e\u884c socat TCP-LISTEN:8080,bind=127.0.0.1,fork TCP:10.50.60.6:8080 \u901a\u7528\uff08SSH\u6253\u6d1e\uff09 \u5c01\u95ed ssh -L 8080:10.50.60.6:8080 username@10.50.60.6","title":"\u9519\u8bef\u4fee\u590d"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/bug_fix/#linux-docker","text":"\u4e3a\u4f55\u9700\u8981\u8865\u4e01\uff1a\u6b64 Docker \u955c\u50cf\u5728 Windows \u4e3b\u673a\u4e0a\u6784\u5efa\uff0c\u5728 Linux \u4e3b\u673a\u4e0a\u8fd0\u884c\u65f6\u53ef\u80fd\u4f1a\u51fa\u73b0\u95ee\u9898\u3002 \u5982\u679c\u4f60\u7684\u670d\u52a1\u5668\u662f Linux \u7cfb\u7edf\uff1a $ nvidia-smi # \u6b63\u5e38\u60c5\u51b5\u4e0b\u5e94\u80fd\u770b\u5230 GPU \u4fe1\u606f\uff0c\u82e5\u51fa\u73b0\"not found libnvidia-ml.so.1\"\u9519\u8bef\uff0c\u5219\u9700\u8981\u5e94\u7528\u8865\u4e01\u3002 \u6b64\u65f6\uff0c\u4f60\u53ef\u4ee5\u8fdb\u5165docker\u5bb9\u5668\uff0c\u5c1d\u8bd5\u4ee5\u4e0b\u8865\u4e01\u64cd\u4f5c\uff1a cd /usr/lib/x86_64-linux-gnu ln -sf libnvidia-ml.so.5* libnvidia-ml.so.1 ln -sf libnvidia-ml.so.5* libnvidia-ml.so ln -sf libcuda.so.5* libcuda.so.1 # \u53ef\u9009 ln -sf libcudadebugger.so.5* libcudadebugger.so.1 # \u53ef\u9009 ldconfig \u53ef\u4ee5\u68c0\u67e5 torch \u662f\u5426\u6b63\u5e38\u5de5\u4f5c python -c \"import torch; print(torch.zeros(3,3).cuda())\"","title":"\u8865\u4e01\uff1aLinux \u4e3b\u673a Docker\uff08\u5982\u6709\u9700\u8981\uff09"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/bug_fix/#lilab-pkg","text":"\u4e3a\u4f55\u9700\u8981\u8865\u4e01\uff1a\u8be5 Docker \u4e0d\u652f\u6301 NVIDIA \u89c6\u9891\u89e3\u7801\u5668/\u7f16\u7801\u5668\uff0c\u800c\u4e3b\u8981\u7684 LILAB-pkg \u4f1a\u7528\u5230 NVIDIA \u89c6\u9891\u5305\uff0c\u56e0\u6b64\u9700\u8981\u5c06 Docker \u4e2d\u7684\u76f8\u5173\u5305\u964d\u7ea7\u4e3a CPU \u89c6\u9891\u5305\u3002 \u6bcf\u5f53\u4f60\u4ece GitHub \u4e0a\u66f4\u65b0 LILAB-pkg \u540e\uff0c\u90fd\u9700\u8981\u6267\u884c\u6b64\u8865\u4e01\u64cd\u4f5c\uff1a cp -r /root/Downloads/pipeline/LILAB-pkg-patch-for-docker/* ~/LILAB-pkg/","title":"\u8865\u4e01: LILAB-pkg (\u5982\u6709\u9700\u8981)"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/bug_fix/#8080","text":"\u5982\u679c\u8fd0\u884c\u4e0b\u9762\u547d\u4ee4\u65f6\u51fa\u73b0 \"Error starting userland proxy: listen tcp 0.0.0.0:8080: bind: address already in use\" \u9519\u8bef\uff0c\u8bf4\u660e\u4e3b\u673a8080\u7aef\u53e3\u5df2\u88ab\u5360\u7528\u3002 docker run --rm -it -p 8080:8080 ... \u5219\u9700\u8981\u5c06\u7aef\u53e3\u6620\u5c04\u4fee\u6539\u4e3a\u5176\u4ed6\u7aef\u53e3\uff08\u59828081\uff0chttp://localhost:8081/\uff09\uff0c\u4f8b\u5982\uff1a docker run --rm -it -p 8081:8080 ...","title":"\u4e3b\u673a8080\u7aef\u53e3\u5df2\u88ab\u5360\u7528"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/bug_fix/#8080_1","text":"\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f Windows Docker\uff0c\u53ef\u4ee5\u8df3\u8fc7\u6b64\u6b65\u9aa4\u3002 \u4e3a\u4ec0\u4e48\u9700\u8981\u8f6c\u53d1\uff1f \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd0\u884c web \u754c\u9762\u7684\u5ba2\u6237\u7aef\u7535\u8111\uff08\u4f8b\u5982\uff0cIP 10.50.7.103\uff09\u548c\u8fdc\u7a0b\u670d\u52a1\u5668\uff08\u4f8b\u5982\uff0cIP 10.50.60.6\uff09\u4f4d\u4e8e\u4e0d\u540c\u673a\u5668\u4e0a\u3002\u7531\u4e8e Chrome \u7684\u9650\u5236\uff0c\u867d\u7136\u53ef\u4ee5\u8bbf\u95ee vs-code-server\uff08http://10.50.60.6:8080\uff09\uff0c\u4f46\u9ad8\u7ea7\u529f\u80fd\uff08\u6587\u4ef6\u6d4f\u89c8\u3001Jupyter \u7b49\uff09\u65e0\u6cd5\u4f7f\u7528\u3002 \u89e3\u51b3\u65b9\u6cd5 \u4e0d\u63a8\u8350\uff1a\u914d\u7f6e\u5347\u7ea7 HTTPS \u534f\u8bae\uff0c\u5373\uff08https://10.50.60.6:8080\uff09\uff0c\u4f46\u8fd9\u9700\u8981\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u914d\u7f6e SSL \u8bc1\u4e66\uff0c\u8fc7\u7a0b\u8f83\u4e3a\u7e41\u7410\u3002 \u63a8\u8350\uff1a\u5c06\u7f51\u7ad9\u7aef\u53e3\uff08http://10.50.60.6:8080\uff09\u8f6c\u53d1\u5230\u672c\u5730\u3002\u5c06\u8fdc\u7a0b\u670d\u52a1\u5668\u7684 8080 \u7aef\u53e3\u8f6c\u53d1\u5230\u672c\u5730\uff08http://localhost:8080\uff0c\u5373 http://10.50.7.103:8080\uff09\uff0cChrome \u6d4f\u89c8\u5668\u5373\u53ef\u6b63\u5e38\u8bbf\u95ee\u3002\u8fd9\u662f\u56e0\u4e3a Chrome \u5bf9 localhost \u7684\u8bbf\u95ee\u6ca1\u6709\u9650\u5236\u3002 ssh -L 8080:10.50.60.6:8080 username@10.50.60.6 \u64cd\u4f5c\u6b65\u9aa4 Windows \u5ba2\u6237\u7aef\u7535\u8111\u53ef\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff0c\u6ce8\u610f\u66ff\u6362 IP \u5730\u5740\u4e3a\u5b9e\u9645\u7684\u670d\u52a1\u5668\u5730\u5740\u548c\u7aef\u53e3\u3002 \u5ba2\u6237\u7aef\u64cd\u4f5c\u7cfb\u7edf \u670d\u52a1\u5668\u9632\u706b\u5899 8080 \u7aef\u53e3 \u4ee3\u7406\u65b9\u6cd5 Windows \u5df2\u653e\u884c netsh interface portproxy add v4tov4 listenaddress=127.0.0.1 listenport=8080 connectaddress=10.50.60.6 connectport=8080 Linux \u5df2\u653e\u884c socat TCP-LISTEN:8080,bind=127.0.0.1,fork TCP:10.50.60.6:8080 \u901a\u7528\uff08SSH\u6253\u6d1e\uff09 \u5c01\u95ed ssh -L 8080:10.50.60.6:8080 username@10.50.60.6","title":"\u8fdc\u7a0b\u670d\u52a1\u56688080\u7aef\u53e3\u8f6c\u53d1\u5230\u672c\u5730"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/","text":"\u4ec0\u4e48\u662f\u6e38\u4e50\u573a SocialSeq \u6d41\u7a0b\u6e38\u4e50\u573a\uff08Pipeline playground\uff09\u662f\u4e00\u4e2a\u57fa\u4e8edocker\u6253\u5305\u7684\u4ee3\u7801\u73af\u5883\uff0c\u65e8\u5728\u901a\u8fc7\u5728demo\u6570\u636e\u7684\u5904\u7406\u8fc7\u7a0b\u5e2e\u52a9\u7528\u6237\u7406\u89e3 SocialSeq \u6846\u67b6\u7684\u529f\u80fd\u548c\u903b\u8f91\u3002\u5b8c\u6574\u7684\u6d41\u7a0b\u5305\u62ec\u6a21\u578b\u6253\u5305\u3001\u539f\u59cb\u6570\u636e\u5904\u7406\u548c\u7ed3\u679c\u53ef\u89c6\u5316\u3002 \u4f7f\u7528 \u7f51\u9875\u6d4f\u89c8\u5668 \uff0c\u63a2\u7d22 SocialSeq \u6e38\u4e50\u573a\u3002 \u6ce8\u610f \u6e38\u4e50\u573a\u4ec5\u7528\u4e8e\u6f14\u793a SocialSeq \u6846\u67b6\u5404\u6a21\u578b\u7684 \u63a8\u7406\u8fc7\u7a0b \uff0c\u4e0d\u5305\u542b\u6a21\u578b\u7684\u8bad\u7ec3\u3002\u540e\u7eed\u7684\u6570\u636e\u5206\u6790\u8bf7\u53e6\u53c2\u7167\u6587\u6863- \u6587\u7ae0\u56fe\u8868\u590d\u73b0 \u3002 \u7cfb\u7edf\u8981\u6c42 SocialSeq \u5df2\u5728\u4ee5\u4e0b\u914d\u7f6e\u4e0a\u8fdb\u884c\u4e86\u6d4b\u8bd5\uff1a Windows 10 \uff08\u5e26 WSL2\uff09+ x86_64 + NVIDIA RTX4090 Debian 11 + x86_64 + NVIDIA A100 Ubuntu 20.04 + x86_64 + NVIDIA RTX3090 \u9700\u8981\u5b89\u88c5 Docker \u548c NVIDIA \u9a71\u52a8 \uff1a $ docker --version # Docker \u7248\u672c\u5e94 >= 24.0.6 $ nvidia-smi # NVIDIA \u9a71\u52a8\u7248\u672c\u5e94 >= 550.54 \u5b89\u88c5\u6307\u5357 \u60a8\u9700\u8981\u5b89\u88c5 Docker \u5e76\u4e0b\u8f7d\u6a21\u578b\u548c\u6570\u636e\u6587\u4ef6\uff1a \u540d\u79f0 \u7c7b\u578b \u4e0b\u8f7d\u94fe\u63a5 lilab_socialseq_pipeline_cuda_vscode_amd64_20250903.tar Docker \u955c\u50cf \u4e0b\u8f7d\ud83d\udd17 lilab_socialseq_pipeline_code_with_data_20250903.zip \u4ee3\u7801\u4e0e\u6570\u636e \u94fe\u63a5\u540c\u4e0a $ cd SOCIAL_SEQ_DOWNLOAD_PATH $ docker load -i ./lilab_socialseq_pipeline_cuda_vscode_amd64_2025*.tar $ docker images | grep lilab # \u7ed3\u679c\u5c06\u5f97\u5230\u4e00\u4e2a\u540d\u4e3a 'lilab*' \u7684\u955c\u50cf\u6587\u4ef6 $ unzip lilab_socialseq_pipeline_code_with_data_2025*.zip -d ./pipeline # \u89e3\u538b\u6587\u4ef6 $ ls ./pipeline/1-Ball_Calibration # \u68c0\u67e5\u8def\u5f84 $ docker run --rm -it -p 8080 :8080 \\ --gpus all \\ --name lilab_socialseq \\ -e PASSWORD = 2025cxf \\ -v ./pipeline:/root/Downloads/pipeline \\ lilab/socialseq:codeserver-cuda-tensorrt-torch-tensorflow-mmdet-mmpose-dannce-yolo-20250903 \\ /app/code-server/bin/code-server \u5bfc\u822a\u5230 http://localhost:8080 \u5e76\u8f93\u5165\u5bc6\u7801 2025cxf \u4ee5\u8bbf\u95ee VS Code \u670d\u52a1\u5668\u73af\u5883\uff0c\u5728\u90a3\u91cc\u60a8\u53ef\u4ee5\u67e5\u770b\u3001\u7f16\u8f91\u548c\u8fd0\u884c SocialSeq \u4ee3\u7801\u3002 \u5982\u679c\u60a8\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u8fd0\u884c Docker\uff0c\u5e94\u5c06 8080 \u7aef\u53e3\u8f6c\u53d1\u5230\u672c\u5730\u673a\u5668\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 [\u9519\u8bef\u4fee\u590d]\u3002 \u6216\u8005\u901a\u8fc7docker terminal\u8fdb\u5165\u5bb9\u5668 $ docker exec -it lilab_socialseq bash \u73af\u5883\u9a8c\u8bc1 \u5728 http://localhost:8080 \u7684 Docker VS Code \u670d\u52a1\u5668\u73af\u5883\u4e2d\uff1a $ nvidia-smi # \u5728 docker \u5bb9\u5668\u5185\uff0c\u5e94\u663e\u793a GPU \u4fe1\u606f \u9519\u8bef \u5982\u679c\u9047\u5230\u7c7b\u4f3c not found libnvidia-ml.so.1 \u7684\u9519\u8bef\uff0c\u8fd9\u662f\u6b63\u5e38\u73b0\u8c61\uff0c\u56e0\u4e3adocker\u7684nvidia\u9a71\u52a8\u5728windows\u548clinux\u4e0b\u8def\u5f84\u4e0d\u540c\u3002\u89e3\u51b3\u65b9\u6cd5\u8bf7\u53c2\u89c1 [\u9519\u8bef\u4fee\u590d]\u3002 \u6a21\u578b\u521d\u59cb\u5316 \u5c06\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u8f6c\u6362\u4e3a TensorRT \u4ee5\u63d0\u9ad8\u6027\u80fd\u3002\u7531\u4e8e TensorRT \u6a21\u578b\u7ed1\u5b9a\u5230\u7279\u5b9a\u7684\u7cfb\u7edf\u548c\u786c\u4ef6\uff0c\u6b64\u6b65\u9aa4\u5fc5\u987b\u5728\u6bcf\u53f0\u65b0\u673a\u5668\u4e0a\u6267\u884c\u3002 \u6ce8\u610f \u6b64\u6b65\u9aa4\u6bcf\u53f0\u673a\u5668\u53ea\u9700\u6267\u884c\u4e00\u6b21\u3002\u8f6c\u6362\u8fc7\u7a0b\u5c06\u82b1\u8d39 ~20 \u5206\u949f\u3002 bash /root/Downloads/pipeline/model_dannce/convert_dannce_hdf5_to_tensorrt.sh bash /root/Downloads/pipeline/model_mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9/convert_mmdet_model_to_tensorrt.sh bash /root/Downloads/pipeline/model_mmpose/convert_mmpose_model_to_tensorrt.sh bash /root/Downloads/pipeline/model_YOLOv8/convert_yolov8seg_to_tensorrt.sh # \u7ed9 LILAB-pkg \u5305\u6253\u8865\u4e01 cp -r /root/Downloads/pipeline/LILAB-pkg-patch-for-docker/* ~/LILAB-pkg/ \u8fd0\u884c\u8fd9\u4e9b\u547d\u4ee4\u540e\uff0c\u60a8\u5c06\u751f\u6210\uff1a model_mmpose/latest.full.engine model_dannce/DANNCE/train_results/MAX/latest.engine model_YOLOv8/last.full.engine model_mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9/latest.trt \u5168\u90e8\u8bbe\u7f6e\u5b8c\u6210\uff01\u60a8\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u6f14\u793a\u6570\u636e\u8fd0\u884c SocialSeq \u6e38\u4e50\u573a\u4e86\u3002 \u5feb\u901f\u5f00\u59cb \u5b8c\u6210\u4e0a\u8ff0\u5b89\u88c5\u6b65\u9aa4\u540e\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u90e8\u5206\u7684\u8bf4\u660e\u5f00\u59cb\u8fd0\u884c SocialSeq \u6e38\u4e50\u573a\u7ec4\u4ef6\u3002 1. \u5c0f\u7403\u77eb\u6b63 \u4f7f\u7528\u7403\u4f5c\u4e3a\u6821\u51c6\u76ee\u6807\u6bd4\u68cb\u76d8\u63d0\u4f9b\u66f4\u597d\u7684\u53ef\u89c1\u6027\uff0c\u80fd\u591f\u66f4\u5feb\u5730\u8fdb\u884c\u591a\u6444\u50cf\u673a\u7cfb\u7edf\u7684\u5916\u90e8\u6821\u51c6\u3002\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u89c1 \u6587\u6863 \u3002 bash /root/Downloads/pipeline/1-Ball_Calibration/run_task.sh 2. \u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u8ba1\u7b97 (SOCIAL) \u901a\u8fc7 Mask R-CNN \u5904\u7406\u591a\u6444\u50cf\u673a\u52a8\u7269\u89c6\u9891\u8fdb\u884c\u52a8\u7269\u8bc6\u522b\u548c\u5206\u5272\uff0c\u7136\u540e\u4f7f\u7528 DANNCE \u8fdb\u884c 3D \u59ff\u6001\u5173\u952e\u70b9\u63a8\u65ad\uff0c\u4f7f\u7528 SmoothNet \u8fdb\u884c\u52a8\u4f5c\u5173\u952e\u70b9\u5e73\u6ed1\u3002\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u89c1 \u6587\u6863 \u3002 bash /root/Downloads/pipeline/2-Social_3D_Pose/run_task_segmentation.sh # Mask R-CNN \u7528\u4e8e ID \u5206\u5272 bash /root/Downloads/pipeline/2-Social_3D_Pose/run_task_keypoint.sh # DANNCE \u548c SmoothNet \u7528\u4e8e 3D \u59ff\u6001\u91cd\u5efa 3. \u793e\u4ea4\u5e8f\u5217\u6807\u7b7e (SEQ) \u4ece 3D \u59ff\u6001\u4e2d\u63d0\u53d6\u793e\u4ea4\u76f8\u5173\u7279\u5f81\u5e76\u5bf9\u5176\u8fdb\u884c\u5206\u6bb5\uff08\u6bcf\u6bb5 0.8 \u79d2\uff09\u3002\u4f7f\u7528 Seq2seq-FCN \u6a21\u578b\u5bf9\u6bcf\u4e2a\u89c6\u9891\u7247\u6bb5\u8fdb\u884c\u5206\u7c7b\uff0c\u4ea7\u751f\u4e00\u81f4\u7684\u793e\u4ea4\u5e8f\u5217\u6807\u7b7e\u3002\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u89c1 \u6587\u6863 \u3002 bash /root/Downloads/pipeline/3-Sequence_Labeling/run_task.sh 4. \u95ed\u73af\u884c\u4e3a\u63a7\u5236 (LIVE) \u5efa\u7acb\u5177\u6709\u95ed\u73af\u53cd\u9988\u7684\u5b9e\u65f6\u884c\u4e3a\u5206\u6790\u7cfb\u7edf\u3002\u8fd9\u5c06\u6d89\u53ca\u591a\u6444\u50cf\u673a\u611f\u77e5\u548c\u8bc6\u522b\u52a8\u7269\u793e\u4ea4\u884c\u4e3a\uff0c\u4ee5\u5efa\u7acb\u5149\u9057\u4f20\u5b66\u6761\u4ef6\u523a\u6fc0\u3002 \u5c1a\u672a\u52a0\u5165\u6e38\u4e50\u573a\uff0c\u51c6\u5907\u4e2d","title":"\u6e38\u4e50\u573a"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#_1","text":"SocialSeq \u6d41\u7a0b\u6e38\u4e50\u573a\uff08Pipeline playground\uff09\u662f\u4e00\u4e2a\u57fa\u4e8edocker\u6253\u5305\u7684\u4ee3\u7801\u73af\u5883\uff0c\u65e8\u5728\u901a\u8fc7\u5728demo\u6570\u636e\u7684\u5904\u7406\u8fc7\u7a0b\u5e2e\u52a9\u7528\u6237\u7406\u89e3 SocialSeq \u6846\u67b6\u7684\u529f\u80fd\u548c\u903b\u8f91\u3002\u5b8c\u6574\u7684\u6d41\u7a0b\u5305\u62ec\u6a21\u578b\u6253\u5305\u3001\u539f\u59cb\u6570\u636e\u5904\u7406\u548c\u7ed3\u679c\u53ef\u89c6\u5316\u3002 \u4f7f\u7528 \u7f51\u9875\u6d4f\u89c8\u5668 \uff0c\u63a2\u7d22 SocialSeq \u6e38\u4e50\u573a\u3002 \u6ce8\u610f \u6e38\u4e50\u573a\u4ec5\u7528\u4e8e\u6f14\u793a SocialSeq \u6846\u67b6\u5404\u6a21\u578b\u7684 \u63a8\u7406\u8fc7\u7a0b \uff0c\u4e0d\u5305\u542b\u6a21\u578b\u7684\u8bad\u7ec3\u3002\u540e\u7eed\u7684\u6570\u636e\u5206\u6790\u8bf7\u53e6\u53c2\u7167\u6587\u6863- \u6587\u7ae0\u56fe\u8868\u590d\u73b0 \u3002","title":"\u4ec0\u4e48\u662f\u6e38\u4e50\u573a"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#_2","text":"SocialSeq \u5df2\u5728\u4ee5\u4e0b\u914d\u7f6e\u4e0a\u8fdb\u884c\u4e86\u6d4b\u8bd5\uff1a Windows 10 \uff08\u5e26 WSL2\uff09+ x86_64 + NVIDIA RTX4090 Debian 11 + x86_64 + NVIDIA A100 Ubuntu 20.04 + x86_64 + NVIDIA RTX3090 \u9700\u8981\u5b89\u88c5 Docker \u548c NVIDIA \u9a71\u52a8 \uff1a $ docker --version # Docker \u7248\u672c\u5e94 >= 24.0.6 $ nvidia-smi # NVIDIA \u9a71\u52a8\u7248\u672c\u5e94 >= 550.54","title":"\u7cfb\u7edf\u8981\u6c42"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#_3","text":"\u60a8\u9700\u8981\u5b89\u88c5 Docker \u5e76\u4e0b\u8f7d\u6a21\u578b\u548c\u6570\u636e\u6587\u4ef6\uff1a \u540d\u79f0 \u7c7b\u578b \u4e0b\u8f7d\u94fe\u63a5 lilab_socialseq_pipeline_cuda_vscode_amd64_20250903.tar Docker \u955c\u50cf \u4e0b\u8f7d\ud83d\udd17 lilab_socialseq_pipeline_code_with_data_20250903.zip \u4ee3\u7801\u4e0e\u6570\u636e \u94fe\u63a5\u540c\u4e0a $ cd SOCIAL_SEQ_DOWNLOAD_PATH $ docker load -i ./lilab_socialseq_pipeline_cuda_vscode_amd64_2025*.tar $ docker images | grep lilab # \u7ed3\u679c\u5c06\u5f97\u5230\u4e00\u4e2a\u540d\u4e3a 'lilab*' \u7684\u955c\u50cf\u6587\u4ef6 $ unzip lilab_socialseq_pipeline_code_with_data_2025*.zip -d ./pipeline # \u89e3\u538b\u6587\u4ef6 $ ls ./pipeline/1-Ball_Calibration # \u68c0\u67e5\u8def\u5f84 $ docker run --rm -it -p 8080 :8080 \\ --gpus all \\ --name lilab_socialseq \\ -e PASSWORD = 2025cxf \\ -v ./pipeline:/root/Downloads/pipeline \\ lilab/socialseq:codeserver-cuda-tensorrt-torch-tensorflow-mmdet-mmpose-dannce-yolo-20250903 \\ /app/code-server/bin/code-server \u5bfc\u822a\u5230 http://localhost:8080 \u5e76\u8f93\u5165\u5bc6\u7801 2025cxf \u4ee5\u8bbf\u95ee VS Code \u670d\u52a1\u5668\u73af\u5883\uff0c\u5728\u90a3\u91cc\u60a8\u53ef\u4ee5\u67e5\u770b\u3001\u7f16\u8f91\u548c\u8fd0\u884c SocialSeq \u4ee3\u7801\u3002 \u5982\u679c\u60a8\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u8fd0\u884c Docker\uff0c\u5e94\u5c06 8080 \u7aef\u53e3\u8f6c\u53d1\u5230\u672c\u5730\u673a\u5668\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 [\u9519\u8bef\u4fee\u590d]\u3002 \u6216\u8005\u901a\u8fc7docker terminal\u8fdb\u5165\u5bb9\u5668 $ docker exec -it lilab_socialseq bash","title":"\u5b89\u88c5\u6307\u5357"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#_4","text":"\u5728 http://localhost:8080 \u7684 Docker VS Code \u670d\u52a1\u5668\u73af\u5883\u4e2d\uff1a $ nvidia-smi # \u5728 docker \u5bb9\u5668\u5185\uff0c\u5e94\u663e\u793a GPU \u4fe1\u606f \u9519\u8bef \u5982\u679c\u9047\u5230\u7c7b\u4f3c not found libnvidia-ml.so.1 \u7684\u9519\u8bef\uff0c\u8fd9\u662f\u6b63\u5e38\u73b0\u8c61\uff0c\u56e0\u4e3adocker\u7684nvidia\u9a71\u52a8\u5728windows\u548clinux\u4e0b\u8def\u5f84\u4e0d\u540c\u3002\u89e3\u51b3\u65b9\u6cd5\u8bf7\u53c2\u89c1 [\u9519\u8bef\u4fee\u590d]\u3002","title":"\u73af\u5883\u9a8c\u8bc1"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#_5","text":"\u5c06\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u8f6c\u6362\u4e3a TensorRT \u4ee5\u63d0\u9ad8\u6027\u80fd\u3002\u7531\u4e8e TensorRT \u6a21\u578b\u7ed1\u5b9a\u5230\u7279\u5b9a\u7684\u7cfb\u7edf\u548c\u786c\u4ef6\uff0c\u6b64\u6b65\u9aa4\u5fc5\u987b\u5728\u6bcf\u53f0\u65b0\u673a\u5668\u4e0a\u6267\u884c\u3002 \u6ce8\u610f \u6b64\u6b65\u9aa4\u6bcf\u53f0\u673a\u5668\u53ea\u9700\u6267\u884c\u4e00\u6b21\u3002\u8f6c\u6362\u8fc7\u7a0b\u5c06\u82b1\u8d39 ~20 \u5206\u949f\u3002 bash /root/Downloads/pipeline/model_dannce/convert_dannce_hdf5_to_tensorrt.sh bash /root/Downloads/pipeline/model_mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9/convert_mmdet_model_to_tensorrt.sh bash /root/Downloads/pipeline/model_mmpose/convert_mmpose_model_to_tensorrt.sh bash /root/Downloads/pipeline/model_YOLOv8/convert_yolov8seg_to_tensorrt.sh # \u7ed9 LILAB-pkg \u5305\u6253\u8865\u4e01 cp -r /root/Downloads/pipeline/LILAB-pkg-patch-for-docker/* ~/LILAB-pkg/ \u8fd0\u884c\u8fd9\u4e9b\u547d\u4ee4\u540e\uff0c\u60a8\u5c06\u751f\u6210\uff1a model_mmpose/latest.full.engine model_dannce/DANNCE/train_results/MAX/latest.engine model_YOLOv8/last.full.engine model_mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9/latest.trt \u5168\u90e8\u8bbe\u7f6e\u5b8c\u6210\uff01\u60a8\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u6f14\u793a\u6570\u636e\u8fd0\u884c SocialSeq \u6e38\u4e50\u573a\u4e86\u3002","title":"\u6a21\u578b\u521d\u59cb\u5316"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#_6","text":"\u5b8c\u6210\u4e0a\u8ff0\u5b89\u88c5\u6b65\u9aa4\u540e\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u90e8\u5206\u7684\u8bf4\u660e\u5f00\u59cb\u8fd0\u884c SocialSeq \u6e38\u4e50\u573a\u7ec4\u4ef6\u3002","title":"\u5feb\u901f\u5f00\u59cb"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#1","text":"\u4f7f\u7528\u7403\u4f5c\u4e3a\u6821\u51c6\u76ee\u6807\u6bd4\u68cb\u76d8\u63d0\u4f9b\u66f4\u597d\u7684\u53ef\u89c1\u6027\uff0c\u80fd\u591f\u66f4\u5feb\u5730\u8fdb\u884c\u591a\u6444\u50cf\u673a\u7cfb\u7edf\u7684\u5916\u90e8\u6821\u51c6\u3002\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u89c1 \u6587\u6863 \u3002 bash /root/Downloads/pipeline/1-Ball_Calibration/run_task.sh","title":"1. \u5c0f\u7403\u77eb\u6b63"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#2-social","text":"\u901a\u8fc7 Mask R-CNN \u5904\u7406\u591a\u6444\u50cf\u673a\u52a8\u7269\u89c6\u9891\u8fdb\u884c\u52a8\u7269\u8bc6\u522b\u548c\u5206\u5272\uff0c\u7136\u540e\u4f7f\u7528 DANNCE \u8fdb\u884c 3D \u59ff\u6001\u5173\u952e\u70b9\u63a8\u65ad\uff0c\u4f7f\u7528 SmoothNet \u8fdb\u884c\u52a8\u4f5c\u5173\u952e\u70b9\u5e73\u6ed1\u3002\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u89c1 \u6587\u6863 \u3002 bash /root/Downloads/pipeline/2-Social_3D_Pose/run_task_segmentation.sh # Mask R-CNN \u7528\u4e8e ID \u5206\u5272 bash /root/Downloads/pipeline/2-Social_3D_Pose/run_task_keypoint.sh # DANNCE \u548c SmoothNet \u7528\u4e8e 3D \u59ff\u6001\u91cd\u5efa","title":"2. \u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u8ba1\u7b97 (SOCIAL)"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#3-seq","text":"\u4ece 3D \u59ff\u6001\u4e2d\u63d0\u53d6\u793e\u4ea4\u76f8\u5173\u7279\u5f81\u5e76\u5bf9\u5176\u8fdb\u884c\u5206\u6bb5\uff08\u6bcf\u6bb5 0.8 \u79d2\uff09\u3002\u4f7f\u7528 Seq2seq-FCN \u6a21\u578b\u5bf9\u6bcf\u4e2a\u89c6\u9891\u7247\u6bb5\u8fdb\u884c\u5206\u7c7b\uff0c\u4ea7\u751f\u4e00\u81f4\u7684\u793e\u4ea4\u5e8f\u5217\u6807\u7b7e\u3002\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u89c1 \u6587\u6863 \u3002 bash /root/Downloads/pipeline/3-Sequence_Labeling/run_task.sh","title":"3. \u793e\u4ea4\u5e8f\u5217\u6807\u7b7e (SEQ)"},{"location":"%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/pipeline_playground_installation/#4-live","text":"\u5efa\u7acb\u5177\u6709\u95ed\u73af\u53cd\u9988\u7684\u5b9e\u65f6\u884c\u4e3a\u5206\u6790\u7cfb\u7edf\u3002\u8fd9\u5c06\u6d89\u53ca\u591a\u6444\u50cf\u673a\u611f\u77e5\u548c\u8bc6\u522b\u52a8\u7269\u793e\u4ea4\u884c\u4e3a\uff0c\u4ee5\u5efa\u7acb\u5149\u9057\u4f20\u5b66\u6761\u4ef6\u523a\u6fc0\u3002 \u5c1a\u672a\u52a0\u5165\u6e38\u4e50\u573a\uff0c\u51c6\u5907\u4e2d","title":"4. \u95ed\u73af\u884c\u4e3a\u63a7\u5236 (LIVE)"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/application/","text":"\u5c0f\u7403\u77eb\u6b63\u7684\u6982\u8ff0 \u4f7f\u7528\u5c0f\u7403\u5f00\u53d1\u5c0f\u7403\u6807\u5b9a\u6d41\u7a0b\uff0c\u5b9e\u73b0\u4e86\u5feb\u901f\u7cbe\u51c6\u7684\u591a\u76f8\u673a\u6807\u5b9a\u3002\u8be6\u7ec6\u4e5f\u53ef\u4ee5\u53c2\u8003 multiview_ball_calib \u3002\u8fd9\u91cc\u53ea\u653e\u5927\u81f4\u7684\u6d41\u7a0b\u3002 \u4e3a\u4ec0\u4e48\u9700\u8981\u7528\u5c0f\u7403\u6765\u6807\u5b9a \u591a\u76f8\u673a\u5916\u53c2\u7684\u8ba1\u7b97\uff08\u4f4d\u7f6e\u548c\u65cb\u8f6c\u89d2\u5ea6\uff09\u8fd9\u5bf9\u4e8e\u5efa\u7acb\u51c6\u786e\u7684\u4e09\u7ef4\u5750\u6807\u6a21\u578b\u662f\u5fc5\u987b\u7684\u3002\u4f20\u7edf\u7684\u68cb\u76d8\u5916\u53c2\u6807\u5b9a\u65b9\u6cd5\u8981\u6c42\u591a\u4e2a\u76f8\u673a\u80fd\u591f\u540c\u65f6\u62cd\u6444\u5230\u68cb\u76d8\u7684\u6b63\u9762\u56fe\u6848\uff0c\u4f46\u5728\u73af\u7ed5\u5f0f\u591a\u76f8\u673a\u914d\u7f6e\u4e2d\uff0c\u5b58\u5728\u89c6\u89d2\u9650\u5236\u3002\u68cb\u76d8\u7684\u5e94\u7528\u6548\u7387\u4f4e\uff0c\u800c\u4f7f\u7528\u5c0f\u7403\u7684\u6548\u7387\u9ad8\u3002 \u5b9e\u9a8c\u64cd\u4f5c\u6b65\u9aa4 \u5236\u4f5c\u76f4\u5f84\u4e3a1.5 cm\u7684\u91d1\u5c5e\u9776\u7403\uff0c\u901a\u8fc7\u4e00\u6839\u77ed\u6746\u60ac\u540a\u3002\u5b9e\u9a8c\u5f00\u59cb\u524d\uff0c\u5148\u5728\u5730\u9762\u4e0a\u653e\u7f6e\u4e00\u4e2a\u68cb\u76d8\u4f4d\u4e8e\u8bb0\u5f55\u73af\u5883\u7684\u4e2d\u5fc3\uff0c\u7528\u4e8e\u5bf9\u9f50\u5750\u6807\u7cfb\u3002\u521d\u59cb\u65f6\uff0c\u5c06\u9776\u7403\u653e\u7f6e\u539f\u7406\u68cb\u76d8\uff0c\u907f\u514d\u906e\u6321\u3002\u7136\u540e\uff0c\u5f00\u542f\u8bb0\u5f55\uff0c\u5c06\u5c0f\u7403\u7ed5\u5927\u9f20\u6d3b\u52a8\u7a7a\u95f4\u5185\u904d\u53862\u5206\u949f\u3002\u4f7f\u7528OBS Studio\u8f6f\u4ef6\u91c7\u96c6\u591a\u89c6\u89d2\u89c6\u9891\uff0c\u5c0f\u7403\u8fd0\u52a8\u8f68\u8ff9\u8986\u76d6\u9700\u8981\u77eb\u6b63\u7684\u7a7a\u95f4\u4f4d\u7f6e\u3002 \u91cd\u8981\u8b66\u544a \u7403\u7684\u76f4\u5f84\u4f1a\u5f71\u54cd\u6807\u5b9a\u7cbe\u5ea6\uff0c\u5efa\u8bae\u4f7f\u7528\u76f4\u5f84\u4e3a1.5 cm\u7684\u91d1\u5c5e\u9776\u7403\u3002\u7403\u7684\u8fd0\u52a8\u901f\u5ea6\u4e0d\u8981\u592a\u5feb\uff0c\u5426\u5219\u4ea7\u751f\u8fd0\u52a8\u6a21\u7cca\uff0c\u5f71\u54cd\u6807\u5b9a\u7cbe\u5ea6\u3002 \u7528\u4ee3\u7801\u89e3\u6790\u89c6\u9891 #!/bin/bash conda activate mmdet vfile = '/PATH_to_ball/BALL____2024-01-22_14-34-01.mp4' LILAB_DIR = /home/liying_lab/chenxf/ml-project/LILAB-py/lilab bash $LILAB_DIR /multiview_scripts_dev/p_calibration.sh $vfile carl \u5176\u4e2d vfile \u662f OBS Studio \u8f6f\u4ef6\u5f55\u5236\u7684\u89c6\u9891\u6587\u4ef6\u8def\u5f84\uff0c carl \u662f\u76f8\u673a\u6807\u5b9a\u53c2\u6570\u3002\u811a\u672c\u4f1a\u81ea\u52a8\u89e3\u6790\u89c6\u9891\uff0c\u5e76\u751f\u6210\u6807\u5b9a\u7ed3\u679c\u3002 \u5e38\u7528\u7684 \u76f8\u673a\u6807\u5b9a\u53c2\u6570\u5305\u62ec\uff1a - ana : \u5927\u9f20\u884c\u4e3a\u95f41 - bob : \u5927\u9f20\u884c\u4e3a\u95f42 / \u5c0f\u6876 - carl : \u5927\u9f20\u884c\u4e3a\u95f43 / \u4e2d&\u5927\u6876\u3002 \u91cd\u8981\u8b66\u544a \u8bf7\u68c0\u67e5\u6b63\u786e\u7684\u76f8\u673a\u6807\u5b9a\u53c2\u6570\uff0c\u8fd9\u4e9b\u6807\u5b9a\u53c2\u6570\u5b58\u50a8\u4e86\u9884\u5148\u201c\u6807\u5b9a\u7684\u5185\u5b58\u201d\u3002\u6bcf\u5957\u591a\u76f8\u673a\u7cfb\u7edf\u7684\u5185\u5b58\u6709\u8f83\u5927\u533a\u522b\uff0c\u8bf7\u52ff\u6df7\u6dc6\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u6807\u5b9a\u7ed3\u679c\u4e0d\u51c6\u786e\u3002 \u6807\u5b9a\u7ed3\u679c\u5c55\u793a \u5728\u751f\u6210\u7684 *ball_keypoint.mp4 \u4e2d\u67e5\u770b\u7eff\u8272\u9884\u6d4b\u70b9\u4e0e\u5c0f\u7403\u7684\u543b\u5408\u7a0b\u5ea6\u3002\u751f\u6210\u7684 *.calibpkl \u662f\u591a\u76f8\u673a\u6a21\u578b\u6587\u4ef6\uff0c\u7528\u4e8e\u540e\u7eed\u76843D\u91cd\u5efa\u3002 \u6807\u5b9a\u7684\u7cbe\u5ea6\u8bc4\u4ef7 \u67e5\u770b\u4ee3\u7801\u8fd0\u884c\u7684\u8f93\u51fa\u3002\u5176\u4e2d Reprojection errors \u662f\u91cd\u6295\u5f71\u8bef\u5dee\uff0c\u8868\u793a\u9884\u6d4b\u70b9\u4e0e\u5b9e\u9645\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u8bef\u5dee\u8d8a\u5c0f\uff0c\u6807\u5b9a\u7cbe\u5ea6\u8d8a\u9ad8\u3002\u901a\u5e38\u5141\u8bb8\u5728 4.0+-2.0 \u50cf\u7d20\u5185\u3002 \u9519\u8bef \u8fd0\u884cp_calibration.sh\u65f6\u8f93\u51faerror pixel\u8fc7\u5927/keypoint\u89c6\u9891\u4e2d\u7eff\u70b9\u65e0\u6cd5\u6b63\u786e\u7684\u8ddf\u968f\u5c0f\u7403\uff0c\u8bf4\u660e\u6821\u6b63\u4e0d\u6b63\u786e\u3002\u65e2\u6709\u53ef\u80fd\u662f2D\u8bc6\u522b\u5c0f\u7403\u6709\u5f88\u5927\u504f\u5dee\u3002\u9700\u8981\u91cd\u65b0\u6253\u6807\uff0c\u89c1\u300aball\u7684\u6269\u589e\u8bad\u7ec3\u300b","title":"\u5e94\u7528\u573a\u666f"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/application/#_1","text":"\u4f7f\u7528\u5c0f\u7403\u5f00\u53d1\u5c0f\u7403\u6807\u5b9a\u6d41\u7a0b\uff0c\u5b9e\u73b0\u4e86\u5feb\u901f\u7cbe\u51c6\u7684\u591a\u76f8\u673a\u6807\u5b9a\u3002\u8be6\u7ec6\u4e5f\u53ef\u4ee5\u53c2\u8003 multiview_ball_calib \u3002\u8fd9\u91cc\u53ea\u653e\u5927\u81f4\u7684\u6d41\u7a0b\u3002","title":"\u5c0f\u7403\u77eb\u6b63\u7684\u6982\u8ff0"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/application/#_2","text":"\u591a\u76f8\u673a\u5916\u53c2\u7684\u8ba1\u7b97\uff08\u4f4d\u7f6e\u548c\u65cb\u8f6c\u89d2\u5ea6\uff09\u8fd9\u5bf9\u4e8e\u5efa\u7acb\u51c6\u786e\u7684\u4e09\u7ef4\u5750\u6807\u6a21\u578b\u662f\u5fc5\u987b\u7684\u3002\u4f20\u7edf\u7684\u68cb\u76d8\u5916\u53c2\u6807\u5b9a\u65b9\u6cd5\u8981\u6c42\u591a\u4e2a\u76f8\u673a\u80fd\u591f\u540c\u65f6\u62cd\u6444\u5230\u68cb\u76d8\u7684\u6b63\u9762\u56fe\u6848\uff0c\u4f46\u5728\u73af\u7ed5\u5f0f\u591a\u76f8\u673a\u914d\u7f6e\u4e2d\uff0c\u5b58\u5728\u89c6\u89d2\u9650\u5236\u3002\u68cb\u76d8\u7684\u5e94\u7528\u6548\u7387\u4f4e\uff0c\u800c\u4f7f\u7528\u5c0f\u7403\u7684\u6548\u7387\u9ad8\u3002","title":"\u4e3a\u4ec0\u4e48\u9700\u8981\u7528\u5c0f\u7403\u6765\u6807\u5b9a"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/application/#_3","text":"\u5236\u4f5c\u76f4\u5f84\u4e3a1.5 cm\u7684\u91d1\u5c5e\u9776\u7403\uff0c\u901a\u8fc7\u4e00\u6839\u77ed\u6746\u60ac\u540a\u3002\u5b9e\u9a8c\u5f00\u59cb\u524d\uff0c\u5148\u5728\u5730\u9762\u4e0a\u653e\u7f6e\u4e00\u4e2a\u68cb\u76d8\u4f4d\u4e8e\u8bb0\u5f55\u73af\u5883\u7684\u4e2d\u5fc3\uff0c\u7528\u4e8e\u5bf9\u9f50\u5750\u6807\u7cfb\u3002\u521d\u59cb\u65f6\uff0c\u5c06\u9776\u7403\u653e\u7f6e\u539f\u7406\u68cb\u76d8\uff0c\u907f\u514d\u906e\u6321\u3002\u7136\u540e\uff0c\u5f00\u542f\u8bb0\u5f55\uff0c\u5c06\u5c0f\u7403\u7ed5\u5927\u9f20\u6d3b\u52a8\u7a7a\u95f4\u5185\u904d\u53862\u5206\u949f\u3002\u4f7f\u7528OBS Studio\u8f6f\u4ef6\u91c7\u96c6\u591a\u89c6\u89d2\u89c6\u9891\uff0c\u5c0f\u7403\u8fd0\u52a8\u8f68\u8ff9\u8986\u76d6\u9700\u8981\u77eb\u6b63\u7684\u7a7a\u95f4\u4f4d\u7f6e\u3002 \u91cd\u8981\u8b66\u544a \u7403\u7684\u76f4\u5f84\u4f1a\u5f71\u54cd\u6807\u5b9a\u7cbe\u5ea6\uff0c\u5efa\u8bae\u4f7f\u7528\u76f4\u5f84\u4e3a1.5 cm\u7684\u91d1\u5c5e\u9776\u7403\u3002\u7403\u7684\u8fd0\u52a8\u901f\u5ea6\u4e0d\u8981\u592a\u5feb\uff0c\u5426\u5219\u4ea7\u751f\u8fd0\u52a8\u6a21\u7cca\uff0c\u5f71\u54cd\u6807\u5b9a\u7cbe\u5ea6\u3002","title":"\u5b9e\u9a8c\u64cd\u4f5c\u6b65\u9aa4"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/application/#_4","text":"#!/bin/bash conda activate mmdet vfile = '/PATH_to_ball/BALL____2024-01-22_14-34-01.mp4' LILAB_DIR = /home/liying_lab/chenxf/ml-project/LILAB-py/lilab bash $LILAB_DIR /multiview_scripts_dev/p_calibration.sh $vfile carl \u5176\u4e2d vfile \u662f OBS Studio \u8f6f\u4ef6\u5f55\u5236\u7684\u89c6\u9891\u6587\u4ef6\u8def\u5f84\uff0c carl \u662f\u76f8\u673a\u6807\u5b9a\u53c2\u6570\u3002\u811a\u672c\u4f1a\u81ea\u52a8\u89e3\u6790\u89c6\u9891\uff0c\u5e76\u751f\u6210\u6807\u5b9a\u7ed3\u679c\u3002 \u5e38\u7528\u7684 \u76f8\u673a\u6807\u5b9a\u53c2\u6570\u5305\u62ec\uff1a - ana : \u5927\u9f20\u884c\u4e3a\u95f41 - bob : \u5927\u9f20\u884c\u4e3a\u95f42 / \u5c0f\u6876 - carl : \u5927\u9f20\u884c\u4e3a\u95f43 / \u4e2d&\u5927\u6876\u3002 \u91cd\u8981\u8b66\u544a \u8bf7\u68c0\u67e5\u6b63\u786e\u7684\u76f8\u673a\u6807\u5b9a\u53c2\u6570\uff0c\u8fd9\u4e9b\u6807\u5b9a\u53c2\u6570\u5b58\u50a8\u4e86\u9884\u5148\u201c\u6807\u5b9a\u7684\u5185\u5b58\u201d\u3002\u6bcf\u5957\u591a\u76f8\u673a\u7cfb\u7edf\u7684\u5185\u5b58\u6709\u8f83\u5927\u533a\u522b\uff0c\u8bf7\u52ff\u6df7\u6dc6\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u6807\u5b9a\u7ed3\u679c\u4e0d\u51c6\u786e\u3002","title":"\u7528\u4ee3\u7801\u89e3\u6790\u89c6\u9891"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/application/#_5","text":"\u5728\u751f\u6210\u7684 *ball_keypoint.mp4 \u4e2d\u67e5\u770b\u7eff\u8272\u9884\u6d4b\u70b9\u4e0e\u5c0f\u7403\u7684\u543b\u5408\u7a0b\u5ea6\u3002\u751f\u6210\u7684 *.calibpkl \u662f\u591a\u76f8\u673a\u6a21\u578b\u6587\u4ef6\uff0c\u7528\u4e8e\u540e\u7eed\u76843D\u91cd\u5efa\u3002","title":"\u6807\u5b9a\u7ed3\u679c\u5c55\u793a"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/application/#_6","text":"\u67e5\u770b\u4ee3\u7801\u8fd0\u884c\u7684\u8f93\u51fa\u3002\u5176\u4e2d Reprojection errors \u662f\u91cd\u6295\u5f71\u8bef\u5dee\uff0c\u8868\u793a\u9884\u6d4b\u70b9\u4e0e\u5b9e\u9645\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u8bef\u5dee\u8d8a\u5c0f\uff0c\u6807\u5b9a\u7cbe\u5ea6\u8d8a\u9ad8\u3002\u901a\u5e38\u5141\u8bb8\u5728 4.0+-2.0 \u50cf\u7d20\u5185\u3002 \u9519\u8bef \u8fd0\u884cp_calibration.sh\u65f6\u8f93\u51faerror pixel\u8fc7\u5927/keypoint\u89c6\u9891\u4e2d\u7eff\u70b9\u65e0\u6cd5\u6b63\u786e\u7684\u8ddf\u968f\u5c0f\u7403\uff0c\u8bf4\u660e\u6821\u6b63\u4e0d\u6b63\u786e\u3002\u65e2\u6709\u53ef\u80fd\u662f2D\u8bc6\u522b\u5c0f\u7403\u6709\u5f88\u5927\u504f\u5dee\u3002\u9700\u8981\u91cd\u65b0\u6253\u6807\uff0c\u89c1\u300aball\u7684\u6269\u589e\u8bad\u7ec3\u300b","title":"\u6807\u5b9a\u7684\u7cbe\u5ea6\u8bc4\u4ef7"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/","text":"ball\u89c6\u9891\u7684\u6269\u589e\u8bad\u7ec3 \u622a\u56fe \u5728pot player\u4e2d\u8fdb\u884c\u622a\u53d6\uff0c\u5b58\u653e\u81f3\u7edf\u4e00\u4f4d\u7f6e \u627e\u56de\u6e90\u89c6\u9891\u622a\u56fe /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/outlier_refine/process_ball_dzy.sh \u6253\u6807 \u4f7f\u7528labelme\u8fdb\u884c\u6253\u6807\u3002\u8fd9\u662f\u4e2a labelme \u6807\u6ce8\u540e\u7684 json \u6587\u4ef6\u793a\u4f8b\u3002 { \"version\": \"4.2.5\", \"flags\": {}, \"shapes\": [ { \"label\": \"ball\", \"points\": [ [ 226.4642857142857, 410.74999999999994 ] ], \"group_id\": null, \"shape_type\": \"point\", \"flags\": {} } ], \"imagePath\": \"2024-02-27_21-59-28ball_bob_room2_pannel8_002675.jpg\", \"imageData\": null, \"imageHeight\": 800, \"imageWidth\": 1280 } \u91cd\u8981\u8b66\u544a \u8bf7\u4f7f\u7528labelme\u7684 point \u7c7b\u578b\uff0c\u800c\u4e0d\u662f rectangle \u7c7b\u578b\uff0c\u56e0\u4e3apoint\u7c7b\u578b\u53ef\u4ee5\u66f4\u7cbe\u786e\u5730\u6807\u6ce8\u5c0f\u7403\u7684\u4f4d\u7f6e\u3002\u6807\u7b7e\u547d\u540d\u4e3a ball \uff0c\u8bf7\u786e\u4fdd\u5728\u6253\u6807\u65f6\u4f7f\u7528\u6b63\u786e\u7684\u6807\u7b7e\u540d\u79f0\u3002 \u628a\u6570\u636e\u6587\u4ef6\u5939\u6539\u540d\u540e\u653e\u5165\u6307\u5b9a\u4f4d\u7f6e /home/liying_lab/chenxinfeng/DATA/mmpose/data/ball labelme\u683c\u5f0f\u8f6c\u6362 python -m lilab.cvutils.labelme_to_cocokeypoints_ball $LABEL_IMG_DIR \u8bad\u7ec3 /home/liying_lab/chenxinfeng/DATA/mmpose/res50_coco_ball_512x320_cam9.py \u4fee\u6539\u4ee3\u7801\uff0c\u5c06\u65b0\u589e\u7684\u6570\u636e\u6587\u4ef6\u5939\u548cjson\u6587\u4ef6\u5730\u5740\u6dfb\u52a0\u8fdb\u65b0\u7684dict cd /home/liying_lab/chenxinfeng/DATA/mmpose python tools/train.py res50_coco_ball_512x320_cam9.py \u6a21\u578b\u52a0\u901f /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/mmpose_dev/convert_model.sh \u4fee\u6539\u5bf9\u5e94\u7684\u6a21\u578b\u6587\u4ef6\u540d\u5230\u53d8\u91cf\u4e2d \u786e\u8ba4 /home/liying_lab/chenxinfeng/DATA/mmpose/work_dirs \u4e2d\u662f\u5426\u5b58\u5728\u65b0\u7684json\u7b49\uff0c\u4ee5\u53calatest.*\u7684\u66f4\u65b0\u65f6\u95f4 \u91cd\u65b0\u4ece\u5934\u8fd0\u884c\u5c0f\u7403\u5b9a\u4f4d\u4ee3\u7801 /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/multiview_scripts_dev/calibration.sh","title":"\u6570\u636e\u96c6\u5236\u4f5c&\u6a21\u578b\u66f4\u65b0"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#ball","text":"","title":"ball\u89c6\u9891\u7684\u6269\u589e\u8bad\u7ec3"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#_1","text":"\u5728pot player\u4e2d\u8fdb\u884c\u622a\u53d6\uff0c\u5b58\u653e\u81f3\u7edf\u4e00\u4f4d\u7f6e","title":"\u622a\u56fe"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#_2","text":"/home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/outlier_refine/process_ball_dzy.sh","title":"\u627e\u56de\u6e90\u89c6\u9891\u622a\u56fe"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#_3","text":"\u4f7f\u7528labelme\u8fdb\u884c\u6253\u6807\u3002\u8fd9\u662f\u4e2a labelme \u6807\u6ce8\u540e\u7684 json \u6587\u4ef6\u793a\u4f8b\u3002 { \"version\": \"4.2.5\", \"flags\": {}, \"shapes\": [ { \"label\": \"ball\", \"points\": [ [ 226.4642857142857, 410.74999999999994 ] ], \"group_id\": null, \"shape_type\": \"point\", \"flags\": {} } ], \"imagePath\": \"2024-02-27_21-59-28ball_bob_room2_pannel8_002675.jpg\", \"imageData\": null, \"imageHeight\": 800, \"imageWidth\": 1280 } \u91cd\u8981\u8b66\u544a \u8bf7\u4f7f\u7528labelme\u7684 point \u7c7b\u578b\uff0c\u800c\u4e0d\u662f rectangle \u7c7b\u578b\uff0c\u56e0\u4e3apoint\u7c7b\u578b\u53ef\u4ee5\u66f4\u7cbe\u786e\u5730\u6807\u6ce8\u5c0f\u7403\u7684\u4f4d\u7f6e\u3002\u6807\u7b7e\u547d\u540d\u4e3a ball \uff0c\u8bf7\u786e\u4fdd\u5728\u6253\u6807\u65f6\u4f7f\u7528\u6b63\u786e\u7684\u6807\u7b7e\u540d\u79f0\u3002","title":"\u6253\u6807"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#_4","text":"/home/liying_lab/chenxinfeng/DATA/mmpose/data/ball","title":"\u628a\u6570\u636e\u6587\u4ef6\u5939\u6539\u540d\u540e\u653e\u5165\u6307\u5b9a\u4f4d\u7f6e"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#labelme","text":"python -m lilab.cvutils.labelme_to_cocokeypoints_ball $LABEL_IMG_DIR","title":"labelme\u683c\u5f0f\u8f6c\u6362"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#_5","text":"/home/liying_lab/chenxinfeng/DATA/mmpose/res50_coco_ball_512x320_cam9.py \u4fee\u6539\u4ee3\u7801\uff0c\u5c06\u65b0\u589e\u7684\u6570\u636e\u6587\u4ef6\u5939\u548cjson\u6587\u4ef6\u5730\u5740\u6dfb\u52a0\u8fdb\u65b0\u7684dict cd /home/liying_lab/chenxinfeng/DATA/mmpose python tools/train.py res50_coco_ball_512x320_cam9.py","title":"\u8bad\u7ec3"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#_6","text":"/home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/mmpose_dev/convert_model.sh \u4fee\u6539\u5bf9\u5e94\u7684\u6a21\u578b\u6587\u4ef6\u540d\u5230\u53d8\u91cf\u4e2d","title":"\u6a21\u578b\u52a0\u901f"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#_7","text":"/home/liying_lab/chenxinfeng/DATA/mmpose/work_dirs \u4e2d\u662f\u5426\u5b58\u5728\u65b0\u7684json\u7b49\uff0c\u4ee5\u53calatest.*\u7684\u66f4\u65b0\u65f6\u95f4","title":"\u786e\u8ba4"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/dataset/#_8","text":"/home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/multiview_scripts_dev/calibration.sh","title":"\u91cd\u65b0\u4ece\u5934\u8fd0\u884c\u5c0f\u7403\u5b9a\u4f4d\u4ee3\u7801"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/process/","text":"\u4ee3\u7801\u6d41\u7a0b \u591a\u76f8\u673a\u6a21\u578b\u7684\u6807\u5b9a\u3002\u8f93\u5165\u662f\u89c6\u9891\u6587\u4ef6\uff0c\u8f93\u51fa\u662f\u6807\u5b9a\u7ed3\u679c\u3002 #!/bin/bash conda activate mmdet vfile = '/PATH_to_ball/BALL____2024-01-22_14-34-01.mp4' LILAB_DIR = /home/liying_lab/chenxf/ml-project/LILAB-py/lilab bash $LILAB_DIR /multiview_scripts_dev/p_calibration.sh $vfile carl \u5176\u4e2d vfile \u662f OBS Studio \u8f6f\u4ef6\u5f55\u5236\u7684\u89c6\u9891\u6587\u4ef6\u8def\u5f84\uff0c carl \u662f\u76f8\u673a\u6807\u5b9a\u53c2\u6570\u3002\u811a\u672c\u4f1a\u81ea\u52a8\u89e3\u6790\u89c6\u9891\uff0c\u5e76\u751f\u6210\u6807\u5b9a\u7ed3\u679c\u3002 \u5e38\u7528\u7684 \u76f8\u673a\u6807\u5b9a\u53c2\u6570\u5305\u62ec\uff1a ana : \u5927\u9f20\u884c\u4e3a\u95f41 bob : \u5927\u9f20\u884c\u4e3a\u95f42 / \u5c0f\u6876 carl : \u5927\u9f20\u884c\u4e3a\u95f42 / \u4e2d&\u5927\u6876\u3002","title":"\u4ee3\u7801\u6d41\u7a0b"},{"location":"%E5%B0%8F%E7%90%83%E7%9F%AB%E6%AD%A3/process/#_1","text":"\u591a\u76f8\u673a\u6a21\u578b\u7684\u6807\u5b9a\u3002\u8f93\u5165\u662f\u89c6\u9891\u6587\u4ef6\uff0c\u8f93\u51fa\u662f\u6807\u5b9a\u7ed3\u679c\u3002 #!/bin/bash conda activate mmdet vfile = '/PATH_to_ball/BALL____2024-01-22_14-34-01.mp4' LILAB_DIR = /home/liying_lab/chenxf/ml-project/LILAB-py/lilab bash $LILAB_DIR /multiview_scripts_dev/p_calibration.sh $vfile carl \u5176\u4e2d vfile \u662f OBS Studio \u8f6f\u4ef6\u5f55\u5236\u7684\u89c6\u9891\u6587\u4ef6\u8def\u5f84\uff0c carl \u662f\u76f8\u673a\u6807\u5b9a\u53c2\u6570\u3002\u811a\u672c\u4f1a\u81ea\u52a8\u89e3\u6790\u89c6\u9891\uff0c\u5e76\u751f\u6210\u6807\u5b9a\u7ed3\u679c\u3002 \u5e38\u7528\u7684 \u76f8\u673a\u6807\u5b9a\u53c2\u6570\u5305\u62ec\uff1a ana : \u5927\u9f20\u884c\u4e3a\u95f41 bob : \u5927\u9f20\u884c\u4e3a\u95f42 / \u5c0f\u6876 carl : \u5927\u9f20\u884c\u4e3a\u95f42 / \u4e2d&\u5927\u6876\u3002","title":"\u4ee3\u7801\u6d41\u7a0b"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/application/","text":"\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u91cd\u6784 \u539f\u59cb\u7684\u591a\u89c6\u89d2\u89c6\u9891\uff0c\u7ecf\u8fc7 \u5206\u5272 , \u5173\u952e\u70b9\u91cd\u6784 \u548c \u5e73\u6ed1 \u4e4b\u540e\uff0c\u83b7\u53d6\u7a33\u5b9a\u76843D\u59ff\u6001\u5750\u6807\u3002 \u539f\u59cb\u89c6\u9891 \u89c6\u9891\u6765\u81ea OBS Studio \u5f55\u5236\u76849\u89c6\u89d2\u76f8\u673a\u89c6\u9891\u3002\u591a\u76f8\u673a\u753b\u9762\u7ecf\u8fc7\u4e86\u65f6\u95f4\u540c\u6b65\uff0c\u8bef\u5dee\u57281\u5e27\u53ca\u4ee5\u5185\uff0c\u53ef\u4ee5\u5ffd\u7565\u3002 \u5206\u5272 \u4f7f\u7528Mask-RCNN\u6a21\u578b\uff0c\u8bc6\u522b\u9ed1\u3001\u767d\u9f20\u7684\u8eab\u4efd\uff0c\u5e76\u5206\u5272\u50cf\u7d20\u533a\u57df\u3002 \u5173\u952e\u70b9\u91cd\u6784 \u6267\u884c DANNCE \u5173\u952e\u70b9\u9884\u6d4b + \u795e\u7ecf\u7f51\u7edc\u5e73\u6ed1\uff0c\u83b7\u53d63D\u59ff\u6001\u3002","title":"\u5e94\u7528\u573a\u666f"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/application/#_1","text":"\u539f\u59cb\u7684\u591a\u89c6\u89d2\u89c6\u9891\uff0c\u7ecf\u8fc7 \u5206\u5272 , \u5173\u952e\u70b9\u91cd\u6784 \u548c \u5e73\u6ed1 \u4e4b\u540e\uff0c\u83b7\u53d6\u7a33\u5b9a\u76843D\u59ff\u6001\u5750\u6807\u3002","title":"\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u91cd\u6784"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/application/#_2","text":"\u89c6\u9891\u6765\u81ea OBS Studio \u5f55\u5236\u76849\u89c6\u89d2\u76f8\u673a\u89c6\u9891\u3002\u591a\u76f8\u673a\u753b\u9762\u7ecf\u8fc7\u4e86\u65f6\u95f4\u540c\u6b65\uff0c\u8bef\u5dee\u57281\u5e27\u53ca\u4ee5\u5185\uff0c\u53ef\u4ee5\u5ffd\u7565\u3002","title":"\u539f\u59cb\u89c6\u9891"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/application/#_3","text":"\u4f7f\u7528Mask-RCNN\u6a21\u578b\uff0c\u8bc6\u522b\u9ed1\u3001\u767d\u9f20\u7684\u8eab\u4efd\uff0c\u5e76\u5206\u5272\u50cf\u7d20\u533a\u57df\u3002","title":"\u5206\u5272"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/application/#_4","text":"\u6267\u884c DANNCE \u5173\u952e\u70b9\u9884\u6d4b + \u795e\u7ecf\u7f51\u7edc\u5e73\u6ed1\uff0c\u83b7\u53d63D\u59ff\u6001\u3002","title":"\u5173\u952e\u70b9\u91cd\u6784"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/","text":"\u6570\u636e\u96c6\u5236\u4f5c&\u6a21\u578b\u66f4\u65b0 \u6807\u6ce8\u5927\u9f20\u5206\u5272 \u9996\u5148\uff0c\u4f7f\u7528 Labelme \u8f6f\u4ef6\u8fdb\u884c\u6570\u636e\u6807\u6ce8\u3002\u7528 Polygon \u5de5\u5177\uff0c\u521b\u5efa\u9ed1\u9f20 rat_black \u548c\u767d\u9f20 rat_white \u7684\u6807\u7b7e\u3002 \u66f4\u65b0\u5206\u5272\u6a21\u578b \u9010\u884c\u8fd0\u884c\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u5176\u4e2d mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9.py \u662f\u6a21\u578b\u7684\u914d\u7f6e\u6587\u4ef6\uff08\u9ed8\u8ba4\uff0c\u63a8\u8350\uff09\u3002\u6709\u9700\u6c42\u53ef\u4ee5\u6539\u6210\u5176\u5b83\u7684\u6a21\u578b\u914d\u7f6e\u3002 # 1. \u6570\u636e\u5236\u5907\uff1a labelme to coco # su chenxinfeng conda activate DEEPLABCUT # \u5c06labelme\u6570\u636e\u6807\u6ce8\u7684\u6587\u4ef6\u5939\u9879\u76ee\u91cd\u547d\u540d\u3002 ## \u6ce8\u610f\u4e8b\u98791\uff1a\u6587\u4ef6\u5939\u4e0d\u8981\u6709\u4e2d\u6587\uff0c\u6253\u6807\u7684\u56fe\u7247\u4e0d\u8981\u6709\u4e2d\u6587 ## \u6ce8\u610f\u4e8b\u98792\uff1a\u6253\u6807\u7684\u56fe\u7247\u6570\u91cf n>20 \u4e3a\u4e86\u4fdd\u8bc1\u8bad\u7ec3\u6548\u679c LABEL_ME_POJECT = /mnt/liying.cibr.ac.cn_xxx/labelimages NEW_NAME = /mnt/liying.cibr.ac.cn_xxx/bw_rat_1280x800_20230524 mv $LABEL_ME_POJECT $NEW_NAME # \u5c06labelme\u6570\u636e\u6807\u6ce8\u7684\u6587\u4ef6\u5939\u9879\u76ee\u8f6c\u6362\u4e3acoco\u6570\u636e\u96c6\u683c\u5f0f\u3002 # \u6ce8\u610f\u4e8b\u9879\uff1a\u7c7b\u522b\u7684\u540d\u5b57\u8981\u53bb MMDET_DATA_TARGET \u91cc\u9762\u770b\uff0c\u4e0d\u8981\u81ea\u5df1\u4e71\u5199\u3002 python -m lilab.cvutils.labelme_to_coco $NEW_NAME # \u5c06coco\u6570\u636e\u96c6\u62c6\u5206\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u3002 -s \u53c2\u6570\u8868\u793a\u8bad\u7ec3\u96c6\u7684\u6bd4\u4f8b\uff0c0.8 \u6216 0.9\u4e3a\u5e38\u7528\u3002 python -m lilab.cvutils.coco_split -s 0 .9 ${ NEW_NAME } _trainval.json # \u62f7\u8d1d\u6253\u6807\u6570\u636e\u96c6\u5230 mmdet \u7684\u6570\u636e\u96c6\u76ee\u5f55\u4e0b MMDET_DATA_TARGET = /home/liying_lab/chenxinfeng/DATA/CBNetV2/data/rats cp -r ${ NEW_NAME } _trainval.json ${ NEW_NAME } _train.json ${ NEW_NAME } _val.json \\ ${ NEW_NAME } $MMDET_DATA_TARGET / # 2. \u6a21\u578b\u8bad\u7ec3 conda activate mmpose cd /home/liying_lab/chenxinfeng/DATA/CBNetV2/ # \u4fee\u6539\u914d\u7f6e\u6587\u4ef6\uff0c\u4f7f\u7528vscode\u6253\u5f00\u3002 # \u4fee\u6539\u5176\u4e2d\u7684 `data` \u5b57\u6bb5\uff0c\u6307\u5411\u521a\u521a\u62f7\u8d1d\u7684coco\u6570\u636e\u96c6\u76ee\u5f55\u3002 CONFIG = $PWD /mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9.py echo $CONFIG # \u4f7f\u7528\u591a GPU \u6216\u5355 GPU \u8bad\u7ec3\u6a21\u578b # tools/dist_train.sh $CONFIG 4 python tools/train.py $CONFIG # 3. \u6a21\u578b\u52a0\u901f python -m lilab.mmdet_dev.convert_mmdet2trt $CONFIG # 4. \u67e5\u770b\u6a21\u578b\u662f\u5426\u66f4\u65b0\u6210\u529f ls -lh work_dirs/mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9/latest.* \u6700\u540e\u5f97\u5230\u66f4\u65b0\u7684 latest.trt \u6a21\u578b\u6743\u91cd\u6587\u4ef6\u3002 \u6807\u6ce8\u5927\u9f203D\u5173\u952e\u70b9 \u9996\u5148\uff0c\u4f7f\u7528 Label3D_Manager \u8fdb\u884c\u6570\u636e\u6807\u6ce8\u3002Label3D_manager \u662f\u5728\u5b98\u65b9\u7248\u672c\u4e0a\u505a\u66f4\u6539\uff0c\u4ee5\u9002\u5e94OBS \u5f55\u5236\u7684\u89c6\u9891\uff0c\u5df2\u7ecf\u4f7f\u7528\u5927\u9f20\u768414\u4e2a\u5173\u952e\u70b9\u3002 \u5e94\u8be5\u5f97\u5230 anno.mat \u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542b\u6807\u6ce8\u76843D\u5173\u952e\u70b9\u4fe1\u606f\u3002 \u5236\u5907\u6570\u636e\u96c6 conda activate mmdet source='/mnt/liying.cibr.ac.cn_usb3/wsy/ysj/segpkl/outframes' datadir='/home/liying_lab/chenxinfeng/DATA/dannce/data/bw_rat_1280x800x9_2024-11-27_photometry_voxel' cp -r $source $datadir python -m lilab.dannce.s1_anno2dataset $datadir/anno.mat # \u627e\u5230\u751f\u6210\u7684*_voxel_anno_dannce.pkl\uff0c\u4f7f\u7528\u4ee3\u7801\u4fee\u6b63\u5176\u8eab\u4f53\u4e2d\u5fc3\u70b9\uff08\u4ee52D mask \u4e2d\u5fc3\u70b9\uff0c\u4e09\u89d2\u5316\u5f97\u52303D\u4e2d\u5fc3\u70b9\uff09\u3002 python -m lilab.dannce.p2_dataset_com3d_refine_byseg ${datadir}_anno_dannce.pkl \u8bad\u7ec3DANNCE\u6a21\u578b \u9010\u884c\u8fd0\u884c\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u7528\u4e8e\u8bad\u7ec3\u6a21\u578b\u3002\u5176\u4e2d rat14_1280x800x9_mono_young \u662f\u4e00\u4e2a\u5df2\u7ecf\u88ab\u521b\u5efa\u8fc7\u7684\u9879\u76ee\u73af\u5883\uff08\u63a8\u8350\uff09\u3002\u6839\u636e\u9700\u6c42\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9\u5176\u5b83\u9879\u76ee\u3002 # cd \u8fdb\u5165\u9879\u76ee\u8def\u5f84 cd /home/liying_lab/chenxinfeng/DATA/dannce/demo/rat14_1280x800x9_mono_young # \u6539\u53d8\u9879\u76ee\u914d\u7f6e\u6587\u4ef6\uff0c\u6dfb\u52a0 \u6570\u636e\u96c6\u8def\u5f84\u3002 echo io_max.yaml # \u4fee\u6539 io_max.yaml, \u6dfb\u52a0\u6570\u636e\u5230 exp/label3d_file python -m dannce.cli_train ../../configs/dannce_rat14_1280x800x9_max_config.yaml \u8f6c\u5316\u6a21\u578b\u4e3a tensorrt \u52a0\u901f\u7684\u6a21\u578b\u3002 # Offline \u573a\u666f\u3002 cd /home/liying_lab/chenxinfeng/DATA/dannce/demo/rat14_1280x800x9_mono_young/DANNCE/train_results/MAX python -m lilab.dannce.t1_keras2onnx latest.hdf5 choosecuda 3 ,0,1,2 polygraphy run /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/tensorrt/constrained_network.py \\ --precision-constraints obey \\ --trt-min-shapes input_1: [ 1 ,64,64,64,9 ] \\ --trt-max-shapes input_1: [ 4 ,64,64,64,9 ] \\ --trt-opt-shapes input_1: [ 2 ,64,64,64,9 ] \\ --trt --fp16 --save-engine latest_dynamic.engine & choosecuda 0 ,1,2,3 polygraphy run /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/tensorrt/constrained_network.py \\ --precision-constraints obey \\ --input-shapes input_1: [ 2 ,64,64,64,9 ] \\ --trt --fp16 --save-engine latest.engine & # Realtime \u573a\u666f python -m lilab.dannce.t1_keras2onnx_rt latest.hdf5 choosecuda 1 ,2,3,0 polygraphy run /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/tensorrt/constrained_network_rt.py \\ --precision-constraints obey \\ --trt-min-shapes input_1: [ 1 ,64,64,64,9 ] \\ --trt-max-shapes input_1: [ 2 ,64,64,64,9 ] \\ --trt-opt-shapes input_1: [ 1 ,64,64,64,9 ] \\ --trt --fp16 --save-engine latest.idx.engine wait \u6700\u540e\u5f97\u5230 latest_dynamic.engine \u548c latest.idx.engine \u3002","title":"\u6570\u636e\u96c6\u5236\u4f5c&\u6a21\u578b\u66f4\u65b0"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/#_1","text":"","title":"\u6570\u636e\u96c6\u5236\u4f5c&amp;\u6a21\u578b\u66f4\u65b0"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/#_2","text":"\u9996\u5148\uff0c\u4f7f\u7528 Labelme \u8f6f\u4ef6\u8fdb\u884c\u6570\u636e\u6807\u6ce8\u3002\u7528 Polygon \u5de5\u5177\uff0c\u521b\u5efa\u9ed1\u9f20 rat_black \u548c\u767d\u9f20 rat_white \u7684\u6807\u7b7e\u3002","title":"\u6807\u6ce8\u5927\u9f20\u5206\u5272"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/#_3","text":"\u9010\u884c\u8fd0\u884c\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u5176\u4e2d mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9.py \u662f\u6a21\u578b\u7684\u914d\u7f6e\u6587\u4ef6\uff08\u9ed8\u8ba4\uff0c\u63a8\u8350\uff09\u3002\u6709\u9700\u6c42\u53ef\u4ee5\u6539\u6210\u5176\u5b83\u7684\u6a21\u578b\u914d\u7f6e\u3002 # 1. \u6570\u636e\u5236\u5907\uff1a labelme to coco # su chenxinfeng conda activate DEEPLABCUT # \u5c06labelme\u6570\u636e\u6807\u6ce8\u7684\u6587\u4ef6\u5939\u9879\u76ee\u91cd\u547d\u540d\u3002 ## \u6ce8\u610f\u4e8b\u98791\uff1a\u6587\u4ef6\u5939\u4e0d\u8981\u6709\u4e2d\u6587\uff0c\u6253\u6807\u7684\u56fe\u7247\u4e0d\u8981\u6709\u4e2d\u6587 ## \u6ce8\u610f\u4e8b\u98792\uff1a\u6253\u6807\u7684\u56fe\u7247\u6570\u91cf n>20 \u4e3a\u4e86\u4fdd\u8bc1\u8bad\u7ec3\u6548\u679c LABEL_ME_POJECT = /mnt/liying.cibr.ac.cn_xxx/labelimages NEW_NAME = /mnt/liying.cibr.ac.cn_xxx/bw_rat_1280x800_20230524 mv $LABEL_ME_POJECT $NEW_NAME # \u5c06labelme\u6570\u636e\u6807\u6ce8\u7684\u6587\u4ef6\u5939\u9879\u76ee\u8f6c\u6362\u4e3acoco\u6570\u636e\u96c6\u683c\u5f0f\u3002 # \u6ce8\u610f\u4e8b\u9879\uff1a\u7c7b\u522b\u7684\u540d\u5b57\u8981\u53bb MMDET_DATA_TARGET \u91cc\u9762\u770b\uff0c\u4e0d\u8981\u81ea\u5df1\u4e71\u5199\u3002 python -m lilab.cvutils.labelme_to_coco $NEW_NAME # \u5c06coco\u6570\u636e\u96c6\u62c6\u5206\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u3002 -s \u53c2\u6570\u8868\u793a\u8bad\u7ec3\u96c6\u7684\u6bd4\u4f8b\uff0c0.8 \u6216 0.9\u4e3a\u5e38\u7528\u3002 python -m lilab.cvutils.coco_split -s 0 .9 ${ NEW_NAME } _trainval.json # \u62f7\u8d1d\u6253\u6807\u6570\u636e\u96c6\u5230 mmdet \u7684\u6570\u636e\u96c6\u76ee\u5f55\u4e0b MMDET_DATA_TARGET = /home/liying_lab/chenxinfeng/DATA/CBNetV2/data/rats cp -r ${ NEW_NAME } _trainval.json ${ NEW_NAME } _train.json ${ NEW_NAME } _val.json \\ ${ NEW_NAME } $MMDET_DATA_TARGET / # 2. \u6a21\u578b\u8bad\u7ec3 conda activate mmpose cd /home/liying_lab/chenxinfeng/DATA/CBNetV2/ # \u4fee\u6539\u914d\u7f6e\u6587\u4ef6\uff0c\u4f7f\u7528vscode\u6253\u5f00\u3002 # \u4fee\u6539\u5176\u4e2d\u7684 `data` \u5b57\u6bb5\uff0c\u6307\u5411\u521a\u521a\u62f7\u8d1d\u7684coco\u6570\u636e\u96c6\u76ee\u5f55\u3002 CONFIG = $PWD /mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9.py echo $CONFIG # \u4f7f\u7528\u591a GPU \u6216\u5355 GPU \u8bad\u7ec3\u6a21\u578b # tools/dist_train.sh $CONFIG 4 python tools/train.py $CONFIG # 3. \u6a21\u578b\u52a0\u901f python -m lilab.mmdet_dev.convert_mmdet2trt $CONFIG # 4. \u67e5\u770b\u6a21\u578b\u662f\u5426\u66f4\u65b0\u6210\u529f ls -lh work_dirs/mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9/latest.* \u6700\u540e\u5f97\u5230\u66f4\u65b0\u7684 latest.trt \u6a21\u578b\u6743\u91cd\u6587\u4ef6\u3002","title":"\u66f4\u65b0\u5206\u5272\u6a21\u578b"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/#3d","text":"\u9996\u5148\uff0c\u4f7f\u7528 Label3D_Manager \u8fdb\u884c\u6570\u636e\u6807\u6ce8\u3002Label3D_manager \u662f\u5728\u5b98\u65b9\u7248\u672c\u4e0a\u505a\u66f4\u6539\uff0c\u4ee5\u9002\u5e94OBS \u5f55\u5236\u7684\u89c6\u9891\uff0c\u5df2\u7ecf\u4f7f\u7528\u5927\u9f20\u768414\u4e2a\u5173\u952e\u70b9\u3002 \u5e94\u8be5\u5f97\u5230 anno.mat \u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542b\u6807\u6ce8\u76843D\u5173\u952e\u70b9\u4fe1\u606f\u3002","title":"\u6807\u6ce8\u5927\u9f203D\u5173\u952e\u70b9"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/#_4","text":"conda activate mmdet source='/mnt/liying.cibr.ac.cn_usb3/wsy/ysj/segpkl/outframes' datadir='/home/liying_lab/chenxinfeng/DATA/dannce/data/bw_rat_1280x800x9_2024-11-27_photometry_voxel' cp -r $source $datadir python -m lilab.dannce.s1_anno2dataset $datadir/anno.mat # \u627e\u5230\u751f\u6210\u7684*_voxel_anno_dannce.pkl\uff0c\u4f7f\u7528\u4ee3\u7801\u4fee\u6b63\u5176\u8eab\u4f53\u4e2d\u5fc3\u70b9\uff08\u4ee52D mask \u4e2d\u5fc3\u70b9\uff0c\u4e09\u89d2\u5316\u5f97\u52303D\u4e2d\u5fc3\u70b9\uff09\u3002 python -m lilab.dannce.p2_dataset_com3d_refine_byseg ${datadir}_anno_dannce.pkl","title":"\u5236\u5907\u6570\u636e\u96c6"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset/#dannce","text":"\u9010\u884c\u8fd0\u884c\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u7528\u4e8e\u8bad\u7ec3\u6a21\u578b\u3002\u5176\u4e2d rat14_1280x800x9_mono_young \u662f\u4e00\u4e2a\u5df2\u7ecf\u88ab\u521b\u5efa\u8fc7\u7684\u9879\u76ee\u73af\u5883\uff08\u63a8\u8350\uff09\u3002\u6839\u636e\u9700\u6c42\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9\u5176\u5b83\u9879\u76ee\u3002 # cd \u8fdb\u5165\u9879\u76ee\u8def\u5f84 cd /home/liying_lab/chenxinfeng/DATA/dannce/demo/rat14_1280x800x9_mono_young # \u6539\u53d8\u9879\u76ee\u914d\u7f6e\u6587\u4ef6\uff0c\u6dfb\u52a0 \u6570\u636e\u96c6\u8def\u5f84\u3002 echo io_max.yaml # \u4fee\u6539 io_max.yaml, \u6dfb\u52a0\u6570\u636e\u5230 exp/label3d_file python -m dannce.cli_train ../../configs/dannce_rat14_1280x800x9_max_config.yaml \u8f6c\u5316\u6a21\u578b\u4e3a tensorrt \u52a0\u901f\u7684\u6a21\u578b\u3002 # Offline \u573a\u666f\u3002 cd /home/liying_lab/chenxinfeng/DATA/dannce/demo/rat14_1280x800x9_mono_young/DANNCE/train_results/MAX python -m lilab.dannce.t1_keras2onnx latest.hdf5 choosecuda 3 ,0,1,2 polygraphy run /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/tensorrt/constrained_network.py \\ --precision-constraints obey \\ --trt-min-shapes input_1: [ 1 ,64,64,64,9 ] \\ --trt-max-shapes input_1: [ 4 ,64,64,64,9 ] \\ --trt-opt-shapes input_1: [ 2 ,64,64,64,9 ] \\ --trt --fp16 --save-engine latest_dynamic.engine & choosecuda 0 ,1,2,3 polygraphy run /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/tensorrt/constrained_network.py \\ --precision-constraints obey \\ --input-shapes input_1: [ 2 ,64,64,64,9 ] \\ --trt --fp16 --save-engine latest.engine & # Realtime \u573a\u666f python -m lilab.dannce.t1_keras2onnx_rt latest.hdf5 choosecuda 1 ,2,3,0 polygraphy run /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/tensorrt/constrained_network_rt.py \\ --precision-constraints obey \\ --trt-min-shapes input_1: [ 1 ,64,64,64,9 ] \\ --trt-max-shapes input_1: [ 2 ,64,64,64,9 ] \\ --trt-opt-shapes input_1: [ 1 ,64,64,64,9 ] \\ --trt --fp16 --save-engine latest.idx.engine wait \u6700\u540e\u5f97\u5230 latest_dynamic.engine \u548c latest.idx.engine \u3002","title":"\u8bad\u7ec3DANNCE\u6a21\u578b"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset_pick/","text":"\u6570\u636e\u96c6\u5236\u4f5c\u65f6 1. \u5206\u5272\u56fe\u7247\u9009\u53d6 \u65b9\u6cd51\uff0c\u53ea\u6311\u9009\u9519\u8bef\u5e27\u6253\u6807\uff0c\u8fd9\u6837\u6548\u7387\u6bd4\u8f83\u9ad8\u3002\u4f7f\u7528Potplayer \u64ad\u653e *_mask.mp4 \uff0c\u622a\u56fe\u9519\u8bef\u5e27\uff0c\u8fdb\u884c\u622a\u53d6\uff0c\u5b58\u653e\u81f3\u7edf\u4e00\u4f4d\u7f6e\u3002\u5206\u9519\u8bef\u89c6\u89d2\u5e76\u6839\u636e\u5de6\u4e0a\u89d2\u5e27\u6570\u627e\u56de\u6e90\u89c6\u9891\u3002 \u65b9\u6cd52\uff0c\u968f\u673a\u62bd\u53d6\u6307\u5b9a\u6570\u76ee\u7684\u5e27\u5e76\u968f\u673a\u622a\u53d6\u4e00\u4e2a\u89c6\u89d2\uff0c\u6548\u7387\u6bd4\u8f83\u4f4e\u3002 \u53ef\u4ee5\u53c2\u8003\uff1a /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/outlier_refine/process_mmdet_dzy.sh 1. \u56fe\u7247\u6253\u6807 \u6dd8\u5b9d","title":"\u6570\u636e\u96c6\u5236\u4f5c\u65f6"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset_pick/#_1","text":"","title":"\u6570\u636e\u96c6\u5236\u4f5c\u65f6"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset_pick/#1","text":"\u65b9\u6cd51\uff0c\u53ea\u6311\u9009\u9519\u8bef\u5e27\u6253\u6807\uff0c\u8fd9\u6837\u6548\u7387\u6bd4\u8f83\u9ad8\u3002\u4f7f\u7528Potplayer \u64ad\u653e *_mask.mp4 \uff0c\u622a\u56fe\u9519\u8bef\u5e27\uff0c\u8fdb\u884c\u622a\u53d6\uff0c\u5b58\u653e\u81f3\u7edf\u4e00\u4f4d\u7f6e\u3002\u5206\u9519\u8bef\u89c6\u89d2\u5e76\u6839\u636e\u5de6\u4e0a\u89d2\u5e27\u6570\u627e\u56de\u6e90\u89c6\u9891\u3002 \u65b9\u6cd52\uff0c\u968f\u673a\u62bd\u53d6\u6307\u5b9a\u6570\u76ee\u7684\u5e27\u5e76\u968f\u673a\u622a\u53d6\u4e00\u4e2a\u89c6\u89d2\uff0c\u6548\u7387\u6bd4\u8f83\u4f4e\u3002 \u53ef\u4ee5\u53c2\u8003\uff1a /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/outlier_refine/process_mmdet_dzy.sh","title":"1. \u5206\u5272\u56fe\u7247\u9009\u53d6"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/dataset_pick/#1_1","text":"\u6dd8\u5b9d","title":"1. \u56fe\u7247\u6253\u6807"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/process/","text":"\u4ee3\u7801\u6d41\u7a0b \u5f00\u53d1\u8005\uff1axxx \u7ef4\u62a4\uff1axxx \u5206\u5272\u591a\u52a8\u7269 # %% batch # step0 # conda activate mmdet source activate mmdet vdir = ` w2l '\\\\liying.cibr.ac.cn\\Data_Temp\\Chenxinfeng\\multiview_9\\chenxf\\00_BehaviorAnalysis-seq2seq\\SexMating' ` # \u9009\u62e9\u5f53\u5929\u7684\u5c0f\u7403\u77eb\u6b63\u6587\u4ef6\uff08\u591a\u76f8\u673a\u6a21\u578b\u6587\u4ef6\uff09\uff0c\u4f7f\u6570\u636e\u5177\u67093D\u4fe1\u606f\u3002 ball = ` w2l \"\\\\liying.cibr.ac.cn\\Data_Temp\\Chenxinfeng\\multiview_9\\chenxf\\carl\\2023-10-14-\\ball_2023-10-23_13-18-10.calibpkl\" ` config = /home/liying_lab/chenxinfeng/DATA/CBNetV2/mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9.py python -m lilab.mmdet_dev_multi.s1_mmdet_videos2segpkl_dilate_toCUDA $vdir --pannels carl --config $config #--maxlen 9000 python -m lilab.mmdet_dev.s3_segpkl_dilate2videoseg_canvas_mask $vdir --maxlen 9000 # check video # step2 com3d and create voxbox ls $vdir /*.segpkl | xargs -n 1 -I {} -P 4 python -m lilab.mmdet_dev.s4_segpkl_put_com3d_pro {} --calibpkl \" $ball \" # \u7ed8\u5236\u4f53\u7d20\u7a7a\u95f4\u7684\u89c6\u9891\uff08\u53ef\u9009\uff0c\u4e0d\u63a8\u8350\uff09 ls $vdir /*.segpkl | sed 's/.segpkl/.mp4/' | xargs -n 1 -P 8 -I {} python -m lilab.mmdet_dev.s4_segpkl_com3d_to_video {} --vox_size 230 # check video \u5176\u4e2d volsize \u8868\u793a\u5927\u9f20\u4f53\u7d20\u7a7a\u95f4\u7684\u8fb9\u957f\uff0c\u4f8b\u5982 xx_vol230.0.mp4 \u8868\u793a\u8fb9\u957f\u4e3a230mm\u3002\u8fb9\u957f\u6839\u636e\u5927\u9f20\u5e74\u9f84\u548c\u6027\u522b\u800c\u5b9a\uff0c\u63a8\u8350\u503c\u5982\u4e0b\uff1a Male Female DAY35 190 190 DAY50 230 220 DAY75 250 240 DAY\u6210\u5e74 260 240 \u6700\u540e\u5f97\u5230\u4e00\u7cfb\u5217\u89c6\u9891\u548c\u6587\u4ef6\uff0c\u5305\u62ec\uff1a xx_mask.mp4 - \u5206\u5272\u56fe\u50cf xx_vol230.0.mp4 - voxel \u4f53\u7d20\u7a7a\u95f4 xx.segpkl - \u5206\u5272\u7684Mask \u4e8c\u8fdb\u5236\u6570\u636e \u9a8c\u8bc1\uff1a\u6253\u5f00 xx_mask.mp4 \u89c6\u9891\uff0c\u67e5\u770b\u5206\u5272\u662f\u5426\u6b63\u786e\u3002\u6253\u5f00 xx_vol230.0.mp4 \u89c6\u9891\uff0c\u67e5\u770b voxel \u4f53\u7d20\u5c3a\u5bf8\u662f\u5426\u5339\u914d\u3002 \u63d0\u793a \u4e00\u6b21\u6027\u4e0d\u8981\u8dd1\u592a\u591a\u89c6\u9891\u3002\u5148\u8dd1\u51e0\u4e2a\u89c6\u9891\u8bd5\u8bd5\u770b\u3002\u6548\u679c\u4f73\uff0c\u5219\u53ef\u4ee5\u63a5\u7740\u8fd0\u884c\u5269\u4e0b\u7684\u89c6\u9891\u3002\u5982\u679c\u6548\u679c\u4e0d\u4f73\uff0c\u5219\u8981\u66f4\u65b0\u6a21\u578b\u540e\uff0c\u518d\u91cd\u65b0\u8dd1\u89c6\u9891\u3002 \u9519\u8bef \u5982\u679c\u5f00 xx_mask.mp4 \u89c6\u9891\u5206\u5272\u6548\u679c\u5dee\uff0c\u5219\u9700\u8981\u91cd\u4fee\u5206\u5272\u6807\u6ce8\uff0c\u66f4\u65b0\u6a21\u578b\u3002\u89c1\u6570\u636e\u4e0e\u6a21\u578b\u66f4\u65b0\u7ae0\u8282\u3002\u5982\u679c xx_vol230.0.mp4 \u4f53\u7d20\u65b9\u683c\u504f\u5dee\u8f83\u5927\uff0c\u8bf4\u660e\u5c0f\u7403\u77eb\u6b63\u7684\u6587\u4ef6\u6709\u9519\u8bef\uff0c\u9700\u8981\u4ece\u65b0\u77eb\u6b63\u3002 \u9884\u6d4b\u5173\u952e\u70b9 #!/bin/bash conda activate mmdet cd /home/liying_lab/chenxinfeng/DATA/dannce/demo/rat14_1280x800x9_mono_young # 1. \u51c6\u5907\u6570\u636e volsize_vfiles = \" 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-21_15-42-11D1bC1w.segpkl 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-21_15-16-15C1bD1w.segpkl 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-21_14-32-25A1bB1w.segpkl 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-21_14-54-14B1bA1w.segpkl 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-20_16-45-22D1bB2w.segpkl \" volsize_vfiles = $( echo \" $volsize_vfiles \" | grep -v '^[[:space:]]*$' ) #echo \"$volsize_vfiles\" vfiles = $( echo \" $volsize_vfiles \" | awk '{print $3}' ) #echo \"$vfiles\" # 2. \u7528DANNCE \u9884\u6d4b\u5f97\u52303D\u59ff\u6001, nGPU=4 echo \" $volsize_vfiles \" | sed 's/.segpkl/.mp4/' | cat -n | xargs -P 4 -l bash -c 'python -m dannce.cli_trt ../../configs/dannce_rat14_1280x800x9_max_config.yaml --vol-size-list $1 $2 --video-file $3 --gpu-id $(($0%4))' # xargs -P 2 \u8868\u793a\u4f7f\u75282\u4e2aGPU\uff0c\u914d\u5408 choosecuda 0,1,2,3 \u786e\u8ba4\u4f7f\u7528gpu\u6570\u91cf # 3. \u7ed8\u5236\u201c\u672a\u5e73\u6ed1\u201d\u7684\u59ff\u6001\u8f68\u8ff9 \uff08\u53ef\u9009\uff09 # echo \"$vfiles\" | sed 's/.segpkl/.matcalibpkl/' | xargs -P 6 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d $0 --iview 3' # 4. \u7ed8\u5236\u5e73\u6ed1\u540e\u7684\u59ff\u6001\u8f68\u8ff9 echo \" $vfiles \" | sed 's/.segpkl/.matcalibpkl/' | xargs -l -P 6 -r python -m lilab.smoothnet.s1_matcalibpkl2smooth_foot_dzy echo \" $vfiles \" | sed 's/.segpkl/.smoothed_foot.matcalibpkl/' | xargs -P 6 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d $0 --iview 3 --postfix smoothed_foot ' # 4B \u5c06\u4e24\u4e2a\u89c6\u89d2\u4e32\u8fde\u7ed8\u5236 \uff08\u53ef\u9009\uff09 # echo \"$vfiles\" | sed 's/.segpkl/.smoothed_foot.matcalibpkl/' | xargs -P 8 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d_2view $0 --postfix smoothed_foot' # 5 \u521b\u5efa400p \u7f29\u7565\u89c6\u9891\u6587\u4ef6\uff08\u53ef\u9009\uff09 # bash /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/openlabcluster_postprocess/create_400p.sh \\ # /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a \u5176\u4e2d volsize_vfiles \u8868\u793a\u4e00\u4e2a\u89c6\u9891\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u5206\u522b\u662f\u9ed1\u9f20\u7684voxelsize(280), \u767d\u9f20\u7684voxelsize(280) \u548c\u89c6\u9891\u540c\u540d\u7684\u5206\u5272\u6587\u4ef6 *.segpkl \u3002\u7528\u4e24\u4e2a\u4e0d\u540c\u7684voxel\uff0c\u53ef\u4ee5\u533a\u5206\u4e0d\u540c\u4f53\u578b\u7684\u9f20\uff0c\u4f8b\u5982\u96cc\u6027\u4e0e\u96c4\u6027\u3002 \u8b66\u544a \u592a\u5c0f\u7684voxelsize \u53ef\u80fd\u91c7\u96c6\u7684\u5927\u9f20\u56fe\u50cf\u4e0d\u5b8c\u6574\uff0c\u8ba9\u5173\u952e\u70b9\u8d8a\u754c\u3002\u592a\u5927\u7684voxelsize\u53ef\u80fd\u91c7\u96c6\u7684\u5927\u9f20\u56fe\u50cf\u592a\u6a21\u7cca\uff0c\u964d\u4f4e\u7cbe\u5ea6\u3002 \u5f97\u5230\u7ed3\u679c\uff1a xx.smoothed_foot.matcalibpkl - \u4e24\u53ea\u9f20\u76843D\u5173\u952e\u70b9\u5e8f\u5217\u3002 xx_3_sktdraw_smoothed_foot.mp4 - \u4e24\u53ea\u9f20\u76843D\u5173\u952e\u70b9\u89c6\u9891\u3002 xx_400p.mp4 - smoothed_foot.mp4 \u6587\u4ef6\u7684 400x400 \u5206\u8fa8\u7387\u538b\u7f29\uff0c\u51cf\u5c11\u6587\u4ef6\u5927\u5c0f\u548c\u54cd\u5e94\u901f\u5ea6\u3002 \u9a8c\u8bc1\uff1a\u6253\u5f00 xx_3_sktdraw_smoothed_foot.mp4 \u89c6\u9891\uff0c\u67e5\u770b\u5173\u952e\u70b9\u4f4d\u7f6e\u662f\u5426\u6b63\u786e\u3002\u4fdd\u5b58\u597d xx.smoothed_foot.matcalibpkl \uff0c\u8fd9\u662f\u5305\u542b\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u5750\u6807\u7684\u91cd\u8981\u6587\u4ef6\u3002 \u9519\u8bef \u5982\u679c\u5f00 xx_3_sktdraw_smoothed_foot.mp4 \u89c6\u9891\u5206\u5272\u6548\u679c\u5dee\uff0c\u53ef\u4ee5\u68c0\u67e5\u504f\u5dee\u5bf9\u5e94\u65f6\u523b\u7684\u5206\u5272\u89c6\u9891\uff0c\u610f\u89c1\u68c0\u67e5\u5c0f\u7403\u77eb\u6b63\u6587\u4ef6\u3002DANNCE\u6a21\u578b\u4e00\u822c\u6765\u8bf4\u975e\u5e38\u7a33\u5b9a\uff0cMASK-RCNN \u5206\u5272\u6a21\u578b\u5bb9\u6613\u6536\u5230\u73af\u5883\u5149\u548c\u80cc\u666f\u5f71\u54cd\uff0c\u9700\u8981\u7ecf\u5e38\u52a0\u8bad\u3002\u89c1\u6570\u636e\u4e0e\u6a21\u578b\u66f4\u65b0\u7ae0\u8282\u3002","title":"\u4ee3\u7801\u6d41\u7a0b"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/process/#_1","text":"\u5f00\u53d1\u8005\uff1axxx \u7ef4\u62a4\uff1axxx","title":"\u4ee3\u7801\u6d41\u7a0b"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/process/#_2","text":"# %% batch # step0 # conda activate mmdet source activate mmdet vdir = ` w2l '\\\\liying.cibr.ac.cn\\Data_Temp\\Chenxinfeng\\multiview_9\\chenxf\\00_BehaviorAnalysis-seq2seq\\SexMating' ` # \u9009\u62e9\u5f53\u5929\u7684\u5c0f\u7403\u77eb\u6b63\u6587\u4ef6\uff08\u591a\u76f8\u673a\u6a21\u578b\u6587\u4ef6\uff09\uff0c\u4f7f\u6570\u636e\u5177\u67093D\u4fe1\u606f\u3002 ball = ` w2l \"\\\\liying.cibr.ac.cn\\Data_Temp\\Chenxinfeng\\multiview_9\\chenxf\\carl\\2023-10-14-\\ball_2023-10-23_13-18-10.calibpkl\" ` config = /home/liying_lab/chenxinfeng/DATA/CBNetV2/mask_rcnn_r101_fpn_2x_coco_bwrat_816x512_cam9.py python -m lilab.mmdet_dev_multi.s1_mmdet_videos2segpkl_dilate_toCUDA $vdir --pannels carl --config $config #--maxlen 9000 python -m lilab.mmdet_dev.s3_segpkl_dilate2videoseg_canvas_mask $vdir --maxlen 9000 # check video # step2 com3d and create voxbox ls $vdir /*.segpkl | xargs -n 1 -I {} -P 4 python -m lilab.mmdet_dev.s4_segpkl_put_com3d_pro {} --calibpkl \" $ball \" # \u7ed8\u5236\u4f53\u7d20\u7a7a\u95f4\u7684\u89c6\u9891\uff08\u53ef\u9009\uff0c\u4e0d\u63a8\u8350\uff09 ls $vdir /*.segpkl | sed 's/.segpkl/.mp4/' | xargs -n 1 -P 8 -I {} python -m lilab.mmdet_dev.s4_segpkl_com3d_to_video {} --vox_size 230 # check video \u5176\u4e2d volsize \u8868\u793a\u5927\u9f20\u4f53\u7d20\u7a7a\u95f4\u7684\u8fb9\u957f\uff0c\u4f8b\u5982 xx_vol230.0.mp4 \u8868\u793a\u8fb9\u957f\u4e3a230mm\u3002\u8fb9\u957f\u6839\u636e\u5927\u9f20\u5e74\u9f84\u548c\u6027\u522b\u800c\u5b9a\uff0c\u63a8\u8350\u503c\u5982\u4e0b\uff1a Male Female DAY35 190 190 DAY50 230 220 DAY75 250 240 DAY\u6210\u5e74 260 240 \u6700\u540e\u5f97\u5230\u4e00\u7cfb\u5217\u89c6\u9891\u548c\u6587\u4ef6\uff0c\u5305\u62ec\uff1a xx_mask.mp4 - \u5206\u5272\u56fe\u50cf xx_vol230.0.mp4 - voxel \u4f53\u7d20\u7a7a\u95f4 xx.segpkl - \u5206\u5272\u7684Mask \u4e8c\u8fdb\u5236\u6570\u636e \u9a8c\u8bc1\uff1a\u6253\u5f00 xx_mask.mp4 \u89c6\u9891\uff0c\u67e5\u770b\u5206\u5272\u662f\u5426\u6b63\u786e\u3002\u6253\u5f00 xx_vol230.0.mp4 \u89c6\u9891\uff0c\u67e5\u770b voxel \u4f53\u7d20\u5c3a\u5bf8\u662f\u5426\u5339\u914d\u3002 \u63d0\u793a \u4e00\u6b21\u6027\u4e0d\u8981\u8dd1\u592a\u591a\u89c6\u9891\u3002\u5148\u8dd1\u51e0\u4e2a\u89c6\u9891\u8bd5\u8bd5\u770b\u3002\u6548\u679c\u4f73\uff0c\u5219\u53ef\u4ee5\u63a5\u7740\u8fd0\u884c\u5269\u4e0b\u7684\u89c6\u9891\u3002\u5982\u679c\u6548\u679c\u4e0d\u4f73\uff0c\u5219\u8981\u66f4\u65b0\u6a21\u578b\u540e\uff0c\u518d\u91cd\u65b0\u8dd1\u89c6\u9891\u3002 \u9519\u8bef \u5982\u679c\u5f00 xx_mask.mp4 \u89c6\u9891\u5206\u5272\u6548\u679c\u5dee\uff0c\u5219\u9700\u8981\u91cd\u4fee\u5206\u5272\u6807\u6ce8\uff0c\u66f4\u65b0\u6a21\u578b\u3002\u89c1\u6570\u636e\u4e0e\u6a21\u578b\u66f4\u65b0\u7ae0\u8282\u3002\u5982\u679c xx_vol230.0.mp4 \u4f53\u7d20\u65b9\u683c\u504f\u5dee\u8f83\u5927\uff0c\u8bf4\u660e\u5c0f\u7403\u77eb\u6b63\u7684\u6587\u4ef6\u6709\u9519\u8bef\uff0c\u9700\u8981\u4ece\u65b0\u77eb\u6b63\u3002","title":"\u5206\u5272\u591a\u52a8\u7269"},{"location":"%E7%A4%BE%E4%BA%A4%E4%B8%89%E7%BB%B4%E5%A7%BF%E6%80%81%E9%87%8D%E6%9E%84/process/#_3","text":"#!/bin/bash conda activate mmdet cd /home/liying_lab/chenxinfeng/DATA/dannce/demo/rat14_1280x800x9_mono_young # 1. \u51c6\u5907\u6570\u636e volsize_vfiles = \" 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-21_15-42-11D1bC1w.segpkl 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-21_15-16-15C1bD1w.segpkl 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-21_14-32-25A1bB1w.segpkl 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-21_14-54-14B1bA1w.segpkl 280 280 /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a/2023-12-20_16-45-22D1bB2w.segpkl \" volsize_vfiles = $( echo \" $volsize_vfiles \" | grep -v '^[[:space:]]*$' ) #echo \"$volsize_vfiles\" vfiles = $( echo \" $volsize_vfiles \" | awk '{print $3}' ) #echo \"$vfiles\" # 2. \u7528DANNCE \u9884\u6d4b\u5f97\u52303D\u59ff\u6001, nGPU=4 echo \" $volsize_vfiles \" | sed 's/.segpkl/.mp4/' | cat -n | xargs -P 4 -l bash -c 'python -m dannce.cli_trt ../../configs/dannce_rat14_1280x800x9_max_config.yaml --vol-size-list $1 $2 --video-file $3 --gpu-id $(($0%4))' # xargs -P 2 \u8868\u793a\u4f7f\u75282\u4e2aGPU\uff0c\u914d\u5408 choosecuda 0,1,2,3 \u786e\u8ba4\u4f7f\u7528gpu\u6570\u91cf # 3. \u7ed8\u5236\u201c\u672a\u5e73\u6ed1\u201d\u7684\u59ff\u6001\u8f68\u8ff9 \uff08\u53ef\u9009\uff09 # echo \"$vfiles\" | sed 's/.segpkl/.matcalibpkl/' | xargs -P 6 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d $0 --iview 3' # 4. \u7ed8\u5236\u5e73\u6ed1\u540e\u7684\u59ff\u6001\u8f68\u8ff9 echo \" $vfiles \" | sed 's/.segpkl/.matcalibpkl/' | xargs -l -P 6 -r python -m lilab.smoothnet.s1_matcalibpkl2smooth_foot_dzy echo \" $vfiles \" | sed 's/.segpkl/.smoothed_foot.matcalibpkl/' | xargs -P 6 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d $0 --iview 3 --postfix smoothed_foot ' # 4B \u5c06\u4e24\u4e2a\u89c6\u89d2\u4e32\u8fde\u7ed8\u5236 \uff08\u53ef\u9009\uff09 # echo \"$vfiles\" | sed 's/.segpkl/.smoothed_foot.matcalibpkl/' | xargs -P 8 -l -r bash -c 'python -m lilab.mmpose.s3_matcalibpkl_2_video2d_2view $0 --postfix smoothed_foot' # 5 \u521b\u5efa400p \u7f29\u7565\u89c6\u9891\u6587\u4ef6\uff08\u53ef\u9009\uff09 # bash /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/openlabcluster_postprocess/create_400p.sh \\ # /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/zhongzhenchao/CNTNAP2_KO/cntnap2pnd75room2/a \u5176\u4e2d volsize_vfiles \u8868\u793a\u4e00\u4e2a\u89c6\u9891\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u5206\u522b\u662f\u9ed1\u9f20\u7684voxelsize(280), \u767d\u9f20\u7684voxelsize(280) \u548c\u89c6\u9891\u540c\u540d\u7684\u5206\u5272\u6587\u4ef6 *.segpkl \u3002\u7528\u4e24\u4e2a\u4e0d\u540c\u7684voxel\uff0c\u53ef\u4ee5\u533a\u5206\u4e0d\u540c\u4f53\u578b\u7684\u9f20\uff0c\u4f8b\u5982\u96cc\u6027\u4e0e\u96c4\u6027\u3002 \u8b66\u544a \u592a\u5c0f\u7684voxelsize \u53ef\u80fd\u91c7\u96c6\u7684\u5927\u9f20\u56fe\u50cf\u4e0d\u5b8c\u6574\uff0c\u8ba9\u5173\u952e\u70b9\u8d8a\u754c\u3002\u592a\u5927\u7684voxelsize\u53ef\u80fd\u91c7\u96c6\u7684\u5927\u9f20\u56fe\u50cf\u592a\u6a21\u7cca\uff0c\u964d\u4f4e\u7cbe\u5ea6\u3002 \u5f97\u5230\u7ed3\u679c\uff1a xx.smoothed_foot.matcalibpkl - \u4e24\u53ea\u9f20\u76843D\u5173\u952e\u70b9\u5e8f\u5217\u3002 xx_3_sktdraw_smoothed_foot.mp4 - \u4e24\u53ea\u9f20\u76843D\u5173\u952e\u70b9\u89c6\u9891\u3002 xx_400p.mp4 - smoothed_foot.mp4 \u6587\u4ef6\u7684 400x400 \u5206\u8fa8\u7387\u538b\u7f29\uff0c\u51cf\u5c11\u6587\u4ef6\u5927\u5c0f\u548c\u54cd\u5e94\u901f\u5ea6\u3002 \u9a8c\u8bc1\uff1a\u6253\u5f00 xx_3_sktdraw_smoothed_foot.mp4 \u89c6\u9891\uff0c\u67e5\u770b\u5173\u952e\u70b9\u4f4d\u7f6e\u662f\u5426\u6b63\u786e\u3002\u4fdd\u5b58\u597d xx.smoothed_foot.matcalibpkl \uff0c\u8fd9\u662f\u5305\u542b\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u5750\u6807\u7684\u91cd\u8981\u6587\u4ef6\u3002 \u9519\u8bef \u5982\u679c\u5f00 xx_3_sktdraw_smoothed_foot.mp4 \u89c6\u9891\u5206\u5272\u6548\u679c\u5dee\uff0c\u53ef\u4ee5\u68c0\u67e5\u504f\u5dee\u5bf9\u5e94\u65f6\u523b\u7684\u5206\u5272\u89c6\u9891\uff0c\u610f\u89c1\u68c0\u67e5\u5c0f\u7403\u77eb\u6b63\u6587\u4ef6\u3002DANNCE\u6a21\u578b\u4e00\u822c\u6765\u8bf4\u975e\u5e38\u7a33\u5b9a\uff0cMASK-RCNN \u5206\u5272\u6a21\u578b\u5bb9\u6613\u6536\u5230\u73af\u5883\u5149\u548c\u80cc\u666f\u5f71\u54cd\uff0c\u9700\u8981\u7ecf\u5e38\u52a0\u8bad\u3002\u89c1\u6570\u636e\u4e0e\u6a21\u578b\u66f4\u65b0\u7ae0\u8282\u3002","title":"\u9884\u6d4b\u5173\u952e\u70b9"},{"location":"%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/application/","text":"\u793e\u4ea4\u6807\u7b7e\u5e8f\u5217\u5316 \u793e\u4ea4\u7279\u5f81\u8bbe\u8ba1 \u83b7\u53d6\u4e24\u53ea\u52a8\u7269\u957f\u65f6\u95f4\u8eab\u4f53\u5750\u6807\u70b9\uff0c\u5b83\u4eec\u7684\u8f68\u8ff9\u53d8\u5316\u4fe1\u606f\u4e3a\u6211\u4eec\u63a2\u7d22\u52a8\u7269\u793e\u4ea4\u7c7b\u578b\u63d0\u4f9b\u4e86\u57fa\u7840\u3002\u57fa\u4e8e\u8fd9\u4e9b\u5750\u6807\u70b9\uff0c\u6211\u4eec\u8bbe\u8ba1 \u4e86\u4e00\u7cfb\u5217\u7279\u5f81\uff08\u517132\u4e2a\uff09\uff0c\u66f4\u597d\u7684\u5c55\u793a\u793e\u4ea4\u7684\u7279\u70b9\u3002 \u5305\u62ec10\u4e2a\u52a8\u7269\u81ea\u8eab\u8fd0\u52a8\u7684\u7279\u5f81\u3002\u8003\u8651\u5230\u793e\u4ea4\u884c\u4e3a\u5177\u6709\u72ec\u7279\u7684\u4e92\u52a8\u6a21\u5f0f\uff0c \u6211\u4eec\u8fd8\u8bbe\u8ba1\u4e86\u4e24\u8005\u4ea4\u4e92\u768410\u4e2a\u7279\u5f81\u3002\u5927\u9f20\u5728\u793e\u4ea4\u63a2\u7d22\u8fc7\u7a0b\u4e2d\uff0c\u4f34\u968f\u8bb8\u591a\u5934\u90e8\u548c\u751f\u6b96\u817a\u55c5\u95fb\u884c \u4e3a\u4ee5\u719f\u6089\u5f7c\u6b64\uff0c\u56e0\u6b64\u6211\u4eec\u5212\u5b9a\u4e86\u5934\u90e8\u548c\u751f\u6b96\u817a\u7684\u5706\u5f62\u55c5\u95fb\u533a\u57df\uff0c\u5e76\u6784\u9020\u4e86 3 \u4e2a\u533a\u5206\u55c5 \u95fb\u4f4d\u70b9\u7684\u7279\u5f81\u3002\u5728\u73a9\u800d\u6253\u6597\u548c\u4ea4\u914d\u722c\u8de8\u65f6\uff0c\u5927\u9f20\u4f34\u968f\u7740\u8eab\u4f53\u8eaf\u5e72\u95f4\u7684\u4e0a\u4e0b\u91cd\u53e0\uff0c\u56e0\u6b64\u6211 \u4eec\u8bbe\u8ba1\u4e86 9 \u4e2a\u8eab\u4f53\u91cd\u53e0\u7279\u5f81\u3002 \u793e\u4ea4\u7279\u5f81\u805a\u7c7b \u6211\u4eec\u5c06\u793e\u4ea4\u89c6\u9891\u4ee50.8\u79d2\u65f6\u95f4\u7a97\u5207\u5272\uff0c\u5f97\u5230\uff0832\u7279\u5f81x24\u5e27\uff09\u7684\u9ad8\u7ef4\u7279\u5f81\u3002\u518d\u91c7\u7528\u4e86\u4e00\u4e2a\u57fa\u4e8e RNN \u7684\u81ea\u7f16\u7801\u5668\u6a21\u578bSeq2Seq\uff0c\u63d0\u53d6\u884c\u4e3a\u7684\u7a7a\u95f4\u548c\u65f6\u95f4\u7279\u5f81\uff0c\u53ef\u4ee5\u533a\u5206\u5916\u89c2\u548c\u8fd0\u52a8\u6709\u5dee\u5f02\u7684\u884c\u4e3a\u7c7b\u578b\u3002\u518d\u5c06Decoder\u7f16\u7801\u7684\u6f5c\u7279\u5f81\u7528PCA\u964d\u7ef4\u523090%\u7684\u65b9\u5dee\u53ef\u89e3\u91ca\u6027\uff08\u524d12\u7ef4PC\uff09\u3002\u4f7f\u7528 K-means \u65e0\u76d1\u7763\u805a\u7c7b\uff0c\u5f97\u5230\u7ea640-50\u4e2a\u884c\u4e3a\u7c7b\u522b\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u884c\u4e3a\u7c7b\u522b\uff0c\u6211\u4eec\u89c2\u5bdf\u4e86\u5178\u578b\u7684\u89c6\u9891\u7247\u6bb5\u5e76\u8fdb\u884c\u4e86\u4eba\u5de5\u6ce8\u89e3\u3002\u901a\u8fc7\u8fd9\u4e00\u8fc7\u7a0b\uff0c\u8bb8\u591a\u719f\u6089\u7684\u793e\u4ea4\u884c\u4e3a\u7c7b\u578b\u88ab\u6210\u529f\u805a\u7c7b\uff0c\u5982\u55c5\u63a2\u3001\u8ffd\u9010\u3001\u63a5\u8fd1\u3001\u79bb\u5f00\u548c\u73a9\u800d\uff0c\u8f83\u4e3a\u5168\u9762\u5730\u8986\u76d6\u4e86\u5927\u9f20\u7684\u793e\u4ea4\u6a21\u5f0f\u3002\u901a\u8fc7\u5c06\u884c\u4e3a\u7c7b\u522b\u6295\u5f71\u5728\u4e8c\u7ef4 UMAP \u7a7a\u95f4\u4e2d\uff0c\u6784\u6210\u4e86\u66f4\u4fbf\u4e8e\u53ef\u89c6\u5316\u7684\u793e\u4ea4\u884c\u4e3a\u56fe\u8c31\u3002\u5728 UMAP \u793e\u4ea4\u56fe\u8c31 \u4e2d\uff0c\u4e0d\u540c\u5927\u7c7b\u7684\u884c\u4e3a\u88ab\u5206\u9694\u5728\u5404\u81ea\u7684\u533a\u57df\uff0c\u76f8\u90bb\u533a\u57df\u7684\u884c\u4e3a\u6bd4\u8f83\u76f8\u4f3c\u3002\u53ca\u65f6\u76f8\u4f3c\u7684\u884c\u4e3a\uff0c\u5728\u7ec6\u5fae\u7684\u7279\u5f81\u4e0a\u6709\u6240\u533a\u522b\uff0c\u6bd4\u8ba4\u4e3a\u8bbe\u5b9a\u66f4\u4e3a\u7ec6\u81f4\u3002\u56e0\u6b64\uff0c\u81ea\u52a8\u5316\u805a\u7c7b\u7684\u65b9\u6cd5\uff0c\u65e0\u9700\u4eba\u5de5\u6807\u6ce8\uff0c\u53ef\u4ee5\u90e8\u5206\u66ff\u4ee3\u4eba\u5de5\u5bf9\u884c\u4e3a\u7684\u89c2\u5bdf\u3002 \u793e\u4ea4\u4e00\u81f4\u6027\u7684\u805a\u7c7b\u4f18\u5316 \u5728\u5bf9\u884c\u4e3a\u5206\u7c7b\u7ed3\u679c\u7684\u89c6\u9891\u7247\u6bb5\u8fdb\u884c\u8be6\u5c3d\u5ba1\u67e5\u7684\u8fc7\u7a0b\u4e2d\uff0c\u672c\u7814\u7a76\u8bc6\u522b\u51fa\u90e8\u5206\u7c7b\u522b\u4e2d\u5b58\u5728\u4e0e\u4eba\u5de5\u6807\u6ce8\u9884\u671f\u884c\u4e3a\u4e0d\u4e00\u81f4\u7684\u975e\u5178\u578b\u7247\u6bb5\u3002\u793e\u4ea4\u884c\u4e3a\u7684\u56fa\u6709\u7279\u6027\u4e3a\u4f18\u5316\u7b97\u6cd5\u63d0\u4f9b\u4e86\u72ec\u7279\u6761\u4ef6\uff0c\u5b83\u5141\u8bb8\u4ece\u4e0d\u540c\u4e2a\u4f53\u7684\u89c6\u89d2\u5ba1\u89c6\u540c\u4e00\u793e\u4ea4\u4e92\u52a8\u3002\u540c\u4e00\u793e\u4ea4\u4e92\u52a8\u7247\u6bb5\u5728\u4e24\u4e2a\u4e0d\u540c\u89d2\u8272\u89c6\u89d2\u4e0b\u5206\u522b\u8ba1\u7b97\u6807\u7b7e\uff082\u4efd\u6807\u7b7e\uff09\uff0c\u6807\u7b7e\u4e00\u81f4\u65f6\u8be5\u7247\u6bb5\u7684\u5206\u7c7b\u66f4\u53ef\u9760\u3002\u672c\u7814\u7a76\u4ece\u767d\u9f20\u548c\u9ed1\u9f20\u7684\u89c6\u89d2\u5206\u522b\u5bf9\u793e\u4ea4\u884c\u4e3a\u8fdb\u884c\u5f52\u7c7b\uff0c\u5f97\u5230\u53cc\u91cd\u6807\u7b7e\uff0c\u5e76\u8bc6\u522b\u8fd9\u4e9b\u6807\u7b7e\u7684\u4e00\u81f4\u6027\u5339\u914d\u5173\u7cfb\u3002\u5728 42 \u4e2a\u884c\u4e3a\u7c7b\u522b\u4e2d\u81ea\u52a8\u7b5b\u9009\u51fa 36 \u79cd\u5177\u6709\u4e92\u8865\u6027\u7684\u884c\u4e3a\u3002\u8fd9 36 \u7c7b\u884c\u4e3a\u88ab\u79f0\u4e3a\u53ef\u9760\u7684\u805a\u7c7b\u7c7b\u522b\u3002\u518d\u8bad\u7ec3\u795e\u7ecf\u7f51\u7edc\uff0c\u91cd\u65b0\u5c06\u6240\u6709\u89c6\u9891\u7247\u6bb5\u5212\u5206\u5230 36 \u7c7b\u53ef\u9760\u805a\u7c7b\u4e2d\u3002","title":"\u5e94\u7528\u573a\u666f"},{"location":"%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/application/#_1","text":"","title":"\u793e\u4ea4\u6807\u7b7e\u5e8f\u5217\u5316"},{"location":"%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/application/#_2","text":"\u83b7\u53d6\u4e24\u53ea\u52a8\u7269\u957f\u65f6\u95f4\u8eab\u4f53\u5750\u6807\u70b9\uff0c\u5b83\u4eec\u7684\u8f68\u8ff9\u53d8\u5316\u4fe1\u606f\u4e3a\u6211\u4eec\u63a2\u7d22\u52a8\u7269\u793e\u4ea4\u7c7b\u578b\u63d0\u4f9b\u4e86\u57fa\u7840\u3002\u57fa\u4e8e\u8fd9\u4e9b\u5750\u6807\u70b9\uff0c\u6211\u4eec\u8bbe\u8ba1 \u4e86\u4e00\u7cfb\u5217\u7279\u5f81\uff08\u517132\u4e2a\uff09\uff0c\u66f4\u597d\u7684\u5c55\u793a\u793e\u4ea4\u7684\u7279\u70b9\u3002 \u5305\u62ec10\u4e2a\u52a8\u7269\u81ea\u8eab\u8fd0\u52a8\u7684\u7279\u5f81\u3002\u8003\u8651\u5230\u793e\u4ea4\u884c\u4e3a\u5177\u6709\u72ec\u7279\u7684\u4e92\u52a8\u6a21\u5f0f\uff0c \u6211\u4eec\u8fd8\u8bbe\u8ba1\u4e86\u4e24\u8005\u4ea4\u4e92\u768410\u4e2a\u7279\u5f81\u3002\u5927\u9f20\u5728\u793e\u4ea4\u63a2\u7d22\u8fc7\u7a0b\u4e2d\uff0c\u4f34\u968f\u8bb8\u591a\u5934\u90e8\u548c\u751f\u6b96\u817a\u55c5\u95fb\u884c \u4e3a\u4ee5\u719f\u6089\u5f7c\u6b64\uff0c\u56e0\u6b64\u6211\u4eec\u5212\u5b9a\u4e86\u5934\u90e8\u548c\u751f\u6b96\u817a\u7684\u5706\u5f62\u55c5\u95fb\u533a\u57df\uff0c\u5e76\u6784\u9020\u4e86 3 \u4e2a\u533a\u5206\u55c5 \u95fb\u4f4d\u70b9\u7684\u7279\u5f81\u3002\u5728\u73a9\u800d\u6253\u6597\u548c\u4ea4\u914d\u722c\u8de8\u65f6\uff0c\u5927\u9f20\u4f34\u968f\u7740\u8eab\u4f53\u8eaf\u5e72\u95f4\u7684\u4e0a\u4e0b\u91cd\u53e0\uff0c\u56e0\u6b64\u6211 \u4eec\u8bbe\u8ba1\u4e86 9 \u4e2a\u8eab\u4f53\u91cd\u53e0\u7279\u5f81\u3002","title":"\u793e\u4ea4\u7279\u5f81\u8bbe\u8ba1"},{"location":"%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/application/#_3","text":"\u6211\u4eec\u5c06\u793e\u4ea4\u89c6\u9891\u4ee50.8\u79d2\u65f6\u95f4\u7a97\u5207\u5272\uff0c\u5f97\u5230\uff0832\u7279\u5f81x24\u5e27\uff09\u7684\u9ad8\u7ef4\u7279\u5f81\u3002\u518d\u91c7\u7528\u4e86\u4e00\u4e2a\u57fa\u4e8e RNN \u7684\u81ea\u7f16\u7801\u5668\u6a21\u578bSeq2Seq\uff0c\u63d0\u53d6\u884c\u4e3a\u7684\u7a7a\u95f4\u548c\u65f6\u95f4\u7279\u5f81\uff0c\u53ef\u4ee5\u533a\u5206\u5916\u89c2\u548c\u8fd0\u52a8\u6709\u5dee\u5f02\u7684\u884c\u4e3a\u7c7b\u578b\u3002\u518d\u5c06Decoder\u7f16\u7801\u7684\u6f5c\u7279\u5f81\u7528PCA\u964d\u7ef4\u523090%\u7684\u65b9\u5dee\u53ef\u89e3\u91ca\u6027\uff08\u524d12\u7ef4PC\uff09\u3002\u4f7f\u7528 K-means \u65e0\u76d1\u7763\u805a\u7c7b\uff0c\u5f97\u5230\u7ea640-50\u4e2a\u884c\u4e3a\u7c7b\u522b\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u884c\u4e3a\u7c7b\u522b\uff0c\u6211\u4eec\u89c2\u5bdf\u4e86\u5178\u578b\u7684\u89c6\u9891\u7247\u6bb5\u5e76\u8fdb\u884c\u4e86\u4eba\u5de5\u6ce8\u89e3\u3002\u901a\u8fc7\u8fd9\u4e00\u8fc7\u7a0b\uff0c\u8bb8\u591a\u719f\u6089\u7684\u793e\u4ea4\u884c\u4e3a\u7c7b\u578b\u88ab\u6210\u529f\u805a\u7c7b\uff0c\u5982\u55c5\u63a2\u3001\u8ffd\u9010\u3001\u63a5\u8fd1\u3001\u79bb\u5f00\u548c\u73a9\u800d\uff0c\u8f83\u4e3a\u5168\u9762\u5730\u8986\u76d6\u4e86\u5927\u9f20\u7684\u793e\u4ea4\u6a21\u5f0f\u3002\u901a\u8fc7\u5c06\u884c\u4e3a\u7c7b\u522b\u6295\u5f71\u5728\u4e8c\u7ef4 UMAP \u7a7a\u95f4\u4e2d\uff0c\u6784\u6210\u4e86\u66f4\u4fbf\u4e8e\u53ef\u89c6\u5316\u7684\u793e\u4ea4\u884c\u4e3a\u56fe\u8c31\u3002\u5728 UMAP \u793e\u4ea4\u56fe\u8c31 \u4e2d\uff0c\u4e0d\u540c\u5927\u7c7b\u7684\u884c\u4e3a\u88ab\u5206\u9694\u5728\u5404\u81ea\u7684\u533a\u57df\uff0c\u76f8\u90bb\u533a\u57df\u7684\u884c\u4e3a\u6bd4\u8f83\u76f8\u4f3c\u3002\u53ca\u65f6\u76f8\u4f3c\u7684\u884c\u4e3a\uff0c\u5728\u7ec6\u5fae\u7684\u7279\u5f81\u4e0a\u6709\u6240\u533a\u522b\uff0c\u6bd4\u8ba4\u4e3a\u8bbe\u5b9a\u66f4\u4e3a\u7ec6\u81f4\u3002\u56e0\u6b64\uff0c\u81ea\u52a8\u5316\u805a\u7c7b\u7684\u65b9\u6cd5\uff0c\u65e0\u9700\u4eba\u5de5\u6807\u6ce8\uff0c\u53ef\u4ee5\u90e8\u5206\u66ff\u4ee3\u4eba\u5de5\u5bf9\u884c\u4e3a\u7684\u89c2\u5bdf\u3002","title":"\u793e\u4ea4\u7279\u5f81\u805a\u7c7b"},{"location":"%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/application/#_4","text":"\u5728\u5bf9\u884c\u4e3a\u5206\u7c7b\u7ed3\u679c\u7684\u89c6\u9891\u7247\u6bb5\u8fdb\u884c\u8be6\u5c3d\u5ba1\u67e5\u7684\u8fc7\u7a0b\u4e2d\uff0c\u672c\u7814\u7a76\u8bc6\u522b\u51fa\u90e8\u5206\u7c7b\u522b\u4e2d\u5b58\u5728\u4e0e\u4eba\u5de5\u6807\u6ce8\u9884\u671f\u884c\u4e3a\u4e0d\u4e00\u81f4\u7684\u975e\u5178\u578b\u7247\u6bb5\u3002\u793e\u4ea4\u884c\u4e3a\u7684\u56fa\u6709\u7279\u6027\u4e3a\u4f18\u5316\u7b97\u6cd5\u63d0\u4f9b\u4e86\u72ec\u7279\u6761\u4ef6\uff0c\u5b83\u5141\u8bb8\u4ece\u4e0d\u540c\u4e2a\u4f53\u7684\u89c6\u89d2\u5ba1\u89c6\u540c\u4e00\u793e\u4ea4\u4e92\u52a8\u3002\u540c\u4e00\u793e\u4ea4\u4e92\u52a8\u7247\u6bb5\u5728\u4e24\u4e2a\u4e0d\u540c\u89d2\u8272\u89c6\u89d2\u4e0b\u5206\u522b\u8ba1\u7b97\u6807\u7b7e\uff082\u4efd\u6807\u7b7e\uff09\uff0c\u6807\u7b7e\u4e00\u81f4\u65f6\u8be5\u7247\u6bb5\u7684\u5206\u7c7b\u66f4\u53ef\u9760\u3002\u672c\u7814\u7a76\u4ece\u767d\u9f20\u548c\u9ed1\u9f20\u7684\u89c6\u89d2\u5206\u522b\u5bf9\u793e\u4ea4\u884c\u4e3a\u8fdb\u884c\u5f52\u7c7b\uff0c\u5f97\u5230\u53cc\u91cd\u6807\u7b7e\uff0c\u5e76\u8bc6\u522b\u8fd9\u4e9b\u6807\u7b7e\u7684\u4e00\u81f4\u6027\u5339\u914d\u5173\u7cfb\u3002\u5728 42 \u4e2a\u884c\u4e3a\u7c7b\u522b\u4e2d\u81ea\u52a8\u7b5b\u9009\u51fa 36 \u79cd\u5177\u6709\u4e92\u8865\u6027\u7684\u884c\u4e3a\u3002\u8fd9 36 \u7c7b\u884c\u4e3a\u88ab\u79f0\u4e3a\u53ef\u9760\u7684\u805a\u7c7b\u7c7b\u522b\u3002\u518d\u8bad\u7ec3\u795e\u7ecf\u7f51\u7edc\uff0c\u91cd\u65b0\u5c06\u6240\u6709\u89c6\u9891\u7247\u6bb5\u5212\u5206\u5230 36 \u7c7b\u53ef\u9760\u805a\u7c7b\u4e2d\u3002","title":"\u793e\u4ea4\u4e00\u81f4\u6027\u7684\u805a\u7c7b\u4f18\u5316"},{"location":"%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/dataset/","text":"\u4ece\u96f6\u5236\u4f5c\u793e\u4ea4\u805a\u7c7b\u7684\u6a21\u677f \u4ece\u5173\u952e\u70b9\u6587\u4ef6+\u89c6\u9891\u5230\u793e\u4ea4\u7279\u5f81\u548c\u884c\u4e3a\u6807\u7b7e \u5728\u8fdb\u884c\u201c\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u91cd\u6784\u201d\u4e4b\u540e\uff0c\u5e94\u8be5\u4f1a\u6709 \u201c smoothed_foot.matcalibpkl\u201d \u5173\u952e\u70b9\u6587\u4ef6\u548c\u201c _sktdraw_smoothed_foot.mp4\u201d \u89c6\u9891\u6587\u4ef6\u3002 \u5c06\u6240\u6709\u8fd9\u4e24\u7c7b\u89c6\u9891\u548c\u6570\u636e\u6587\u4ef6\u62f7\u8d1d\u5230\u4e00\u4e2a\u6587\u4ef6\u5939\u4e2d\u3002\u6267\u884c\u4e0b\u9762\u547d\u4ee4\uff0c\u5c06\u9010\u6b21 \u8ba1\u7b97\u793e\u4ea4\u7279\u5f81 - \u5bcc\u96c6\u8fd1\u8ddd\u79bb\u793e\u4ea4\u5e76\u62c6\u5206\u7247\u6bb5 - Seq2Seq\u6a21\u578b\u62bd\u63d0\u793e\u4ea4\u7684\u65f6\u7a7a\u7279\u5f81 - \u793e\u4ea4Cluster - \u7ed8\u5236\u89c6\u9891 \u3002 \u8bf7\u5c06\u8be5\u4ee3\u7801\u9010\u884c\u8fd0\u884c\u3002 #!/bin/bash conda activate OpenLabCluster # \u4ee3\u7801\u5b58\u653e\u7684\u8def\u5f84 \uff08by\u9676\u73b0\u660e\uff09 cd /DATA/taoxianming/rat/script/openlabcluster/pc_feats41_DecSeqCluster_better_20231102 pathFeats = /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/Shank3HETxWT_202309/MM_FF # ResPath \u4e0d\u8981\u7528\u4e91\u76d8\uff0c\u6587\u4ef6\u592a\u7410\u788e\uff0c\u4f7f\u7528\u4e91\u76d8\u6162 bhvResPath = ~/DATA/Shank3HETxWT_202309_MM_FF_openlabcluster today = 2023 -11-09 ##always date format mkdir -p $bhvResPath ## create 400p bash /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/openlabcluster_postprocess/create_400p.sh $pathFeats ## Calculate raw features python 01_1_feats41fromPoints-IDswitch_mp.py $pathFeats ## minmax and get close segments python 01_2_featsMM_clipsInCloseSegs_mp.py $pathFeats python 02_1_prepare_featureFiles_forOpenLabCluster.py $pathFeats $bhvResPath ## split train:test=9:1 python 02_2_makeProject_trainTest.py $bhvResPath $today ## training Seq2Seq gpuID = 0 python 02_3_seq2seq_training-decSeq.py $bhvResPath $gpuID $today ## behavior clustering python 03_1_decSeqFeats_PCA-balanceCluster.py $bhvResPath $today ## Dec features in space, colored by cluster NO python 03_2_plot_decSeqFeatsPCS-trajectoryColorByLabels.py $bhvResPath $today ## plot mp4 videos of each behavior cluster python 04_1_plot_decSeqCluster-Videos.py $pathFeats $bhvResPath $today ## get behavior cluster sequence of each video python 04_2_getBhvClusterSeqs_eachVideo.py $pathFeats $bhvResPath $today \u5f97\u5230 *_sequences.pkl \u548c *_bio_labels.npz \u4e24\u4e2a\u884c\u4e3a\u89c6\u9891\u6807\u7b7e\u6587\u4ef6; FWPCA*_blackFirst/svm_clu*_400p.mp4 \u6bcf\u7c7b\u884c\u4e3a\u5bf9\u5e94\u7684\u89c6\u9891\u6587\u4ef6\u3002 \u7ed8\u56fe & \u8ba1\u7b97\u4e3b\u88ab\u52a8\u4e00\u81f4\u6027 \u8bf7\u5c06\u8be5\u4ee3\u7801\u9010\u884c\u8fd0\u884c\u3002 #!/bin/bash conda activate mmdet cd /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/ ## 1. \u5408\u5e76\u6587\u4ef6\uff0c\u751f\u6210 clippredpkl \u6587\u4ef6 python -m lilab.openlabcluster_postprocess.s1_merge_3_file . ## 2. Embedding \u7684 UMAP \u4e0e Kmeans \u8fb9\u754c python -m lilab.openlabcluster_postprocess.s2_decisionBoundary_masaik_plot *.clippredpkl ## 3A. Kmeans \u5c42\u6b21\u805a\u7c7b # \u51c6\u5907\u5de5\u4f5c\u3002\u9996\u5148\u5148\u7ed9\u6bcf\u4e2acluster\u53d6\u540d\u5b57. \u6253\u5f00\u8be5\u811a\u672c\uff0c\u628a \u7c7b\u522b\u540d\u79f0 \u8d34\u5728\u811a\u672c\u4e2d\uff1b\u8fd0\u884c\u3002\u6700\u7ec8\uff0c\u7c7b\u522b\u540d\u79f0\u5c31\u6dfb\u52a0\u5230\u6765 *.clippredpkl\u3002 # python -m lilab.openlabcluster_postprocess.s3a_cluster_givename_mergefile *.clippredpkl ## 3B. \u6216\u8005\u6682\u65f6\u4e0d\u6807\u51c6\u7c7b\u547d python -m lilab.openlabcluster_postprocess.s3a_cluster_givename_mergefile *.clippredpkl --auto-label ## 4. \u7136\u540e\u8fd0\u884c\u5c42\u6b21\u805a\u7c7b\u7684\u753b\u56fe python -m lilab.openlabcluster_postprocess.s3b_hiecluster_plot *.clippredpkl & python -m lilab.openlabcluster_postprocess.s3b_hiecluster_plot_pro *.clippredpkl & ## 5. Mirror \u6216 Mutual \u7c7b\u522b\u7684\u754c\u5b9a python -m lilab.openlabcluster_postprocess.s3c_mirror_mutual_matrix_plot *.clippredpkl ## 6.\u53ef\u4ee5\u5408\u5e76\u6807\u7b7e\u3002\u6bd4\u5982\u4e3b\u88ab\u52a8\uff0c\u6bd4\u5982\u6811\u72b6\u56fe\u76f8\u90bb\u7684\u7c7b\u3002[\u53ef\u9009\uff0c\u4e0d\u5efa\u8bae] # \u51c6\u5907\u5de5\u4f5c\u3002\u6253\u5f00\u8be5\u811a\u672c\uff0c\u628a\u53ef\u4ee5\u5408\u5e76\u7684\u7c7b\u522b \u5199\u5728\u811a\u672c\u4e2d\uff1b\u8fd0\u884c\u3002\u6700\u7ec8\uff0c\u7c7b\u522b\u540d\u79f0\u7684\u5408\u5e76\u5c31\u6dfb\u52a0\u5230\u6765 *.clippredpkl\u3002 # python -m lilab.openlabcluster_postprocess.s3a2_cluster_nodemerge *.clippredpkl ## 7. \u53ef\u9009\u7ed8\u56fe\u3002Moseq-like Motif \u7684\u7ed8\u5236 # \u9700\u8981\u627e\u5230\u539f\u59cb\u7684\u5173\u952e\u70b9\u5750\u6807\u6587\u4ef6\uff08\u90fd\u5b58\u653e\u5728SmoothFootPkl_DIR\u6587\u4ef6\u5939\uff09\uff0c\u624d\u80fd\u7ed8\u5236\u3002\u8fd0\u884c\u4e0b\u9762\u4ee3\u7801\u3002\u5728\u540c\u7ea7\u76ee\u5f55\u4e0b\uff0c\u4f1a\u751f\u6210 motifshowmulti \u7684\u7ed3\u679c\u6587\u4ef6\u5939\u3002 SmoothFootPkl_DIR = /A/B/C python -m lilab.openlabcluster_postprocess.s4_moseq_like_motif_plot *.clippredpkl $SmoothFootPkl_DIR \u5229\u7528\u4e3b\u88ab\u52a8\u4e00\u81f4\u6027\uff0c\u91c7\u7528 Active-Learning \u4f18\u5316\u805a\u7c7b conda activate mmdet # \u66f4\u6362\u76ee\u5f55\u5230 kmeans \u805a\u7c7b\u7ed3\u679c\u8def\u5f84 cd /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/ #1. \u91cd\u65b0\u8ba1\u7b97\u955c\u50cf\uff0c\u5e76\u5bfc\u51fa\u955c\u50cf\u7c7b\u522b\u77e9\u9635\u70ed\u56fe & \u955c\u50cf\u8868 python -m lilab.OpenLabCluster_train.a0_mirror_mutual_matrix_plot *.clippredpkl #2. \u7b5b\u9009 representitives \u7247\u6bb5\uff0c\u6210\u4e3a\u65b0\u7684 clippredpkl python -m lilab.OpenLabCluster_train.a1_mirror_mutual_filt_clippredpkl *.clippredpkl cd ./representitive_*_filt_perc* #3. \u4e4b\u524d\u65e0\u76d1\u7763\u7684\u5e38\u89c4\u5206\u6790\u6d41\u7a0b -- \u753b\u56fe\u68c0\u67e5\u4e00\u904d #3-1. Embedding \u7684 UMAP \u4e0e Kmeans \u8fb9\u754c python -m lilab.openlabcluster_postprocess.s2_decisionBoundary_masaik_plot *.clippredpkl #3-2. \u7136\u540e\u8fd0\u884c\u5c42\u6b21\u805a\u7c7b\u7684\u753b\u56fe python -m lilab.openlabcluster_postprocess.s3b_hiecluster_plot_pro *.clippredpkl #3-3. Mirror \u6216 Mutual \u7c7b\u522b\u7684\u754c\u5b9a python -m lilab.openlabcluster_postprocess.s3c_mirror_mutual_matrix_plot *.clippredpkl #B1. \u521b\u5efa openlabcluster semi_seq2seq \u9879\u76ee\uff0c\u4eceseq2seq\u91cc\u9762\u62f7\u8d1d\u51fa\u6765 conda activate OpenLabCluster PROJECT_SEQ2SEQ = /DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32_k36/feats32-2024-04-11 PROJECT_REPR = /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32_k36 PROJECT_SEMISEQ2SEQ = ` python -m lilab.OpenLabCluster_train.a2_semiseqseq_data_prepare $PROJECT_REPR $PROJECT_SEQ2SEQ ` cd $PROJECT_SEMISEQ2SEQ #B2. \u521d\u59cb\u5316 seq2seq python -m lilab.OpenLabCluster_train.a3_semiseqseq_init_train_seqseq $PROJECT_SEMISEQ2SEQ --epoch 3 #\u7b2c\u4e00\u6b21\u8fed\u4ee3\uff0c\u4eceseq2seq \u5230semiseq2seq # PROJECT_SEMISEQ2SEQ=/DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/semiseq2seq_iter0 # PROJECT_REPR=/mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/representitive_*_filt_perc* PROJECT_SEMISEQ2SEQ = /DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32_k36/semiseq2seq_iter1 python -m lilab.OpenLabCluster_train.a5b_export_latent_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --modeltype SemiSeq2SeqLite #--modeltype SemiSeq2SeqLite \u9ed8\u8ba4\u4e0d\u9009 # \u4f7f\u7528 SemiSeq2Seq \u6a21\u578b\u8bad\u7ec3\u6807\u7b7e\u8bc6\u522b python -m lilab.OpenLabCluster_train.a4_semiseqseq_train $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-now 0 --modeltype SemiSeq2SeqLite # \u6839\u636e SemiSeq2Seq \u6a21\u578b\u9884\u6d4b\u6240\u6709\u7247\u6bb5\u7684\u6807\u7b7e python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter 0 --modeltype SemiSeq2SeqLite # \u4ece\u7247\u6bb5\u96c6\u4e2d\u7b5b\u9009\u51fa\u7684 representative \u6807\u7b7e\uff0c\u751f\u6210\u65b0\u7684\u6570\u636e\u96c6 python -m lilab.OpenLabCluster_train.a2a_clippredfile_refine $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter0-epoch5/*.clippredpkl $PROJECT_REPR /*.clippredpkl python -m lilab.OpenLabCluster_train.a2b_iter_data_prepare $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-from 0 #create new data for iter1 #\u5f00\u59cbiter python -m lilab.OpenLabCluster_train.a4_semiseqseq_train $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-now 1 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter 1 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a2a_clippredfile_refine $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter1-epoch5/*.clippredpkl $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter0-epoch5/*.clippredpkl python -m lilab.OpenLabCluster_train.a2b_iter_data_prepare $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-from 1 #create new data for iter2 python -m lilab.OpenLabCluster_train.a4_semiseqseq_train $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-now 2 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter 2 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a2a_clippredfile_refine $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter2-epoch5/*.clippredpkl $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter1-epoch5/*.clippredpkl python -m lilab.OpenLabCluster_train.a2b_iter_data_prepare $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-from 2 #create new data for iter3 python -m lilab.OpenLabCluster_train.a4_semiseqseq_train $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-now 3 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter 3 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a2a_clippredfile_refine $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter3-epoch5/*.clippredpkl $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter2-epoch5/*.clippredpkl python -m lilab.OpenLabCluster_train.a2b_iter_data_prepare $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-from 3 #create new data for iter3 # 4. \u8fed\u4ee3\u7ed3\u675f\uff0c\u753b\u56fe ITER = 3 EPOCH = 6 #\u753b400p conda activate mmdet DIR_400p = /DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/data python -m lilab.OpenLabCluster_train.a6b_clippredpkl_2_cluster400p $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter $ITER -epoch $EPOCH /*.clippredpkl $DIR_400p #clippredpkl \u8f6c seqencepkl python -m lilab.OpenLabCluster_train.a6_clippredpkl_2_seqencepkl $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter $ITER -epoch $EPOCH /*.clippredpkl #\u8ba1\u7b97 chi dbi \u805a\u7c7b\u5ea6\u91cf ls $PROJECT_SEMISEQ2SEQ /output/*/*.clippredpkl | xargs -n 1 -P 8 -I {} python -m lilab.OpenLabCluster_train.b1_chi_dbi {} --PCA 12 # \u53c2\u8003\u805a\u7c7b\u89c6\u9891\u548c\u4e3b\u88ab\u52a8\u4e00\u81f4\u6027\uff0c\u7ed9\u4e88\u91cd\u65b0\u547d\u4ee4\u3002\u6253\u5f00\u811a\u672c\uff0c\u4fee\u6539\u5176\u4e2d\u7c7b\u522b\u540d\u5b57 ls $PROJECT_SEMISEQ2SEQ /output/semi*/*.clippredpkl | xargs -n 1 -P 8 -I {} python -m lilab.OpenLabCluster_train.t1_cluster_name_rename {} ##\u9884\u6d4b\u6570\u636e\u96c6\uff0c\u751f\u6210\u5230 Data.H5 \u6587\u4ef6\u5373\u53ef ##\u9700\u8981\u66f4\u6539config.yaml\u6587\u4ef6\u4e2d feature_length: 32\uff08feature\u4e2a\u6570\uff09,cla_dim: - 36 num_class: - 36(\u8bad\u7ec3\u96c6\u6700\u7ec8cluster\u6570) conda activate OpenLabCluster ITER = 3 EPOCH = 5 PROJECT_SEQ2SEQ = /DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32_k36/semiseq2seq_iter1 PROJECT_REPR = /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/representitive_k36_filt_perc65 CLIPPREDPKL = $PROJECT_SEQ2SEQ /output/semisupervise-decSeq-iter $ITER -epoch $EPOCH /*.clippredpkl python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEQ2SEQ --epoch 3 --iter 3 python -m lilab.OpenLabCluster_train.a6_clippredpkl_2_seqencepkl $CLIPPREDPKL # python -m lilab.OpenLabCluster_train.t1_cluster_name_rename $CLIPPREDPKL #3. \u4e4b\u524d\u65e0\u76d1\u7763\u7684\u5e38\u89c4\u5206\u6790\u6d41\u7a0b -- \u753b\u56fe\u68c0\u67e5\u4e00\u904d python -m lilab.openlabcluster_postprocess.s2_decisionBoundary_masaik_plot $CLIPPREDPKL python -m lilab.openlabcluster_postprocess.s3b_hiecluster_plot_pro $CLIPPREDPKL python -m lilab.openlabcluster_postprocess.s3c_mirror_mutual_matrix_plot $CLIPPREDPKL #\u5408\u5e76\u4e3b\u88ab\u52a8\uff0c\u518d\u805a\u7c7b [\u53ef\u9009] python -m lilab.OpenLabCluster_train.t2_halfmirror_hierachy $CLIPPREDPKL","title":"\u805a\u7c7b\u548c\u6a21\u677f\u5236\u4f5c"},{"location":"%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/dataset/#_1","text":"","title":"\u4ece\u96f6\u5236\u4f5c\u793e\u4ea4\u805a\u7c7b\u7684\u6a21\u677f"},{"location":"%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/dataset/#_2","text":"\u5728\u8fdb\u884c\u201c\u793e\u4ea4\u4e09\u7ef4\u59ff\u6001\u91cd\u6784\u201d\u4e4b\u540e\uff0c\u5e94\u8be5\u4f1a\u6709 \u201c smoothed_foot.matcalibpkl\u201d \u5173\u952e\u70b9\u6587\u4ef6\u548c\u201c _sktdraw_smoothed_foot.mp4\u201d \u89c6\u9891\u6587\u4ef6\u3002 \u5c06\u6240\u6709\u8fd9\u4e24\u7c7b\u89c6\u9891\u548c\u6570\u636e\u6587\u4ef6\u62f7\u8d1d\u5230\u4e00\u4e2a\u6587\u4ef6\u5939\u4e2d\u3002\u6267\u884c\u4e0b\u9762\u547d\u4ee4\uff0c\u5c06\u9010\u6b21 \u8ba1\u7b97\u793e\u4ea4\u7279\u5f81 - \u5bcc\u96c6\u8fd1\u8ddd\u79bb\u793e\u4ea4\u5e76\u62c6\u5206\u7247\u6bb5 - Seq2Seq\u6a21\u578b\u62bd\u63d0\u793e\u4ea4\u7684\u65f6\u7a7a\u7279\u5f81 - \u793e\u4ea4Cluster - \u7ed8\u5236\u89c6\u9891 \u3002 \u8bf7\u5c06\u8be5\u4ee3\u7801\u9010\u884c\u8fd0\u884c\u3002 #!/bin/bash conda activate OpenLabCluster # \u4ee3\u7801\u5b58\u653e\u7684\u8def\u5f84 \uff08by\u9676\u73b0\u660e\uff09 cd /DATA/taoxianming/rat/script/openlabcluster/pc_feats41_DecSeqCluster_better_20231102 pathFeats = /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/Shank3HETxWT_202309/MM_FF # ResPath \u4e0d\u8981\u7528\u4e91\u76d8\uff0c\u6587\u4ef6\u592a\u7410\u788e\uff0c\u4f7f\u7528\u4e91\u76d8\u6162 bhvResPath = ~/DATA/Shank3HETxWT_202309_MM_FF_openlabcluster today = 2023 -11-09 ##always date format mkdir -p $bhvResPath ## create 400p bash /home/liying_lab/chenxinfeng/ml-project/LILAB-py/lilab/openlabcluster_postprocess/create_400p.sh $pathFeats ## Calculate raw features python 01_1_feats41fromPoints-IDswitch_mp.py $pathFeats ## minmax and get close segments python 01_2_featsMM_clipsInCloseSegs_mp.py $pathFeats python 02_1_prepare_featureFiles_forOpenLabCluster.py $pathFeats $bhvResPath ## split train:test=9:1 python 02_2_makeProject_trainTest.py $bhvResPath $today ## training Seq2Seq gpuID = 0 python 02_3_seq2seq_training-decSeq.py $bhvResPath $gpuID $today ## behavior clustering python 03_1_decSeqFeats_PCA-balanceCluster.py $bhvResPath $today ## Dec features in space, colored by cluster NO python 03_2_plot_decSeqFeatsPCS-trajectoryColorByLabels.py $bhvResPath $today ## plot mp4 videos of each behavior cluster python 04_1_plot_decSeqCluster-Videos.py $pathFeats $bhvResPath $today ## get behavior cluster sequence of each video python 04_2_getBhvClusterSeqs_eachVideo.py $pathFeats $bhvResPath $today \u5f97\u5230 *_sequences.pkl \u548c *_bio_labels.npz \u4e24\u4e2a\u884c\u4e3a\u89c6\u9891\u6807\u7b7e\u6587\u4ef6; FWPCA*_blackFirst/svm_clu*_400p.mp4 \u6bcf\u7c7b\u884c\u4e3a\u5bf9\u5e94\u7684\u89c6\u9891\u6587\u4ef6\u3002","title":"\u4ece\u5173\u952e\u70b9\u6587\u4ef6+\u89c6\u9891\u5230\u793e\u4ea4\u7279\u5f81\u548c\u884c\u4e3a\u6807\u7b7e"},{"location":"%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/dataset/#_3","text":"\u8bf7\u5c06\u8be5\u4ee3\u7801\u9010\u884c\u8fd0\u884c\u3002 #!/bin/bash conda activate mmdet cd /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/ ## 1. \u5408\u5e76\u6587\u4ef6\uff0c\u751f\u6210 clippredpkl \u6587\u4ef6 python -m lilab.openlabcluster_postprocess.s1_merge_3_file . ## 2. Embedding \u7684 UMAP \u4e0e Kmeans \u8fb9\u754c python -m lilab.openlabcluster_postprocess.s2_decisionBoundary_masaik_plot *.clippredpkl ## 3A. Kmeans \u5c42\u6b21\u805a\u7c7b # \u51c6\u5907\u5de5\u4f5c\u3002\u9996\u5148\u5148\u7ed9\u6bcf\u4e2acluster\u53d6\u540d\u5b57. \u6253\u5f00\u8be5\u811a\u672c\uff0c\u628a \u7c7b\u522b\u540d\u79f0 \u8d34\u5728\u811a\u672c\u4e2d\uff1b\u8fd0\u884c\u3002\u6700\u7ec8\uff0c\u7c7b\u522b\u540d\u79f0\u5c31\u6dfb\u52a0\u5230\u6765 *.clippredpkl\u3002 # python -m lilab.openlabcluster_postprocess.s3a_cluster_givename_mergefile *.clippredpkl ## 3B. \u6216\u8005\u6682\u65f6\u4e0d\u6807\u51c6\u7c7b\u547d python -m lilab.openlabcluster_postprocess.s3a_cluster_givename_mergefile *.clippredpkl --auto-label ## 4. \u7136\u540e\u8fd0\u884c\u5c42\u6b21\u805a\u7c7b\u7684\u753b\u56fe python -m lilab.openlabcluster_postprocess.s3b_hiecluster_plot *.clippredpkl & python -m lilab.openlabcluster_postprocess.s3b_hiecluster_plot_pro *.clippredpkl & ## 5. Mirror \u6216 Mutual \u7c7b\u522b\u7684\u754c\u5b9a python -m lilab.openlabcluster_postprocess.s3c_mirror_mutual_matrix_plot *.clippredpkl ## 6.\u53ef\u4ee5\u5408\u5e76\u6807\u7b7e\u3002\u6bd4\u5982\u4e3b\u88ab\u52a8\uff0c\u6bd4\u5982\u6811\u72b6\u56fe\u76f8\u90bb\u7684\u7c7b\u3002[\u53ef\u9009\uff0c\u4e0d\u5efa\u8bae] # \u51c6\u5907\u5de5\u4f5c\u3002\u6253\u5f00\u8be5\u811a\u672c\uff0c\u628a\u53ef\u4ee5\u5408\u5e76\u7684\u7c7b\u522b \u5199\u5728\u811a\u672c\u4e2d\uff1b\u8fd0\u884c\u3002\u6700\u7ec8\uff0c\u7c7b\u522b\u540d\u79f0\u7684\u5408\u5e76\u5c31\u6dfb\u52a0\u5230\u6765 *.clippredpkl\u3002 # python -m lilab.openlabcluster_postprocess.s3a2_cluster_nodemerge *.clippredpkl ## 7. \u53ef\u9009\u7ed8\u56fe\u3002Moseq-like Motif \u7684\u7ed8\u5236 # \u9700\u8981\u627e\u5230\u539f\u59cb\u7684\u5173\u952e\u70b9\u5750\u6807\u6587\u4ef6\uff08\u90fd\u5b58\u653e\u5728SmoothFootPkl_DIR\u6587\u4ef6\u5939\uff09\uff0c\u624d\u80fd\u7ed8\u5236\u3002\u8fd0\u884c\u4e0b\u9762\u4ee3\u7801\u3002\u5728\u540c\u7ea7\u76ee\u5f55\u4e0b\uff0c\u4f1a\u751f\u6210 motifshowmulti \u7684\u7ed3\u679c\u6587\u4ef6\u5939\u3002 SmoothFootPkl_DIR = /A/B/C python -m lilab.openlabcluster_postprocess.s4_moseq_like_motif_plot *.clippredpkl $SmoothFootPkl_DIR","title":"\u7ed8\u56fe &amp; \u8ba1\u7b97\u4e3b\u88ab\u52a8\u4e00\u81f4\u6027"},{"location":"%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/dataset/#active-learning","text":"conda activate mmdet # \u66f4\u6362\u76ee\u5f55\u5230 kmeans \u805a\u7c7b\u7ed3\u679c\u8def\u5f84 cd /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/ #1. \u91cd\u65b0\u8ba1\u7b97\u955c\u50cf\uff0c\u5e76\u5bfc\u51fa\u955c\u50cf\u7c7b\u522b\u77e9\u9635\u70ed\u56fe & \u955c\u50cf\u8868 python -m lilab.OpenLabCluster_train.a0_mirror_mutual_matrix_plot *.clippredpkl #2. \u7b5b\u9009 representitives \u7247\u6bb5\uff0c\u6210\u4e3a\u65b0\u7684 clippredpkl python -m lilab.OpenLabCluster_train.a1_mirror_mutual_filt_clippredpkl *.clippredpkl cd ./representitive_*_filt_perc* #3. \u4e4b\u524d\u65e0\u76d1\u7763\u7684\u5e38\u89c4\u5206\u6790\u6d41\u7a0b -- \u753b\u56fe\u68c0\u67e5\u4e00\u904d #3-1. Embedding \u7684 UMAP \u4e0e Kmeans \u8fb9\u754c python -m lilab.openlabcluster_postprocess.s2_decisionBoundary_masaik_plot *.clippredpkl #3-2. \u7136\u540e\u8fd0\u884c\u5c42\u6b21\u805a\u7c7b\u7684\u753b\u56fe python -m lilab.openlabcluster_postprocess.s3b_hiecluster_plot_pro *.clippredpkl #3-3. Mirror \u6216 Mutual \u7c7b\u522b\u7684\u754c\u5b9a python -m lilab.openlabcluster_postprocess.s3c_mirror_mutual_matrix_plot *.clippredpkl #B1. \u521b\u5efa openlabcluster semi_seq2seq \u9879\u76ee\uff0c\u4eceseq2seq\u91cc\u9762\u62f7\u8d1d\u51fa\u6765 conda activate OpenLabCluster PROJECT_SEQ2SEQ = /DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32_k36/feats32-2024-04-11 PROJECT_REPR = /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32_k36 PROJECT_SEMISEQ2SEQ = ` python -m lilab.OpenLabCluster_train.a2_semiseqseq_data_prepare $PROJECT_REPR $PROJECT_SEQ2SEQ ` cd $PROJECT_SEMISEQ2SEQ #B2. \u521d\u59cb\u5316 seq2seq python -m lilab.OpenLabCluster_train.a3_semiseqseq_init_train_seqseq $PROJECT_SEMISEQ2SEQ --epoch 3 #\u7b2c\u4e00\u6b21\u8fed\u4ee3\uff0c\u4eceseq2seq \u5230semiseq2seq # PROJECT_SEMISEQ2SEQ=/DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/semiseq2seq_iter0 # PROJECT_REPR=/mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/representitive_*_filt_perc* PROJECT_SEMISEQ2SEQ = /DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32_k36/semiseq2seq_iter1 python -m lilab.OpenLabCluster_train.a5b_export_latent_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --modeltype SemiSeq2SeqLite #--modeltype SemiSeq2SeqLite \u9ed8\u8ba4\u4e0d\u9009 # \u4f7f\u7528 SemiSeq2Seq \u6a21\u578b\u8bad\u7ec3\u6807\u7b7e\u8bc6\u522b python -m lilab.OpenLabCluster_train.a4_semiseqseq_train $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-now 0 --modeltype SemiSeq2SeqLite # \u6839\u636e SemiSeq2Seq \u6a21\u578b\u9884\u6d4b\u6240\u6709\u7247\u6bb5\u7684\u6807\u7b7e python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter 0 --modeltype SemiSeq2SeqLite # \u4ece\u7247\u6bb5\u96c6\u4e2d\u7b5b\u9009\u51fa\u7684 representative \u6807\u7b7e\uff0c\u751f\u6210\u65b0\u7684\u6570\u636e\u96c6 python -m lilab.OpenLabCluster_train.a2a_clippredfile_refine $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter0-epoch5/*.clippredpkl $PROJECT_REPR /*.clippredpkl python -m lilab.OpenLabCluster_train.a2b_iter_data_prepare $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-from 0 #create new data for iter1 #\u5f00\u59cbiter python -m lilab.OpenLabCluster_train.a4_semiseqseq_train $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-now 1 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter 1 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a2a_clippredfile_refine $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter1-epoch5/*.clippredpkl $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter0-epoch5/*.clippredpkl python -m lilab.OpenLabCluster_train.a2b_iter_data_prepare $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-from 1 #create new data for iter2 python -m lilab.OpenLabCluster_train.a4_semiseqseq_train $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-now 2 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter 2 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a2a_clippredfile_refine $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter2-epoch5/*.clippredpkl $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter1-epoch5/*.clippredpkl python -m lilab.OpenLabCluster_train.a2b_iter_data_prepare $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-from 2 #create new data for iter3 python -m lilab.OpenLabCluster_train.a4_semiseqseq_train $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-now 3 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter 3 --modeltype SemiSeq2SeqLite python -m lilab.OpenLabCluster_train.a2a_clippredfile_refine $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter3-epoch5/*.clippredpkl $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter2-epoch5/*.clippredpkl python -m lilab.OpenLabCluster_train.a2b_iter_data_prepare $PROJECT_REPR $PROJECT_SEMISEQ2SEQ --epoch 5 --iter-from 3 #create new data for iter3 # 4. \u8fed\u4ee3\u7ed3\u675f\uff0c\u753b\u56fe ITER = 3 EPOCH = 6 #\u753b400p conda activate mmdet DIR_400p = /DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/data python -m lilab.OpenLabCluster_train.a6b_clippredpkl_2_cluster400p $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter $ITER -epoch $EPOCH /*.clippredpkl $DIR_400p #clippredpkl \u8f6c seqencepkl python -m lilab.OpenLabCluster_train.a6_clippredpkl_2_seqencepkl $PROJECT_SEMISEQ2SEQ /output/semisupervise-decSeq-iter $ITER -epoch $EPOCH /*.clippredpkl #\u8ba1\u7b97 chi dbi \u805a\u7c7b\u5ea6\u91cf ls $PROJECT_SEMISEQ2SEQ /output/*/*.clippredpkl | xargs -n 1 -P 8 -I {} python -m lilab.OpenLabCluster_train.b1_chi_dbi {} --PCA 12 # \u53c2\u8003\u805a\u7c7b\u89c6\u9891\u548c\u4e3b\u88ab\u52a8\u4e00\u81f4\u6027\uff0c\u7ed9\u4e88\u91cd\u65b0\u547d\u4ee4\u3002\u6253\u5f00\u811a\u672c\uff0c\u4fee\u6539\u5176\u4e2d\u7c7b\u522b\u540d\u5b57 ls $PROJECT_SEMISEQ2SEQ /output/semi*/*.clippredpkl | xargs -n 1 -P 8 -I {} python -m lilab.OpenLabCluster_train.t1_cluster_name_rename {} ##\u9884\u6d4b\u6570\u636e\u96c6\uff0c\u751f\u6210\u5230 Data.H5 \u6587\u4ef6\u5373\u53ef ##\u9700\u8981\u66f4\u6539config.yaml\u6587\u4ef6\u4e2d feature_length: 32\uff08feature\u4e2a\u6570\uff09,cla_dim: - 36 num_class: - 36(\u8bad\u7ec3\u96c6\u6700\u7ec8cluster\u6570) conda activate OpenLabCluster ITER = 3 EPOCH = 5 PROJECT_SEQ2SEQ = /DATA/taoxianming/rat/data/Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32_k36/semiseq2seq_iter1 PROJECT_REPR = /mnt/liying.cibr.ac.cn_Data_Temp/multiview_9/chenxf/00_BehaviorAnalysis-seq2seq/SexAge/Day55_Mix_analysis/SexAgeDay55andzzcWTinAUT_MMFF/result32/representitive_k36_filt_perc65 CLIPPREDPKL = $PROJECT_SEQ2SEQ /output/semisupervise-decSeq-iter $ITER -epoch $EPOCH /*.clippredpkl python -m lilab.OpenLabCluster_train.a5_export_latent_iter_repr $PROJECT_REPR $PROJECT_SEQ2SEQ --epoch 3 --iter 3 python -m lilab.OpenLabCluster_train.a6_clippredpkl_2_seqencepkl $CLIPPREDPKL # python -m lilab.OpenLabCluster_train.t1_cluster_name_rename $CLIPPREDPKL #3. \u4e4b\u524d\u65e0\u76d1\u7763\u7684\u5e38\u89c4\u5206\u6790\u6d41\u7a0b -- \u753b\u56fe\u68c0\u67e5\u4e00\u904d python -m lilab.openlabcluster_postprocess.s2_decisionBoundary_masaik_plot $CLIPPREDPKL python -m lilab.openlabcluster_postprocess.s3b_hiecluster_plot_pro $CLIPPREDPKL python -m lilab.openlabcluster_postprocess.s3c_mirror_mutual_matrix_plot $CLIPPREDPKL #\u5408\u5e76\u4e3b\u88ab\u52a8\uff0c\u518d\u805a\u7c7b [\u53ef\u9009] python -m lilab.OpenLabCluster_train.t2_halfmirror_hierachy $CLIPPREDPKL","title":"\u5229\u7528\u4e3b\u88ab\u52a8\u4e00\u81f4\u6027\uff0c\u91c7\u7528 Active-Learning \u4f18\u5316\u805a\u7c7b"},{"location":"%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/postprocess/","text":"","title":"Postprocess"},{"location":"%E7%A4%BE%E4%BA%A4%E5%BA%8F%E5%88%97%E6%A0%87%E7%AD%BE/process/","text":"conda activate OpenLabCluster PROEJECT_DIR = /mnt/liying.cibr.ac.cn_Data_Temp_ZZC/2024-ChR2rat/2410shank3/400p # \u52a8\u7269\u5728\u6bcf\u4e2avideo\u91cc\u9762\u7b97\u4f53\u957f\uff0c\u7b97sniffzone # \u5f97\u5230 'bodylength.pkl', 'rawfeat.pkl' python -m lilab.lstm_bhv_bodylennorm_classify.s0_prepare_body_length $PROEJECT_DIR #--skip-frames 1800 python -m lilab.lstm_bhv_bodylennorm_classify.s01_matcalibpkl2rawfeatpkl $PROEJECT_DIR # \u6309\u901f\u5ea6 95% \u5206\u4f4d\u6570\u5f52\u4e00\u5316 # \u5f97\u5230 rawfeat_norm.pkl python -m lilab.lstm_bhv_bodylennorm_classify.s02_rawfeatpkl_to_norm $PROEJECT_DIR #--setspeed 0.05 #--skip-frames 1800 # \u4ece3D\u5173\u952e\u70b9\u51fa\u53d1\uff0c\u52a0\u4e0a\u4f53\u957f\u4fe1\u606f\uff0c\u7b97\u51fa\u884c\u4e3a\u5206\u7c7b # --use-normed \u4f7f\u7528\u901f\u5ea6\u5f52\u4e00\u5316\u540e\u7684\u7279\u5f81 # \u5f97\u5230 out_semiseq2seq_norm/lstm_offline.clippredpkl python -m lilab.lstm_bhv_bodylennorm_classify.s1_matcalibpkl2clippredpkl_semiseq2seq $PROEJECT_DIR --use-normed # \u5bc6\u96c6\u9884\u6d4b 10Hz, stride=3 # python -m lilab.lstm_bhv_bodylennorm_classify.s1_matcalibpkl2clippredpkl_semiseq2seq $PROEJECT_DIR --use-normed --stride 3 # \u53ea\u770b\u955c\u50cf\u4e00\u81f4\u6027\u7684\u89c6\u9891\u7247\u6bb5\uff0crepresentative # \u5f97\u5230 out_semiseq2seq_norm/representitive_k36_filt_perc*/*.clippredpkl \u548c .seqencepkl conda activate mmdet python -m lilab.OpenLabCluster_train.a6_clippredpkl_2_seqencepkl $PROEJECT_DIR /out_semiseq2seq_norm/*.clippredpkl python -m lilab.OpenLabCluster_train.a1_mirror_mutual_filt_clippredpkl $PROEJECT_DIR /out_semiseq2seq_norm/lstm_offline.clippredpkl --already-mirrored python -m lilab.OpenLabCluster_train.a6_clippredpkl_2_seqencepkl $PROEJECT_DIR /out_semiseq2seq_norm/representitive_k36_filt_perc*/*.clippredpkl --autoEnd # \u753b\u51fa\u6bcf\u4e2a\u7c7b\u522b\u7684\u89c6\u9891\u7247\u6bb5 [\u53ef\u9009] # python -m lilab.OpenLabCluster_train.a6b_clippredpkl_2_cluster400p \\ # $PROEJECT_DIR/out_semiseq2seq_norm/representitive_k36_filt_perc*/Representive_K36.clippredpkl \\ # $PROEJECT_DIR","title":"\u4ee3\u7801\u6d41\u7a0b"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/OBS_%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/","text":"OBS \u8f6f\u4ef6\u5b89\u88c5 \u89c6\u9891\u6559\u7a0b\uff1axxx \u7cfb\u7edf\u91c7\u7528 OBS Studio\uff08\u7248\u672c 29.0 \uff09\u8fdb\u884c\u89c6\u9891\u5f55\u5236\u3002OBS \u4ee5\u5176\u4f18\u79c0\u7684\u53ef\u914d\u7f6e\u6027\u3001\u7a33\u5b9a\u6027\u548c\u5f00\u6e90\u7279\u6027\u5728\u89c6\u9891\u76f4\u64ad\u548c\u5f55\u5236\u9886\u57df\u5e7f\u6cdb\u5e94\u7528\u3002\u8be5\u8f6f\u4ef6\u652f\u6301\u591a\u79cd\u6765\u6e90\u8f93\u5165\uff0c\u5305\u62ec\u56fe\u50cf\u3001\u6587\u672c\u3001\u6d4f\u89c8\u5668\u7a97\u53e3\u3001\u6444\u50cf\u5934\u548c\u9ea6\u514b\u98ce\u7b49\uff0c \u6709\u6548\u7b80\u5316\u4e86\u591a\u76f8\u673a\u540c\u6b65\u5f55\u5236\u7684\u590d\u6742\u6027 \u3002\u5176\u591a\u7ebf\u7a0b\u8d1f\u8f7d\u4f18\u5316\u548c GPU \u89c6\u9891\u7f16\u89e3\u7801\u5177\u6709 \u51fa\u8272\u7684\u6027\u80fd\u8868\u73b0 \u3002\u5728\u672c\u5e73\u53f0\u4e2d\uff0cOBS \u63d0\u4f9b\u4e86\u5b9e\u65f6\u9884\u89c8\u3001\u591a\u76f8\u673a\u5e03\u5c40\u3001\u5206\u8fa8\u7387\u8c03\u6574\u548c\u7f16\u7a0b\u63a5\u53e3\u7b49\u5168\u9762\u800c\u7075\u6d3b\u7684\u89c6\u9891\u5f55\u5236\u89e3\u51b3\u65b9\u6848\u3002OBS \u7684\u5177\u4f53\u914d\u7f6e\u8be6\u89c1\u4e0b\u8868\u3002 OBS \u7248\u672c29.0, \u4e0b\u8f7d\u5730\u5740\uff1a https://obsproject.com/download \u5bf9\u8c61 \u4e3b\u8981\u529f\u80fd \u53c2\u6570 \u6765\u6e90 > \u6dfb\u52a0 > \u89c6\u9891\u91c7\u96c6\u8bbe\u5907 \u6dfb\u52a0 9 \u4e2aK1S293\u76f8\u673a \u5355\u4e2a\u76f8\u673a\u5206\u8fa8\u7387\u4e0b\u62c9\u5217\u8868\u4e2d\uff0c\u9009\u62e9 1280\u00d7800\uff0c\u5e27\u7387\u4e3a\u6700\u9ad8 (\u5373120fps)\uff0c\u5e27\u7f16\u7801\u4e3aMJPEG \u8bbe\u7f6e> \u8f93\u51fa> \u5f55\u50cf \u5f55\u50cf\u6587\u4ef6\u683c\u5f0f \u7c7b\u578b\u4e3a\u6807\u51c6\uff1b \u6587\u4ef6\u540d\u4e3a\u65e0\u7a7a\u683c\uff1b \u8f93\u51fa\u5bb9\u5668\u4e3a MP4\uff1b \u7f16\u7801\u5668\u4e3a NVIDIA NVENC HEVC; \u7801\u7387\u4e3a30 Mbps\uff1b\u9884\u8bbe\u4e3a\u9ad8\u8d28\u91cf\u3002 \u8bbe\u7f6e> \u89c6\u9891 \u753b\u5e03\u5206\u8fa8\u7387\u548c\u5e27\u7387 \u753b\u5e03\u5206\u8fa8\u7387 3840\u00d72400\uff0c\u4e3a 9 \u4e2a\u76f8\u673a\u62fc\u63a5\u540e\u7684\u50cf\u7d20\u548c\uff1b\u4e0d\u7f29\u653e\uff1b\u5e27\u7387 30 fps\u3002 \u83dc\u5355 > \u5de5\u5177 > WebSocket \u670d\u52a1\u5668 \u5916\u90e8\u4ee3\u7801\u63a7\u5236 OBS \u5f55\u5236\u5f00\u5173 \u7aef\u53e3\u53f7 4455; \u4e0d\u4f7f\u7528\u5bc6\u7801\uff08\u53d6\u6d88\u6743\u9274\u6846\uff09\uff1b\u63a8\u8350\u914d\u5408F2 \u540c\u6b65\u52a9\u624b\u4f7f\u7528 \u5728 OBS \u8f6f\u4ef6\u7684\u5177\u4f53\u914d\u7f6e\u8fc7\u7a0b\u4e2d\uff0c\u9700\u91cd\u70b9\u5173\u6ce8\u4ee5\u4e0b\u6280\u672f\u7ec6\u8282\uff1a \u5728\u5c06\u591a\u76f8\u673a\u89c6\u9891\u6d41\u6dfb\u52a0\u81f3 OBS \u753b\u5e03\u65f6\uff0c\u5e94\u907f\u514d\u5bf9\u76f8\u673a\u89c6\u89d2\u8fdb\u884c\u62c9\u4f38\u6216\u88c1\u526a\uff0c\u4ee5\u9632\u6b62\u56fe\u50cf\u6570\u636e\u4e22\u5931\u5e76\u786e\u4fdd\u540e\u7eed\u591a\u76f8\u673a\u56fe\u50cf\u8bfb\u53d6\u7684\u51c6\u786e\u5b9a\u4f4d\u3002 \u591a\u76f8\u673a\u56fe\u50cf\u5728 OBS \u753b\u5e03\u4e2d\u5e94\u7d27\u5bc6\u6392\u5217\uff0c\u76f8\u673a\u7f16\u53f7\u9700\u9075\u5faa\u4ece\u5de6\u5230\u53f3\u3001\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u3002 \u6709\u4e9b\u76f8\u673a\u62cd\u6444\u7684\u56fe\u50cf\u4e0a\u4e0b\u98a0\u5012\uff0c\u9700\u5728 OBS \u8f6f\u4ef6\u4e0a\u8fdb\u884c 180\u00b0\u65cb\u8f6c\u4fee\u6b63\uff0c\u4f46\u4e0d\u8981\u4f7f\u7528\u955c\u50cf\u3002 \u5b8c\u6210\u4e0a\u8ff0\u914d\u7f6e\u540e\uff0c\u5373\u53ef\u901a\u8fc7 OBS \u754c\u9762\u542f\u52a8\u5f55\u5236\uff0c\u540c\u6b65\u8bb0\u5f55 9 \u4e2a\u76f8\u673a\u7684\u884c\u4e3a\u5b9e\u9a8c\u89c6\u9891\u3002\u901a\u5e38\uff0c15\u5206\u949f\u7684\u5b9e\u9a8c\u89c6\u9891\u7ea6\u4e3a3.4GB\u3002\u4f7f\u7528 Potplayer \u6216\u8005 VLC \u7b49\u64ad\u653e\u5668\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5730\u67e5\u770b\u89c6\u9891\u3002","title":"OBS\u8f6f\u4ef6\u5b89\u88c5"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/OBS_%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/#obs","text":"\u89c6\u9891\u6559\u7a0b\uff1axxx \u7cfb\u7edf\u91c7\u7528 OBS Studio\uff08\u7248\u672c 29.0 \uff09\u8fdb\u884c\u89c6\u9891\u5f55\u5236\u3002OBS \u4ee5\u5176\u4f18\u79c0\u7684\u53ef\u914d\u7f6e\u6027\u3001\u7a33\u5b9a\u6027\u548c\u5f00\u6e90\u7279\u6027\u5728\u89c6\u9891\u76f4\u64ad\u548c\u5f55\u5236\u9886\u57df\u5e7f\u6cdb\u5e94\u7528\u3002\u8be5\u8f6f\u4ef6\u652f\u6301\u591a\u79cd\u6765\u6e90\u8f93\u5165\uff0c\u5305\u62ec\u56fe\u50cf\u3001\u6587\u672c\u3001\u6d4f\u89c8\u5668\u7a97\u53e3\u3001\u6444\u50cf\u5934\u548c\u9ea6\u514b\u98ce\u7b49\uff0c \u6709\u6548\u7b80\u5316\u4e86\u591a\u76f8\u673a\u540c\u6b65\u5f55\u5236\u7684\u590d\u6742\u6027 \u3002\u5176\u591a\u7ebf\u7a0b\u8d1f\u8f7d\u4f18\u5316\u548c GPU \u89c6\u9891\u7f16\u89e3\u7801\u5177\u6709 \u51fa\u8272\u7684\u6027\u80fd\u8868\u73b0 \u3002\u5728\u672c\u5e73\u53f0\u4e2d\uff0cOBS \u63d0\u4f9b\u4e86\u5b9e\u65f6\u9884\u89c8\u3001\u591a\u76f8\u673a\u5e03\u5c40\u3001\u5206\u8fa8\u7387\u8c03\u6574\u548c\u7f16\u7a0b\u63a5\u53e3\u7b49\u5168\u9762\u800c\u7075\u6d3b\u7684\u89c6\u9891\u5f55\u5236\u89e3\u51b3\u65b9\u6848\u3002OBS \u7684\u5177\u4f53\u914d\u7f6e\u8be6\u89c1\u4e0b\u8868\u3002 OBS \u7248\u672c29.0, \u4e0b\u8f7d\u5730\u5740\uff1a https://obsproject.com/download \u5bf9\u8c61 \u4e3b\u8981\u529f\u80fd \u53c2\u6570 \u6765\u6e90 > \u6dfb\u52a0 > \u89c6\u9891\u91c7\u96c6\u8bbe\u5907 \u6dfb\u52a0 9 \u4e2aK1S293\u76f8\u673a \u5355\u4e2a\u76f8\u673a\u5206\u8fa8\u7387\u4e0b\u62c9\u5217\u8868\u4e2d\uff0c\u9009\u62e9 1280\u00d7800\uff0c\u5e27\u7387\u4e3a\u6700\u9ad8 (\u5373120fps)\uff0c\u5e27\u7f16\u7801\u4e3aMJPEG \u8bbe\u7f6e> \u8f93\u51fa> \u5f55\u50cf \u5f55\u50cf\u6587\u4ef6\u683c\u5f0f \u7c7b\u578b\u4e3a\u6807\u51c6\uff1b \u6587\u4ef6\u540d\u4e3a\u65e0\u7a7a\u683c\uff1b \u8f93\u51fa\u5bb9\u5668\u4e3a MP4\uff1b \u7f16\u7801\u5668\u4e3a NVIDIA NVENC HEVC; \u7801\u7387\u4e3a30 Mbps\uff1b\u9884\u8bbe\u4e3a\u9ad8\u8d28\u91cf\u3002 \u8bbe\u7f6e> \u89c6\u9891 \u753b\u5e03\u5206\u8fa8\u7387\u548c\u5e27\u7387 \u753b\u5e03\u5206\u8fa8\u7387 3840\u00d72400\uff0c\u4e3a 9 \u4e2a\u76f8\u673a\u62fc\u63a5\u540e\u7684\u50cf\u7d20\u548c\uff1b\u4e0d\u7f29\u653e\uff1b\u5e27\u7387 30 fps\u3002 \u83dc\u5355 > \u5de5\u5177 > WebSocket \u670d\u52a1\u5668 \u5916\u90e8\u4ee3\u7801\u63a7\u5236 OBS \u5f55\u5236\u5f00\u5173 \u7aef\u53e3\u53f7 4455; \u4e0d\u4f7f\u7528\u5bc6\u7801\uff08\u53d6\u6d88\u6743\u9274\u6846\uff09\uff1b\u63a8\u8350\u914d\u5408F2 \u540c\u6b65\u52a9\u624b\u4f7f\u7528 \u5728 OBS \u8f6f\u4ef6\u7684\u5177\u4f53\u914d\u7f6e\u8fc7\u7a0b\u4e2d\uff0c\u9700\u91cd\u70b9\u5173\u6ce8\u4ee5\u4e0b\u6280\u672f\u7ec6\u8282\uff1a \u5728\u5c06\u591a\u76f8\u673a\u89c6\u9891\u6d41\u6dfb\u52a0\u81f3 OBS \u753b\u5e03\u65f6\uff0c\u5e94\u907f\u514d\u5bf9\u76f8\u673a\u89c6\u89d2\u8fdb\u884c\u62c9\u4f38\u6216\u88c1\u526a\uff0c\u4ee5\u9632\u6b62\u56fe\u50cf\u6570\u636e\u4e22\u5931\u5e76\u786e\u4fdd\u540e\u7eed\u591a\u76f8\u673a\u56fe\u50cf\u8bfb\u53d6\u7684\u51c6\u786e\u5b9a\u4f4d\u3002 \u591a\u76f8\u673a\u56fe\u50cf\u5728 OBS \u753b\u5e03\u4e2d\u5e94\u7d27\u5bc6\u6392\u5217\uff0c\u76f8\u673a\u7f16\u53f7\u9700\u9075\u5faa\u4ece\u5de6\u5230\u53f3\u3001\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u3002 \u6709\u4e9b\u76f8\u673a\u62cd\u6444\u7684\u56fe\u50cf\u4e0a\u4e0b\u98a0\u5012\uff0c\u9700\u5728 OBS \u8f6f\u4ef6\u4e0a\u8fdb\u884c 180\u00b0\u65cb\u8f6c\u4fee\u6b63\uff0c\u4f46\u4e0d\u8981\u4f7f\u7528\u955c\u50cf\u3002 \u5b8c\u6210\u4e0a\u8ff0\u914d\u7f6e\u540e\uff0c\u5373\u53ef\u901a\u8fc7 OBS \u754c\u9762\u542f\u52a8\u5f55\u5236\uff0c\u540c\u6b65\u8bb0\u5f55 9 \u4e2a\u76f8\u673a\u7684\u884c\u4e3a\u5b9e\u9a8c\u89c6\u9891\u3002\u901a\u5e38\uff0c15\u5206\u949f\u7684\u5b9e\u9a8c\u89c6\u9891\u7ea6\u4e3a3.4GB\u3002\u4f7f\u7528 Potplayer \u6216\u8005 VLC \u7b49\u64ad\u653e\u5668\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5730\u67e5\u770b\u89c6\u9891\u3002","title":"OBS \u8f6f\u4ef6\u5b89\u88c5"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/shopping_list/","text":"\u8bbe\u5907\u7ec4\u88c5\u548c\u6e05\u5355 \u5305\u542b\u76f8\u673a\u5b9e\u9a8c\u7bb1\uff0c\u5b9e\u9a8c\u7535\u8111\uff0c\u5206\u6790\u670d\u52a1\u5668\u3002\u89c6\u9891\u6559\u7a0b\uff1axxx \u76f8\u673a\u5b9e\u9a8c\u7bb1 \u8868\u683c\u4e2d\u5217\u51fa\u4e86\u76f8\u673a\u5b9e\u9a8c\u7bb1\u4e2d\u4f7f\u7528\u7684\u6240\u6709\u76f8\u673a\u548c\u6750\u6599\u3002 \u540d\u79f0 \u53c2\u6570 \u6570\u91cf \u8d2d\u4e70\u94fe\u63a5 K1S293 \u76f8\u673a 1280x800\u5206\u8fa8\u7387\uff0c120fps\uff0c\u9ed1\u767d 9 \u6dd8\u5b9d\u8d2d\u4e70\u94fe\u63a5 \u94dd\u578b\u6750\u652f\u67b6 \u516d\u8fb9\u5f62\uff0c\u53cc\u5c42\u652f\u67b6 1 \u81ea\u884c\u52a0\u5de5- \u4e91\u53f0\u548c\u6ed1\u8f68 9\u4e2a 9 \u6dd8\u5b9d\u8d2d\u4e70\u94fe\u63a5 \u7ea2\u5149\u7167\u660eLED \u73af\u5883\u5149\u7167\u660e 6 \u6dd8\u5b9d\u8d2d\u4e70\u94fe\u63a5 \u6c27\u5316\u94dd\u6807\u5b9a\u677f \u68cb\u76d8\uff0c\u76f8\u673a\u6807\u5b9a\uff1b\u578b\u53f7GP290 12x9 1 \u6dd8\u5b9d\u8d2d\u4e70\u94fe\u63a5 \u91d1\u5c5e\u5c0f\u7403 \u7528\u4e8e\u76f8\u673a\u5916\u53c2\u6807\u5b9a\uff0c\u76f4\u5f84 <2 cm 1 \u968f\u4fbf\u627e \u4e9a\u514b\u529b\u906e\u5149\u677f \u7528\u4e8e\u906e\u6321\u80cc\u666f\u6742\u7269\uff0c\u9632\u6b62\u56fe\u50cf\u5e72\u6270\u3002\u5c3a\u5bf8\u6839\u636e\u5b9e\u9a8c\u9700\u6c42\u3002 7 \u6dd8\u5b9d\u8d2d\u4e70\u94fe\u63a5 \u6ce8\u610f\u4e8b\u9879\uff1a - \u76f8\u673a\u7684\u955c\u5934\u5408\u9002\u7126\u8ddd\u9700\u8981\u81ea\u5df1\u6d4b\u8bd5\uff0c\u76f8\u673a\u8fdc\u8fd1\u3001\u8bd5\u9a8c\u7bb1\u5927\u5c0f\u7b49\u56e0\u7d20\u4f1a\u5f71\u54cd\u7126\u8ddd\u9009\u62e9\u3002 - \u5efa\u8bae\u8ba9\u76f8\u673a\u5382\u5bb6\u7ed9\u6bcf\u4e2a\u76f8\u673a\u4e0d\u540c\u7684\u8f6f\u4ef6\u6807\u5fd7\u7b26\uff08\u4e0d\u540c\u547d\u540d\uff09\uff0c\u65b9\u4fbf\u533a\u5206\u3002 - \u6ed1\u8f68\u4e0d\u662f\u90a3\u4e48\u5fc5\u8981\uff0c\u56e0\u4e3a\u53ef\u4ee5\u7528\u7126\u8ddd\u6765\u8c03\u6574\u76f8\u673a\u62cd\u6444\u89c6\u91ce\u3002\u4f46\u662f\u4e91\u53f0\u662f\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u9700\u8981\u8c03\u6574\u76f8\u673a\u7684\u89d2\u5ea6\u3002 - \u7ea2\u5149\u7167\u660eLED\u653e\u5728\u652f\u67b66\u4e2a\u89d2\u843d\u4e0a\uff0c\u5747\u5300\u7167\u660e\u3002\u5426\u5219\u5355\u4e00\u5149\u6e90\u5bb9\u6613\u5bfc\u81f4\u56fe\u50cf\u9634\u5f71\uff0c\u5bfc\u81f4\u540e\u7eed\u52a8\u7269\u5206\u6790\u7cbe\u5ea6\u4e0b\u964d\u3002\u706f\u5149\u5f3a\u5ea6\u8f83\u9ad8\uff0c\u9700\u8981\u7528\u906e\u6321\u4e00\u90e8\u5206\uff0c\u4f7f\u5f97\u6700\u540e\u7684\u5149\u7167\u572820lux\u5de6\u53f3\u3002 - \u76f8\u673a\u4e0d\u8981\u76f4\u8fde\u7535\u8111\u7684USB\u53e3\uff0c\u56e0\u4e3a\u4e3b\u677f\u7684USB\u5e26\u5bbd\u4e25\u91cd\u53d7\u9650\uff0c\u4e0d\u80fd\u540c\u65f6\u8fde\u591a\u76f8\u673a\u3002\u8bf7\u4f7f\u7528\u4e13\u4e1a\u7ea7PCIE-USB\u62d3\u5c55\u5361\uff08U3412U\uff09\uff01\uff01 \u5b9e\u9a8c\u7535\u8111\u786c\u4ef6\u914d\u7f6e \u7528\u4e8e\u91c7\u96c6\u591a\u76f8\u673a\u89c6\u9891\u6570\u636e\uff0c\u5e76\u4f7f\u7528OBS Studio\u8fdb\u884c\u89c6\u9891\u5f55\u5236\u3002 \u540d\u79f0 \u578b\u53f7 \u5907\u6ce8 \u64cd\u4f5c\u7cfb\u7edf Windows 10 - CPU Intel Core i7-12700 - GPU NVIDIA RTX 3060 OBS Studio\u8c03\u7528\u5176 HEVC \u89c6\u9891\u7f16\u7801\u5668 \u5185\u5b58 32GB DDR4 3200MHz - \u5b58\u50a8 SSD 1TB; HDD 8TB - PCIE-USB \u62d3\u5c55\u5361 \u6df1\u5733\u5e02\u901f\u901f\u4f18\u79d1\u6280 U3412U \uff0c 6\u53e3USB \u5f3a\u70c8\u63a8\u8350\uff0c\u6570\u91cfx2 \u4e91\u8ba1\u7b97\u5e73\u53f0\u786c\u4ef6\u914d\u7f6e \u7528\u4e8e\u8bad\u7ec3\u6a21\u578b\uff0c\u63a8\u7406\u6a21\u578b\uff1b\u6570\u636e\u5206\u6790\uff0c\u53ef\u89c6\u5316\uff1b\u95ed\u73af\u884c\u4e3a\u5e72\u9884\u7684\u4e91\u8ba1\u7b97\u5e73\u53f0\u3002 \u540d\u79f0 \u578b\u53f7 \u5907\u6ce8 \u5382\u5bb6 \u6d6a\u6f6e - \u64cd\u4f5c\u7cfb\u7edf Ubuntu 18.04 - CPU Intel Xeon 4314 dual \u53cc\u8defCPU GPU NVIDIA RTX 3090 \u6570\u91cfx4 \u5185\u5b58 256GB DDR4 3200MHz - \u5b58\u50a8 SSD 1TB; HDD 8TB - \uff08\u53ef\u9009\uff09\u4e91\u5b58\u50a8\u786c\u4ef6\uff08NAS\uff09\u914d\u7f6e \u7528\u4e8e\u5b58\u50a8\u5927\u91cf\u5b9e\u9a8c\u89c6\u9891\u6570\u636e\u548c\u5206\u6790\u7ed3\u679c\uff0c\u5e76\u652f\u6301\u591a\u7528\u6237\u540c\u65f6\u8bbf\u95ee\u3002 \u540d\u79f0 \u578b\u53f7 \u5907\u6ce8 \u7fa4\u8f891 DS2419+\uff0c 96 TB - \u7fa4\u8f892 RS2821RP+\uff0c 200 TB -","title":"\u786c\u4ef6\u6e05\u5355"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/shopping_list/#_1","text":"\u5305\u542b\u76f8\u673a\u5b9e\u9a8c\u7bb1\uff0c\u5b9e\u9a8c\u7535\u8111\uff0c\u5206\u6790\u670d\u52a1\u5668\u3002\u89c6\u9891\u6559\u7a0b\uff1axxx","title":"\u8bbe\u5907\u7ec4\u88c5\u548c\u6e05\u5355"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/shopping_list/#_2","text":"\u8868\u683c\u4e2d\u5217\u51fa\u4e86\u76f8\u673a\u5b9e\u9a8c\u7bb1\u4e2d\u4f7f\u7528\u7684\u6240\u6709\u76f8\u673a\u548c\u6750\u6599\u3002 \u540d\u79f0 \u53c2\u6570 \u6570\u91cf \u8d2d\u4e70\u94fe\u63a5 K1S293 \u76f8\u673a 1280x800\u5206\u8fa8\u7387\uff0c120fps\uff0c\u9ed1\u767d 9 \u6dd8\u5b9d\u8d2d\u4e70\u94fe\u63a5 \u94dd\u578b\u6750\u652f\u67b6 \u516d\u8fb9\u5f62\uff0c\u53cc\u5c42\u652f\u67b6 1 \u81ea\u884c\u52a0\u5de5- \u4e91\u53f0\u548c\u6ed1\u8f68 9\u4e2a 9 \u6dd8\u5b9d\u8d2d\u4e70\u94fe\u63a5 \u7ea2\u5149\u7167\u660eLED \u73af\u5883\u5149\u7167\u660e 6 \u6dd8\u5b9d\u8d2d\u4e70\u94fe\u63a5 \u6c27\u5316\u94dd\u6807\u5b9a\u677f \u68cb\u76d8\uff0c\u76f8\u673a\u6807\u5b9a\uff1b\u578b\u53f7GP290 12x9 1 \u6dd8\u5b9d\u8d2d\u4e70\u94fe\u63a5 \u91d1\u5c5e\u5c0f\u7403 \u7528\u4e8e\u76f8\u673a\u5916\u53c2\u6807\u5b9a\uff0c\u76f4\u5f84 <2 cm 1 \u968f\u4fbf\u627e \u4e9a\u514b\u529b\u906e\u5149\u677f \u7528\u4e8e\u906e\u6321\u80cc\u666f\u6742\u7269\uff0c\u9632\u6b62\u56fe\u50cf\u5e72\u6270\u3002\u5c3a\u5bf8\u6839\u636e\u5b9e\u9a8c\u9700\u6c42\u3002 7 \u6dd8\u5b9d\u8d2d\u4e70\u94fe\u63a5 \u6ce8\u610f\u4e8b\u9879\uff1a - \u76f8\u673a\u7684\u955c\u5934\u5408\u9002\u7126\u8ddd\u9700\u8981\u81ea\u5df1\u6d4b\u8bd5\uff0c\u76f8\u673a\u8fdc\u8fd1\u3001\u8bd5\u9a8c\u7bb1\u5927\u5c0f\u7b49\u56e0\u7d20\u4f1a\u5f71\u54cd\u7126\u8ddd\u9009\u62e9\u3002 - \u5efa\u8bae\u8ba9\u76f8\u673a\u5382\u5bb6\u7ed9\u6bcf\u4e2a\u76f8\u673a\u4e0d\u540c\u7684\u8f6f\u4ef6\u6807\u5fd7\u7b26\uff08\u4e0d\u540c\u547d\u540d\uff09\uff0c\u65b9\u4fbf\u533a\u5206\u3002 - \u6ed1\u8f68\u4e0d\u662f\u90a3\u4e48\u5fc5\u8981\uff0c\u56e0\u4e3a\u53ef\u4ee5\u7528\u7126\u8ddd\u6765\u8c03\u6574\u76f8\u673a\u62cd\u6444\u89c6\u91ce\u3002\u4f46\u662f\u4e91\u53f0\u662f\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u9700\u8981\u8c03\u6574\u76f8\u673a\u7684\u89d2\u5ea6\u3002 - \u7ea2\u5149\u7167\u660eLED\u653e\u5728\u652f\u67b66\u4e2a\u89d2\u843d\u4e0a\uff0c\u5747\u5300\u7167\u660e\u3002\u5426\u5219\u5355\u4e00\u5149\u6e90\u5bb9\u6613\u5bfc\u81f4\u56fe\u50cf\u9634\u5f71\uff0c\u5bfc\u81f4\u540e\u7eed\u52a8\u7269\u5206\u6790\u7cbe\u5ea6\u4e0b\u964d\u3002\u706f\u5149\u5f3a\u5ea6\u8f83\u9ad8\uff0c\u9700\u8981\u7528\u906e\u6321\u4e00\u90e8\u5206\uff0c\u4f7f\u5f97\u6700\u540e\u7684\u5149\u7167\u572820lux\u5de6\u53f3\u3002 - \u76f8\u673a\u4e0d\u8981\u76f4\u8fde\u7535\u8111\u7684USB\u53e3\uff0c\u56e0\u4e3a\u4e3b\u677f\u7684USB\u5e26\u5bbd\u4e25\u91cd\u53d7\u9650\uff0c\u4e0d\u80fd\u540c\u65f6\u8fde\u591a\u76f8\u673a\u3002\u8bf7\u4f7f\u7528\u4e13\u4e1a\u7ea7PCIE-USB\u62d3\u5c55\u5361\uff08U3412U\uff09\uff01\uff01","title":"\u76f8\u673a\u5b9e\u9a8c\u7bb1"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/shopping_list/#_3","text":"\u7528\u4e8e\u91c7\u96c6\u591a\u76f8\u673a\u89c6\u9891\u6570\u636e\uff0c\u5e76\u4f7f\u7528OBS Studio\u8fdb\u884c\u89c6\u9891\u5f55\u5236\u3002 \u540d\u79f0 \u578b\u53f7 \u5907\u6ce8 \u64cd\u4f5c\u7cfb\u7edf Windows 10 - CPU Intel Core i7-12700 - GPU NVIDIA RTX 3060 OBS Studio\u8c03\u7528\u5176 HEVC \u89c6\u9891\u7f16\u7801\u5668 \u5185\u5b58 32GB DDR4 3200MHz - \u5b58\u50a8 SSD 1TB; HDD 8TB - PCIE-USB \u62d3\u5c55\u5361 \u6df1\u5733\u5e02\u901f\u901f\u4f18\u79d1\u6280 U3412U \uff0c 6\u53e3USB \u5f3a\u70c8\u63a8\u8350\uff0c\u6570\u91cfx2","title":"\u5b9e\u9a8c\u7535\u8111\u786c\u4ef6\u914d\u7f6e"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/shopping_list/#_4","text":"\u7528\u4e8e\u8bad\u7ec3\u6a21\u578b\uff0c\u63a8\u7406\u6a21\u578b\uff1b\u6570\u636e\u5206\u6790\uff0c\u53ef\u89c6\u5316\uff1b\u95ed\u73af\u884c\u4e3a\u5e72\u9884\u7684\u4e91\u8ba1\u7b97\u5e73\u53f0\u3002 \u540d\u79f0 \u578b\u53f7 \u5907\u6ce8 \u5382\u5bb6 \u6d6a\u6f6e - \u64cd\u4f5c\u7cfb\u7edf Ubuntu 18.04 - CPU Intel Xeon 4314 dual \u53cc\u8defCPU GPU NVIDIA RTX 3090 \u6570\u91cfx4 \u5185\u5b58 256GB DDR4 3200MHz - \u5b58\u50a8 SSD 1TB; HDD 8TB -","title":"\u4e91\u8ba1\u7b97\u5e73\u53f0\u786c\u4ef6\u914d\u7f6e"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/shopping_list/#nas","text":"\u7528\u4e8e\u5b58\u50a8\u5927\u91cf\u5b9e\u9a8c\u89c6\u9891\u6570\u636e\u548c\u5206\u6790\u7ed3\u679c\uff0c\u5e76\u652f\u6301\u591a\u7528\u6237\u540c\u65f6\u8bbf\u95ee\u3002 \u540d\u79f0 \u578b\u53f7 \u5907\u6ce8 \u7fa4\u8f891 DS2419+\uff0c 96 TB - \u7fa4\u8f892 RS2821RP+\uff0c 200 TB -","title":"\uff08\u53ef\u9009\uff09\u4e91\u5b58\u50a8\u786c\u4ef6\uff08NAS\uff09\u914d\u7f6e"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"\u670d\u52a1\u5668\u73af\u5883\u914d\u7f6e \u53ea\u6709\u914d\u7f6e\u597d\u670d\u52a1\u5668\u73af\u5883\uff0c\u624d\u80fd\u987a\u5229\u8fd0\u884c\u672c\u9879\u76ee\uff0c\u5305\u62ec\u6a21\u578b\u8bad\u7ec3\u3001\u63a8\u7406\uff0c\u52a8\u7269\u884c\u4e3a\u5206\u6790\u6d41\u7a0b\u3002 \u8bba\u6587\u56fe\u8868\u590d\u73b0\ud83d\udd17 \u4e0d\u9700\u8981\u914d\u7f6e\u670d\u52a1\u5668\u73af\u5883\uff0c\u53ea\u9700\u8981\u914d\u7f6e\u672c\u5730\u73af\u5883\u5373\u53ef\u3002 \u670d\u52a1\u5668\u73af\u5883\u914d\u7f6e\u6ce8\u610f \u6df1\u5ea6\u5b66\u4e60\u73af\u5883\u662f\u672c\u9879\u76ee\u7684\u6838\u5fc3\u57fa\u7840\u3002\u6211\u4eec\u7406\u89e3\u73af\u5883\u642d\u5efa\u53ef\u80fd\u662f\u4e00\u4e2a\u590d\u6742\u4e14\u5177\u6709\u6311\u6218\u6027\u7684\u8fc7\u7a0b\uff0c\u8fd9\u4e5f\u662f\u6574\u4e2aAI\u9886\u57df\u666e\u904d\u9762\u4e34\u7684\u96be\u9898\u3002 \u867d\u7136\u6211\u4eec\u5728\u6301\u7eed\u4f18\u5316\u90e8\u7f72\u6d41\u7a0b\uff0c\u4f46\u5f53\u524d\u9879\u76ee\u4ecd\u5b58\u5728\u4e00\u4e9b\u7248\u672c\u517c\u5bb9\u6027\u95ee\u9898\u3002\u6211\u4eec\u5efa\u8bae\u60a8\u5728\u914d\u7f6e\u73af\u5883\u65f6\u4fdd\u6301\u8010\u5fc3\uff0c\u5e76\u5177\u5907\u4e00\u5b9a\u7684\u6280\u672f\u94bb\u7814\u7cbe\u795e\uff0c\u4ee5\u5e94\u5bf9\u53ef\u80fd\u51fa\u73b0\u7684\u6311\u6218\u3002 \u786c\u4ef6\u914d\u7f6e \u670d\u52a1\u5668\u786c\u4ef6\u914d\u7f6e\u5305\u62ec\uff1a CPU : Intel Xeon 4314 \u5185\u5b58 : 256 GB GPU : 4 \u5757 NVIDIA GeForce RTX 3090 \u5b58\u50a8 : 1 TB \u56fa\u6001\u786c\u76d8 + 8 TB \u673a\u68b0\u786c\u76d8 \u8f6f\u4ef6\u73af\u5883 \u8f6f\u4ef6\u73af\u5883\u5305\u62ec\uff1a \u64cd\u4f5c\u7cfb\u7edf : Ubuntu 18.04 \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 : CUDA 11.4\u3001cuDNN 8.8\u3001TensorRT 8.6 \u5f00\u53d1\u5de5\u5177 : Python 3.7.16\u3001OpenCV-Python 4.8.0\u3001TensorFlow 2.7.0\u3001PyTorch 1.11.0 \u7528\u4e8e\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u8bad\u7ec3\u548c\u6570\u636e\u5206\u6790\u3002 \u91cd\u8981\u8b66\u544a \u76ee\u524d\u4ec5\u652f\u6301 Ubuntu \u7cfb\u7edf\u548c NVIDIA \u663e\u5361\uff0c\u5176\u4ed6\u7cfb\u7edf\u8bf7\u81ea\u884c\u67e5\u9605\u76f8\u5173\u8d44\u6599\u3002 \u91cd\u8981\u8b66\u544a \u7531\u4e8e\u8f6f\u4ef6\u662f\u57282019\u5e74\u914d\u7f6e\u7684\uff0c\u56e0\u6b64\u90e8\u5206\u8f6f\u4ef6\u7248\u672c\u53ef\u80fd\u5df2\u7ecf\u8fc7\u65f6\uff0c\u5efa\u8bae\u6839\u636e\u5b9e\u9645\u9700\u6c42\u9009\u62e9\u6700\u65b0\u7248\u672c\u3002\u5927\u90e8\u5206 Python \u5e93\u53ef\u4ee5\u5728 pip \u548c conda \u4e2d\u627e\u5230\uff0c\u4f46\u662f\u90e8\u5206\u5e93\u53ef\u80fd\u96be\u4ee5\u517c\u5bb9\u5b89\u88c5\u3002\u672c\u6587\u6863\u96be\u4ee5\u517c\u987e\u6240\u6709\u8f6f\u4ef6\u7684\u6700\u65b0\u7248\u672c\uff0c\u8bf7\u81ea\u884c\u67e5\u9605\u76f8\u5173\u8d44\u6599\u3002 \u5f3a\u70c8\u5efa\u8bae\u5b89\u88c5\u8f6f\u4ef6\u5217\u8868 \u8f6f\u4ef6\u540d\u79f0 \u672c\u673a\u6d4b\u8bd5\u7248\u672c\u53f7\uff082022\u5e74\uff09 2025\u5e74\u7248\u672c\uff0c\u672a\u6d4b\u8bd5 \u5907\u6ce8 Ubuntu 18.04 24.04 \u64cd\u4f5c\u7cfb\u7edf\uff0c\u63a8\u8350 Python 3.7.16 3.12 \u5f00\u53d1\u8bed\u8a00\uff0c\u5fc5\u987b CUDA 11.4 12.9 \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff0c\u5fc5\u987b cuDNN 8.8 8.9 \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff0c\u5fc5\u987b TensorRT 8.6 10.13 \u63a8\u7406\u52a0\u901f\uff0c\u5fc5\u987b OpenCV-Python 4.8.0 4.12.0 \u56fe\u50cf\u5904\u7406\uff0c\u5fc5\u987b TensorFlow 2.7.0 2.16.0 DANNCE \u6a21\u578b\uff0c\u5fc5\u987b PyTorch 1.11.0 2.7.1 \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff0c\u5fc5\u987b Docker 24.0.6 28.3.0 \u5bb9\u5668\u5316\uff0c\u7528\u4e8e Mediamtx FFmpeg 4.x 6.x \u89c6\u9891\u8bfb\u5199 Mediamtx - - \u89c6\u9891\u6d41\u670d\u52a1\u5668\uff0c\u7528\u4e8e\u95ed\u73af\u884c\u4e3a\u5e72\u9884 \u6d4b\u8bd5\u5b89\u88c5\u73af\u5883 \u6240\u6709\u8f6f\u4ef6\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u9700\u8981\u8fdb\u884c\u6d4b\u8bd5\uff0c\u4ee5\u786e\u4fdd\u5b89\u88c5\u6210\u529f\u3002\u6d4b\u8bd5\u65b9\u6cd5\u5982\u4e0b\uff1a \u6d4b\u8bd5 nvidia cuda driver $ nvidia-smi \u6d4b\u8bd5 Nvidia Cuda Compiler $ nvcc --version \u6d4b\u8bd5 TensorRT \u547d\u4ee4\u884c\u5de5\u5177 $ trtexec --onnx = /path/to/model.onnx --saveEngine = /path/to/model.engine \u6d4b\u8bd5 polygraphy (NVIDIA \u5b98\u65b9\u5de5\u5177) \u547d\u4ee4\u884c\u5de5\u5177 $ polygraphy inspect model --onnx = /path/to/model.onnx \u6d4b\u8bd5 FFmpeg \u547d\u4ee4\u884c\u5de5\u5177 # ffmpeg generate a 640x480 video, 30 fps, 1 minute $ ffmpeg -f lavfi -i testsrc = duration = 60 :size = 640x480:rate = 30 -c:v libx264 -pix_fmt yuv420p -f mp4 /path/to/test.mp4 # convert it to hevc by NVIDIA HEVC encoder $ ffmpeg -i /path/to/test.mp4 -c:v hevc_nvenc -pix_fmt yuv420p -f mp4 /path/to/test_hevc.mp4 \u6d4b\u8bd5 Docker \u547d\u4ee4\u884c\u5de5\u5177 $ docker run hello-world $ docker run --rm -it -e MTX_PROTOCOLS = tcp -p 8554 :8554 -p 1935 :1935 bluenviron/mediamtx \u4e09\u65b9\u6df1\u5ea6\u5b66\u4e60\u5de5\u5177\u5305 1. OPEN-MMLAB/MMDETECTION \u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u63d0\u4f9b\u4e86 MaskRCNN \u7684\u5f00\u6e90\u9879\u76ee\uff0c\u7528\u4e8e\u76ee\u6807\u68c0\u6d4b\u548c\u5206\u5272\u3002\u6211\u4eec\u8fdb\u884c\u4e86 fork (2022\u5e74\uff09\uff0c\u5e76\u6dfb\u52a0\u4e86\u81ea\u5b9a\u4e49\u7684\u6a21\u578b\u548c\u914d\u7f6e\u6587\u4ef6\uff0c\u4ee5\u5b9e\u73b0\u591a\u5927\u9f20\u5206\u5272\u3002 \u5b89\u88c5\u65b9\u6cd5\u8bf7\u53c2\u8003 MMdetection \u7684 \u5b98\u65b9\u6587\u6863 \u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/mmdetection.git \u91cd\u8981\u8b66\u544a \u6211\u4eec fork \u7684\u662f MMDET 1.x \u7248\u672c\uff0c\u76ee\u524d\u652f\u6301 python3.7\uff1b\u5b98\u7f51\u6700\u65b0\u7684 MMDET \u662f 3.x \u7248\u672c\uff0c\u53ef\u80fd\u5b58\u5728\u4e25\u91cd\u7684\u517c\u5bb9\u6027\u95ee\u9898\u3002\u8bf7\u6839\u636e\u5b9e\u9645\u9700\u6c42\u9009\u62e9\u5408\u9002\u7684\u7248\u672c\u3002 2. OPEN-MMLAB/MMPOSE \u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u63d0\u4f9b\u4e86 MaskRCNN \u7684\u5f00\u6e90\u9879\u76ee\uff0c\u7528\u4e8e\u4eba\u4f53\u59ff\u6001\u5173\u952e\u70b9\u68c0\u6d4b\u3002\u6211\u4eec\u8fdb\u884c\u4e86 fork\uff082022\u5e74\uff09\uff0c\u5e76\u6dfb\u52a0\u4e86\u81ea\u5b9a\u4e49\u7684\u6a21\u578b\u548c\u914d\u7f6e\u6587\u4ef6\uff0c\u4ee5\u5b9e\u73b0\u5c0f\u7403\u68c0\u6d4b\u3002 \u5b89\u88c5\u65b9\u6cd5\u8bf7\u53c2\u8003 MMpose \u7684 \u5b98\u65b9\u6587\u6863 \u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/mmpose.git \u91cd\u8981\u8b66\u544a \u6211\u4eec fork \u7684\u662f MMPOSE 0.x \u7248\u672c\u3002\u65b0\u7248\u672c\u548c\u73af\u5883\u53ef\u80fd\u5b58\u5728\u517c\u5bb9\u6027\u95ee\u9898\u3002\u8bf7\u6839\u636e\u5b9e\u9645\u9700\u6c42\u9009\u62e9\u5408\u9002\u7684\u7248\u672c\u3002 3. YOLO-v8 \u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u76ee\u6807\u68c0\u6d4b\uff0c\u5b9e\u4f8b\u5206\u5272\u7684\u5f00\u6e90\u9879\u76ee\u3002\u6211\u4eec\u8fdb\u884c\u4e86 fork\uff082024\u5e74\uff09\uff0c\u5e76\u6dfb\u52a0\u4e86\u81ea\u5b9a\u4e49\u7684\u6a21\u578b\u548c\u914d\u7f6e\u6587\u4ef6\uff0c\u4ee5\u5b9e\u73b0\u5b9e\u65f6\u591a\u5927\u9f20\u5206\u5272\u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/ultralytics.git \u91cd\u8981\u8b66\u544a \u6211\u4eec fork \u7684\u7248\u672c\uff0c\u4e0e\u6700\u65b0\u7248\u672c\u53ef\u80fd\u5b58\u5728\u517c\u5bb9\u6027\u95ee\u9898\u3002\u8bf7\u6839\u636e\u5b9e\u9645\u9700\u6c42\u9009\u62e9\u5408\u9002\u7684\u7248\u672c\u3002 4. DANNCE \u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u591a\u89c6\u89d2\u52a8\u7269\u59ff\u6001\u4f30\u8ba1\u7684\u5e93\u3002\u6211\u4eec\u8fdb\u884c\u4e86 fork\uff082022\u5e74\uff09\uff0c\u5e76\u6dfb\u52a0\u4e86\u81ea\u5b9a\u4e49\u7684\u6a21\u578b\u548c\u914d\u7f6e\u6587\u4ef6\uff0c\u4ee5\u5b9e\u73b0\u5b9e\u65f6\u591a\u5927\u9f203D\u5173\u952e\u70b9\u8bc6\u522b\u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/dannce.git \u91cd\u8981\u8b66\u544a \u6211\u4eec fork \u7684\u7248\u672c\uff0c\u4e0e\u6700\u65b0\u7248\u672c\u53ef\u80fd\u5b58\u5728\u517c\u5bb9\u6027\u95ee\u9898\u3002\u800c\u4e14\uff0c\u8be5\u5e93\u7684\u9884\u6d4b\u7cbe\u5ea6\u9ad8\uff0c\u4f46\u901f\u5ea6\u6162\u3002\u6211\u4eec\u8fdb\u884c\u4e86\u901f\u5ea6\u4f18\u5316\uff0c\u5bfc\u81f4\u4e0e\u539f\u59cb\u4ee3\u7801\u5b58\u5728\u4e00\u4e9b\u5dee\u5f02\uff0c\u4ee5\u53ca\u66f4\u591a\u7684\u517c\u5bb9\u6027\u95ee\u9898\u3002\u5b89\u88c5\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6211\u4eec\u6b63\u5728\u4f18\u5316\u5b89\u88c5\u6587\u6863\u3002 5. SmoothNet \u6a21\u578b \u8fd9\u662f\u4e00\u4e2a\u59ff\u6001\u65f6\u95f4\u5e73\u6ed1\u7684\u5e93\u3002\u6211\u4eec\u8fdb\u884c\u4e86 fork\uff082022\u5e74\uff09\uff0c\u5e76\u6dfb\u52a0\u4e86\u81ea\u5b9a\u4e49\u7684\u6a21\u578b\u548c\u914d\u7f6e\u6587\u4ef6\uff0c\u4ee5\u5b9e\u73b0\u5b9e\u65f6\u591a\u5927\u9f203D\u5173\u952e\u70b9\u5e73\u6ed1\u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/SmoothNet.git \u91cd\u8981\u8b66\u544a \u6211\u4eec fork \u7684\u7248\u672c\uff0c\u4e0e\u6700\u65b0\u7248\u672c\u53ef\u80fd\u5b58\u5728\u517c\u5bb9\u6027\u95ee\u9898\u3002\u8bf7\u6839\u636e\u5b9e\u9645\u9700\u6c42\u9009\u62e9\u5408\u9002\u7684\u7248\u672c\u3002 \u5b89\u88c5\u672c\u9879\u76ee\u521b\u5efa\u548c\u6539\u9020\u7684 python \u5305 1. LILAB \u5206\u6790\u5de5\u5177\u5305 \u5305\u542b\u4e86\u5e38\u89c1\u7684\u5206\u6790\u5de5\u5177\uff0c\u5982\u76f8\u673a\u6807\u5b9a\u6d41\u7a0b\uff0c\u5927\u9f20\u5206\u5272\u3001\u59ff\u6001\u4f30\u8ba1\u6d41\u7a0b\uff0c\u884c\u4e3a\u8bc6\u522b\u6d41\u7a0b\uff0c\u5927\u6570\u636e\u6316\u6398\u76f8\u5173\u5de5\u5177\u7b49\u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/LILAB-py.git \u5b89\u88c5\u65b9\u6cd5\uff1a git clone https://github.com/chenxinfeng4/LILAB-py.git cd LILAB-py pip install -e . \u91cd\u8981\u8b66\u544a \u5305\u542b\u8bb8\u591a\u6d41\u7a0b\u5de5\u5177\uff0c\u4f9d\u8d56\u8fc7\u4e8e\u5e9e\u5927\uff0c\u56e0\u6b64\u4e0d\u8fdb\u884c\u81ea\u52a8\u4f9d\u8d56\u5b89\u88c5\u3002\u5982\u679c import \u62a5\u9519\uff0c\u5219\u9700\u8981\u624b\u52a8\u5b89\u88c5\u4f9d\u8d56\u3002 2. FFMPEGCV \u5de5\u5177\u5305 GPU \u52a0\u901f\u7684\u89c6\u9891\u5904\u7406\u5de5\u5177\u5305\uff0c\u65b9\u4fbf\u591a\u76f8\u673a\u89c6\u9891\u8bfb\u5199\uff0c\u67d0\u4e9b\u573a\u666f\u4e0b\u6bd4 OpenCV \u5feb 9 \u500d\u3002\u6211\u5f00\u6e90\u4e4b\u540e\uff0c\u5e74\u4e0b\u8f7d\u91cf 7 \u4e07\u6b21 \u3002\u67e5\u770b\u5bf9\u5e94 \u6587\u6863 \u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/ffmpegcv.git \u5b89\u88c5\u65b9\u6cd5\uff1a pip install ffmpegcv \u91cd\u8981\u8b66\u544a \u4f7f\u7528 GPU \u52a0\u901f\uff0c\u9700\u8981\u6709 NVIDIA-driver\u3002 3. multiview_calib \u5de5\u5177\u5305 \u76f8\u673a\u5916\u53c2\u6807\u5b9a\uff08\u5c0f\u7403\u6807\u5b9a\uff09\u7684\u5de5\u5177\u5305\u3002\u5728\u4e09\u65b9\u5e93\u57fa\u7840\u4e0a\uff0c\u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u5e76\u6dfb\u52a0\u4e86\u81ea\u5b9a\u4e49\u7684\u6807\u5b9a\u6d41\u7a0b\u3002\u67e5\u770b\u5bf9\u5e94 \u6587\u6863 \u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/multiview_calib.git \u5b89\u88c5\u65b9\u6cd5\uff1a pip install git+https://github.com/chenxinfeng4/multiview_calib.git # \u5c0f\u7403\u6807\u5b9a\u7b80\u6613\u6559\u7a0b git clone https://github.com/chenxinfeng4/multiview_ball_calib 4. \u5176\u5b83\u6539\u9020\u5de5\u5177\u5305 torch2trt : torch2trt \u6539\u9020\uff0c\u652f\u6301 engine \u6587\u4ef6\u76f4\u63a5\u8f7d\u5165\u3002 pip install git+https://github.com/chenxinfeng4/torch2trt cocoapi : \u5c06 cocoapi \u8fdb\u884c\u591a\u7ebf\u7a0b\u6539\u9020\uff0c\u63d0\u5347\u901f\u5ea6\u3002 pip install git+https://github.com/chenxinfeng4/cocoapi mmdetection-to-tensorrt : Mask-RCNN \u6a21\u578b\u8f6c\u6362\u4e3a tensorrt \u6a21\u578b\u3002 pip install git+https://github.com/chenxinfeng4/mmdetection-to-tensorrt","title":"\u670d\u52a1\u5668\u73af\u5883\u914d\u7f6e"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_1","text":"\u53ea\u6709\u914d\u7f6e\u597d\u670d\u52a1\u5668\u73af\u5883\uff0c\u624d\u80fd\u987a\u5229\u8fd0\u884c\u672c\u9879\u76ee\uff0c\u5305\u62ec\u6a21\u578b\u8bad\u7ec3\u3001\u63a8\u7406\uff0c\u52a8\u7269\u884c\u4e3a\u5206\u6790\u6d41\u7a0b\u3002 \u8bba\u6587\u56fe\u8868\u590d\u73b0\ud83d\udd17 \u4e0d\u9700\u8981\u914d\u7f6e\u670d\u52a1\u5668\u73af\u5883\uff0c\u53ea\u9700\u8981\u914d\u7f6e\u672c\u5730\u73af\u5883\u5373\u53ef\u3002 \u670d\u52a1\u5668\u73af\u5883\u914d\u7f6e\u6ce8\u610f \u6df1\u5ea6\u5b66\u4e60\u73af\u5883\u662f\u672c\u9879\u76ee\u7684\u6838\u5fc3\u57fa\u7840\u3002\u6211\u4eec\u7406\u89e3\u73af\u5883\u642d\u5efa\u53ef\u80fd\u662f\u4e00\u4e2a\u590d\u6742\u4e14\u5177\u6709\u6311\u6218\u6027\u7684\u8fc7\u7a0b\uff0c\u8fd9\u4e5f\u662f\u6574\u4e2aAI\u9886\u57df\u666e\u904d\u9762\u4e34\u7684\u96be\u9898\u3002 \u867d\u7136\u6211\u4eec\u5728\u6301\u7eed\u4f18\u5316\u90e8\u7f72\u6d41\u7a0b\uff0c\u4f46\u5f53\u524d\u9879\u76ee\u4ecd\u5b58\u5728\u4e00\u4e9b\u7248\u672c\u517c\u5bb9\u6027\u95ee\u9898\u3002\u6211\u4eec\u5efa\u8bae\u60a8\u5728\u914d\u7f6e\u73af\u5883\u65f6\u4fdd\u6301\u8010\u5fc3\uff0c\u5e76\u5177\u5907\u4e00\u5b9a\u7684\u6280\u672f\u94bb\u7814\u7cbe\u795e\uff0c\u4ee5\u5e94\u5bf9\u53ef\u80fd\u51fa\u73b0\u7684\u6311\u6218\u3002","title":"\u670d\u52a1\u5668\u73af\u5883\u914d\u7f6e"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_2","text":"\u670d\u52a1\u5668\u786c\u4ef6\u914d\u7f6e\u5305\u62ec\uff1a CPU : Intel Xeon 4314 \u5185\u5b58 : 256 GB GPU : 4 \u5757 NVIDIA GeForce RTX 3090 \u5b58\u50a8 : 1 TB \u56fa\u6001\u786c\u76d8 + 8 TB \u673a\u68b0\u786c\u76d8","title":"\u786c\u4ef6\u914d\u7f6e"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_3","text":"\u8f6f\u4ef6\u73af\u5883\u5305\u62ec\uff1a \u64cd\u4f5c\u7cfb\u7edf : Ubuntu 18.04 \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 : CUDA 11.4\u3001cuDNN 8.8\u3001TensorRT 8.6 \u5f00\u53d1\u5de5\u5177 : Python 3.7.16\u3001OpenCV-Python 4.8.0\u3001TensorFlow 2.7.0\u3001PyTorch 1.11.0 \u7528\u4e8e\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u8bad\u7ec3\u548c\u6570\u636e\u5206\u6790\u3002 \u91cd\u8981\u8b66\u544a \u76ee\u524d\u4ec5\u652f\u6301 Ubuntu \u7cfb\u7edf\u548c NVIDIA \u663e\u5361\uff0c\u5176\u4ed6\u7cfb\u7edf\u8bf7\u81ea\u884c\u67e5\u9605\u76f8\u5173\u8d44\u6599\u3002 \u91cd\u8981\u8b66\u544a \u7531\u4e8e\u8f6f\u4ef6\u662f\u57282019\u5e74\u914d\u7f6e\u7684\uff0c\u56e0\u6b64\u90e8\u5206\u8f6f\u4ef6\u7248\u672c\u53ef\u80fd\u5df2\u7ecf\u8fc7\u65f6\uff0c\u5efa\u8bae\u6839\u636e\u5b9e\u9645\u9700\u6c42\u9009\u62e9\u6700\u65b0\u7248\u672c\u3002\u5927\u90e8\u5206 Python \u5e93\u53ef\u4ee5\u5728 pip \u548c conda \u4e2d\u627e\u5230\uff0c\u4f46\u662f\u90e8\u5206\u5e93\u53ef\u80fd\u96be\u4ee5\u517c\u5bb9\u5b89\u88c5\u3002\u672c\u6587\u6863\u96be\u4ee5\u517c\u987e\u6240\u6709\u8f6f\u4ef6\u7684\u6700\u65b0\u7248\u672c\uff0c\u8bf7\u81ea\u884c\u67e5\u9605\u76f8\u5173\u8d44\u6599\u3002","title":"\u8f6f\u4ef6\u73af\u5883"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_4","text":"\u8f6f\u4ef6\u540d\u79f0 \u672c\u673a\u6d4b\u8bd5\u7248\u672c\u53f7\uff082022\u5e74\uff09 2025\u5e74\u7248\u672c\uff0c\u672a\u6d4b\u8bd5 \u5907\u6ce8 Ubuntu 18.04 24.04 \u64cd\u4f5c\u7cfb\u7edf\uff0c\u63a8\u8350 Python 3.7.16 3.12 \u5f00\u53d1\u8bed\u8a00\uff0c\u5fc5\u987b CUDA 11.4 12.9 \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff0c\u5fc5\u987b cuDNN 8.8 8.9 \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff0c\u5fc5\u987b TensorRT 8.6 10.13 \u63a8\u7406\u52a0\u901f\uff0c\u5fc5\u987b OpenCV-Python 4.8.0 4.12.0 \u56fe\u50cf\u5904\u7406\uff0c\u5fc5\u987b TensorFlow 2.7.0 2.16.0 DANNCE \u6a21\u578b\uff0c\u5fc5\u987b PyTorch 1.11.0 2.7.1 \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff0c\u5fc5\u987b Docker 24.0.6 28.3.0 \u5bb9\u5668\u5316\uff0c\u7528\u4e8e Mediamtx FFmpeg 4.x 6.x \u89c6\u9891\u8bfb\u5199 Mediamtx - - \u89c6\u9891\u6d41\u670d\u52a1\u5668\uff0c\u7528\u4e8e\u95ed\u73af\u884c\u4e3a\u5e72\u9884","title":"\u5f3a\u70c8\u5efa\u8bae\u5b89\u88c5\u8f6f\u4ef6\u5217\u8868"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_5","text":"\u6240\u6709\u8f6f\u4ef6\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u9700\u8981\u8fdb\u884c\u6d4b\u8bd5\uff0c\u4ee5\u786e\u4fdd\u5b89\u88c5\u6210\u529f\u3002\u6d4b\u8bd5\u65b9\u6cd5\u5982\u4e0b\uff1a","title":"\u6d4b\u8bd5\u5b89\u88c5\u73af\u5883"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#nvidia-cuda-driver","text":"$ nvidia-smi","title":"\u6d4b\u8bd5 nvidia cuda driver"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#nvidia-cuda-compiler","text":"$ nvcc --version","title":"\u6d4b\u8bd5 Nvidia Cuda Compiler"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#tensorrt","text":"$ trtexec --onnx = /path/to/model.onnx --saveEngine = /path/to/model.engine","title":"\u6d4b\u8bd5 TensorRT \u547d\u4ee4\u884c\u5de5\u5177"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#polygraphy-nvidia","text":"$ polygraphy inspect model --onnx = /path/to/model.onnx","title":"\u6d4b\u8bd5 polygraphy (NVIDIA \u5b98\u65b9\u5de5\u5177) \u547d\u4ee4\u884c\u5de5\u5177"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ffmpeg","text":"# ffmpeg generate a 640x480 video, 30 fps, 1 minute $ ffmpeg -f lavfi -i testsrc = duration = 60 :size = 640x480:rate = 30 -c:v libx264 -pix_fmt yuv420p -f mp4 /path/to/test.mp4 # convert it to hevc by NVIDIA HEVC encoder $ ffmpeg -i /path/to/test.mp4 -c:v hevc_nvenc -pix_fmt yuv420p -f mp4 /path/to/test_hevc.mp4","title":"\u6d4b\u8bd5 FFmpeg \u547d\u4ee4\u884c\u5de5\u5177"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#docker","text":"$ docker run hello-world $ docker run --rm -it -e MTX_PROTOCOLS = tcp -p 8554 :8554 -p 1935 :1935 bluenviron/mediamtx","title":"\u6d4b\u8bd5 Docker \u547d\u4ee4\u884c\u5de5\u5177"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_6","text":"","title":"\u4e09\u65b9\u6df1\u5ea6\u5b66\u4e60\u5de5\u5177\u5305"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#1-open-mmlabmmdetection","text":"\u8fd9\u662f\u4e00\u4e2a\u63d0\u4f9b\u4e86 MaskRCNN \u7684\u5f00\u6e90\u9879\u76ee\uff0c\u7528\u4e8e\u76ee\u6807\u68c0\u6d4b\u548c\u5206\u5272\u3002\u6211\u4eec\u8fdb\u884c\u4e86 fork (2022\u5e74\uff09\uff0c\u5e76\u6dfb\u52a0\u4e86\u81ea\u5b9a\u4e49\u7684\u6a21\u578b\u548c\u914d\u7f6e\u6587\u4ef6\uff0c\u4ee5\u5b9e\u73b0\u591a\u5927\u9f20\u5206\u5272\u3002 \u5b89\u88c5\u65b9\u6cd5\u8bf7\u53c2\u8003 MMdetection \u7684 \u5b98\u65b9\u6587\u6863 \u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/mmdetection.git \u91cd\u8981\u8b66\u544a \u6211\u4eec fork \u7684\u662f MMDET 1.x \u7248\u672c\uff0c\u76ee\u524d\u652f\u6301 python3.7\uff1b\u5b98\u7f51\u6700\u65b0\u7684 MMDET \u662f 3.x \u7248\u672c\uff0c\u53ef\u80fd\u5b58\u5728\u4e25\u91cd\u7684\u517c\u5bb9\u6027\u95ee\u9898\u3002\u8bf7\u6839\u636e\u5b9e\u9645\u9700\u6c42\u9009\u62e9\u5408\u9002\u7684\u7248\u672c\u3002","title":"1. OPEN-MMLAB/MMDETECTION \u6a21\u578b"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#2-open-mmlabmmpose","text":"\u8fd9\u662f\u4e00\u4e2a\u63d0\u4f9b\u4e86 MaskRCNN \u7684\u5f00\u6e90\u9879\u76ee\uff0c\u7528\u4e8e\u4eba\u4f53\u59ff\u6001\u5173\u952e\u70b9\u68c0\u6d4b\u3002\u6211\u4eec\u8fdb\u884c\u4e86 fork\uff082022\u5e74\uff09\uff0c\u5e76\u6dfb\u52a0\u4e86\u81ea\u5b9a\u4e49\u7684\u6a21\u578b\u548c\u914d\u7f6e\u6587\u4ef6\uff0c\u4ee5\u5b9e\u73b0\u5c0f\u7403\u68c0\u6d4b\u3002 \u5b89\u88c5\u65b9\u6cd5\u8bf7\u53c2\u8003 MMpose \u7684 \u5b98\u65b9\u6587\u6863 \u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/mmpose.git \u91cd\u8981\u8b66\u544a \u6211\u4eec fork \u7684\u662f MMPOSE 0.x \u7248\u672c\u3002\u65b0\u7248\u672c\u548c\u73af\u5883\u53ef\u80fd\u5b58\u5728\u517c\u5bb9\u6027\u95ee\u9898\u3002\u8bf7\u6839\u636e\u5b9e\u9645\u9700\u6c42\u9009\u62e9\u5408\u9002\u7684\u7248\u672c\u3002","title":"2. OPEN-MMLAB/MMPOSE \u6a21\u578b"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#3-yolo-v8","text":"\u8fd9\u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u76ee\u6807\u68c0\u6d4b\uff0c\u5b9e\u4f8b\u5206\u5272\u7684\u5f00\u6e90\u9879\u76ee\u3002\u6211\u4eec\u8fdb\u884c\u4e86 fork\uff082024\u5e74\uff09\uff0c\u5e76\u6dfb\u52a0\u4e86\u81ea\u5b9a\u4e49\u7684\u6a21\u578b\u548c\u914d\u7f6e\u6587\u4ef6\uff0c\u4ee5\u5b9e\u73b0\u5b9e\u65f6\u591a\u5927\u9f20\u5206\u5272\u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/ultralytics.git \u91cd\u8981\u8b66\u544a \u6211\u4eec fork \u7684\u7248\u672c\uff0c\u4e0e\u6700\u65b0\u7248\u672c\u53ef\u80fd\u5b58\u5728\u517c\u5bb9\u6027\u95ee\u9898\u3002\u8bf7\u6839\u636e\u5b9e\u9645\u9700\u6c42\u9009\u62e9\u5408\u9002\u7684\u7248\u672c\u3002","title":"3. YOLO-v8 \u6a21\u578b"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#4-dannce","text":"\u8fd9\u662f\u4e00\u4e2a\u591a\u89c6\u89d2\u52a8\u7269\u59ff\u6001\u4f30\u8ba1\u7684\u5e93\u3002\u6211\u4eec\u8fdb\u884c\u4e86 fork\uff082022\u5e74\uff09\uff0c\u5e76\u6dfb\u52a0\u4e86\u81ea\u5b9a\u4e49\u7684\u6a21\u578b\u548c\u914d\u7f6e\u6587\u4ef6\uff0c\u4ee5\u5b9e\u73b0\u5b9e\u65f6\u591a\u5927\u9f203D\u5173\u952e\u70b9\u8bc6\u522b\u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/dannce.git \u91cd\u8981\u8b66\u544a \u6211\u4eec fork \u7684\u7248\u672c\uff0c\u4e0e\u6700\u65b0\u7248\u672c\u53ef\u80fd\u5b58\u5728\u517c\u5bb9\u6027\u95ee\u9898\u3002\u800c\u4e14\uff0c\u8be5\u5e93\u7684\u9884\u6d4b\u7cbe\u5ea6\u9ad8\uff0c\u4f46\u901f\u5ea6\u6162\u3002\u6211\u4eec\u8fdb\u884c\u4e86\u901f\u5ea6\u4f18\u5316\uff0c\u5bfc\u81f4\u4e0e\u539f\u59cb\u4ee3\u7801\u5b58\u5728\u4e00\u4e9b\u5dee\u5f02\uff0c\u4ee5\u53ca\u66f4\u591a\u7684\u517c\u5bb9\u6027\u95ee\u9898\u3002\u5b89\u88c5\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6211\u4eec\u6b63\u5728\u4f18\u5316\u5b89\u88c5\u6587\u6863\u3002","title":"4. DANNCE \u6a21\u578b"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#5-smoothnet","text":"\u8fd9\u662f\u4e00\u4e2a\u59ff\u6001\u65f6\u95f4\u5e73\u6ed1\u7684\u5e93\u3002\u6211\u4eec\u8fdb\u884c\u4e86 fork\uff082022\u5e74\uff09\uff0c\u5e76\u6dfb\u52a0\u4e86\u81ea\u5b9a\u4e49\u7684\u6a21\u578b\u548c\u914d\u7f6e\u6587\u4ef6\uff0c\u4ee5\u5b9e\u73b0\u5b9e\u65f6\u591a\u5927\u9f203D\u5173\u952e\u70b9\u5e73\u6ed1\u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/SmoothNet.git \u91cd\u8981\u8b66\u544a \u6211\u4eec fork \u7684\u7248\u672c\uff0c\u4e0e\u6700\u65b0\u7248\u672c\u53ef\u80fd\u5b58\u5728\u517c\u5bb9\u6027\u95ee\u9898\u3002\u8bf7\u6839\u636e\u5b9e\u9645\u9700\u6c42\u9009\u62e9\u5408\u9002\u7684\u7248\u672c\u3002","title":"5. SmoothNet \u6a21\u578b"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#python","text":"","title":"\u5b89\u88c5\u672c\u9879\u76ee\u521b\u5efa\u548c\u6539\u9020\u7684 python \u5305"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#1-lilab","text":"\u5305\u542b\u4e86\u5e38\u89c1\u7684\u5206\u6790\u5de5\u5177\uff0c\u5982\u76f8\u673a\u6807\u5b9a\u6d41\u7a0b\uff0c\u5927\u9f20\u5206\u5272\u3001\u59ff\u6001\u4f30\u8ba1\u6d41\u7a0b\uff0c\u884c\u4e3a\u8bc6\u522b\u6d41\u7a0b\uff0c\u5927\u6570\u636e\u6316\u6398\u76f8\u5173\u5de5\u5177\u7b49\u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/LILAB-py.git \u5b89\u88c5\u65b9\u6cd5\uff1a git clone https://github.com/chenxinfeng4/LILAB-py.git cd LILAB-py pip install -e . \u91cd\u8981\u8b66\u544a \u5305\u542b\u8bb8\u591a\u6d41\u7a0b\u5de5\u5177\uff0c\u4f9d\u8d56\u8fc7\u4e8e\u5e9e\u5927\uff0c\u56e0\u6b64\u4e0d\u8fdb\u884c\u81ea\u52a8\u4f9d\u8d56\u5b89\u88c5\u3002\u5982\u679c import \u62a5\u9519\uff0c\u5219\u9700\u8981\u624b\u52a8\u5b89\u88c5\u4f9d\u8d56\u3002","title":"1. LILAB \u5206\u6790\u5de5\u5177\u5305"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#2-ffmpegcv","text":"GPU \u52a0\u901f\u7684\u89c6\u9891\u5904\u7406\u5de5\u5177\u5305\uff0c\u65b9\u4fbf\u591a\u76f8\u673a\u89c6\u9891\u8bfb\u5199\uff0c\u67d0\u4e9b\u573a\u666f\u4e0b\u6bd4 OpenCV \u5feb 9 \u500d\u3002\u6211\u5f00\u6e90\u4e4b\u540e\uff0c\u5e74\u4e0b\u8f7d\u91cf 7 \u4e07\u6b21 \u3002\u67e5\u770b\u5bf9\u5e94 \u6587\u6863 \u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/ffmpegcv.git \u5b89\u88c5\u65b9\u6cd5\uff1a pip install ffmpegcv \u91cd\u8981\u8b66\u544a \u4f7f\u7528 GPU \u52a0\u901f\uff0c\u9700\u8981\u6709 NVIDIA-driver\u3002","title":"2. FFMPEGCV \u5de5\u5177\u5305"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#3-multiview_calib","text":"\u76f8\u673a\u5916\u53c2\u6807\u5b9a\uff08\u5c0f\u7403\u6807\u5b9a\uff09\u7684\u5de5\u5177\u5305\u3002\u5728\u4e09\u65b9\u5e93\u57fa\u7840\u4e0a\uff0c\u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u5e76\u6dfb\u52a0\u4e86\u81ea\u5b9a\u4e49\u7684\u6807\u5b9a\u6d41\u7a0b\u3002\u67e5\u770b\u5bf9\u5e94 \u6587\u6863 \u3002 \u4ee3\u7801\u5730\u5740: https://github.com/chenxinfeng4/multiview_calib.git \u5b89\u88c5\u65b9\u6cd5\uff1a pip install git+https://github.com/chenxinfeng4/multiview_calib.git # \u5c0f\u7403\u6807\u5b9a\u7b80\u6613\u6559\u7a0b git clone https://github.com/chenxinfeng4/multiview_ball_calib","title":"3. multiview_calib \u5de5\u5177\u5305"},{"location":"%E8%AE%BE%E5%A4%87%E7%BB%84%E8%A3%85%E5%92%8C%E6%B8%85%E5%8D%95/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#4","text":"torch2trt : torch2trt \u6539\u9020\uff0c\u652f\u6301 engine \u6587\u4ef6\u76f4\u63a5\u8f7d\u5165\u3002 pip install git+https://github.com/chenxinfeng4/torch2trt cocoapi : \u5c06 cocoapi \u8fdb\u884c\u591a\u7ebf\u7a0b\u6539\u9020\uff0c\u63d0\u5347\u901f\u5ea6\u3002 pip install git+https://github.com/chenxinfeng4/cocoapi mmdetection-to-tensorrt : Mask-RCNN \u6a21\u578b\u8f6c\u6362\u4e3a tensorrt \u6a21\u578b\u3002 pip install git+https://github.com/chenxinfeng4/mmdetection-to-tensorrt","title":"4. \u5176\u5b83\u6539\u9020\u5de5\u5177\u5305"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/application/","text":"\u95ed\u73af\u884c\u4e3a\u63a7\u5236 \u26a1\ufe0f \u5229\u7528\u5149\u9057\u4f20\u6280\u672f\u5b9e\u73b0\u7cbe\u51c6\u884c\u4e3a\u63a7\u5236\uff0c\u901a\u8fc7\u5b9e\u65f6\u884c\u4e3a\u5206\u6790\u5f62\u6210\u95ed\u73af\u53cd\u9988\u7cfb\u7edf\u3002 \u2753 \u6311\u6218 \uff1a\u5b9e\u65f6\u884c\u4e3a\u8bc6\u522b\u8ba1\u7b97\u91cf\u5927\uff0c\u5b8c\u6574\u6a21\u578b\u96be\u4ee5\u5728\u5b9e\u9a8c\u73af\u5883\u90e8\u7f72\uff1b\u8fb9\u7f18\u8bbe\u5907\u5c0f\u6a21\u578b\u7cbe\u5ea6\u4e0d\u8db3\uff1b\u975e\u7279\u5f02\u6027\u591a\u5df4\u80fa\u523a\u6fc0\u5bf9\u5b64\u72ec\u75c7\u884c\u4e3a\u6539\u5584\u6548\u679c\u6709\u9650\u3002 \ud83d\udca1 \u89e3\u51b3\u65b9\u6848 \uff1a\u91c7\u7528\u4e91\u8ba1\u7b97\u8fdb\u884c\u884c\u4e3a\u8bc6\u522b\uff0c\u5b9e\u9a8c\u89c6\u9891\u4e0a\u4f20\u81f3\u4e91\u5e73\u53f0\u5904\u7406\u5e76\u8fd4\u56de\u7ed3\u679c\u3002\u901a\u8fc7\u6a21\u578b\u8f7b\u91cf\u5316\u548cGPU\u6d41\u6c34\u7ebf\u5e76\u884c\u4f18\u5316\u964d\u4f4e\u5ef6\u8fdf\uff0c\u5e76\u5efa\u7acb\u5b64\u72ec\u75c7\u884c\u4e3a-\u5149\u9057\u4f20\u5f3a\u5316\u5b66\u4e60\u8303\u5f0f\uff0c\u5728\u8bc6\u522b\u5230\u73a9\u800d\u884c\u4e3a\u65f6\u7ed9\u4e88\u7279\u5f02\u6027\u591a\u5df4\u80fa\u5149\u523a\u6fc0\u3002 \ud83c\udf89 \u6548\u679c \uff1a\u884c\u4e3a\u8bc6\u522b\u5ef6\u8fdf\u4ec5266ms\uff0c\u51c6\u786e\u7387\u8fbe80%\u3002\u7279\u5f02\u6027\u5149\u9057\u4f20\u5f3a\u5316\u5b66\u4e60\u663e\u8457\u6539\u5584\u5b64\u72ec\u75c7\u5927\u9f20\uff08Shank3+/-\uff09\u7684\u73a9\u800d\u884c\u4e3a\uff0c\u589e\u5f3a\u793e\u4ea4\u80fd\u529b\u5e76\u51cf\u5c11\u975e\u793e\u4ea4\u884c\u4e3a\u3002 \u8bbe\u8ba1\u539f\u7406\u548c\u7cbe\u5ea6\u6d4b\u91cf \u5c06\u884c\u4e3a\u8bc6\u522b\u6a21\u578b\u90e8\u7f72\u5728\u4e91\u7aef\uff0c\u901a\u8fc7\u5b9e\u65f6\u89c6\u9891\u6d41\u4e0a\u4f20\u5b9e\u73b0\u95ed\u73af\u884c\u4e3a\u63a7\u5236\u3002\u6a21\u578b\u7ecf\u8fc7\u8f7b\u91cf\u5316\u6539\u9020\u548cGPU\u6d41\u6c34\u7ebf\u5e76\u884c\u4f18\u5316\u4ee5\u964d\u4f4e\u8ba1\u7b97\u5ef6\u8fdf\u3002\u5149\u9057\u4f20\u6fc0\u5149\u5668\u901a\u8fc7 Arduino \u677f\u63a7\u5236\uff0c\u4ee5\u53d1\u653e40Hz 5ms, 0.5s\u523a\u6fc0\u65f6\u957f\u7684\u8109\u51b2\u5149\u523a\u6fc0\u3002 \u5b9e\u9a8c\u8bbe\u8ba1\u4e2d\uff0c\u5b9e\u9a8c\u7ec4\u5728Shank3+/-\u5927\u9f20\u4e3b\u52a8\u73a9\u800d\u65f6\u7ed9\u4e88\u591a\u5df4\u80fa\u91ca\u653e\u5149\u523a\u6fc0\uff1b\u5bf9\u7167\u7ec4\u5728\u975e\u73a9\u800d\u884c\u4e3a\u6761\u4ef6\u4e0b\u968f\u673a\u5149\u523a\u6fc0\uff0c\u4fdd\u6301\u5149\u523a\u6fc0\u603b\u91cf\u4e00\u81f4\u3002 \u6d4b\u8bd5\u7ed3\u679c\uff08n=32\u89c6\u9891\uff09\u663e\u793a\uff0c\u5b9e\u9a8c\u7ec4\u5728\u73a9\u800d\u65f6\u7ed9\u5149\u8d85\u8fc790%\uff0c\u800c\u5bf9\u7167\u7ec4\u4e0d\u8db310%\u3002\u5b9e\u9a8c\u7ec4\u7684\u5149\u523a\u6fc0\u66f4\u591a\u5206\u914d\u5230\u73a9\u800d\u76f8\u5173\u7684\u793e\u4ea4\u884c\u4e3a\uff0c\u5bf9\u7167\u7ec4\u5219\u66f4\u591a\u5206\u914d\u5230\u975e\u793e\u4ea4\u884c\u4e3a\u3002\u663e\u793a\u51fa\u95ed\u73af\u884c\u4e3a\u63a7\u5236\u7684\u7cbe\u51c6\u6027\u3002\u6700\u7ec8\u89c2\u5bdf\u5230Shank3+/-\u5927\u9f20\u7684\u73a9\u800d\u884c\u4e3a\u548c\u793e\u4ea4\u80fd\u529b\u6539\u5584\u3002","title":"\u5e94\u7528\u573a\u666f"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/application/#_1","text":"\u5229\u7528\u5149\u9057\u4f20\u6280\u672f\u5b9e\u73b0\u7cbe\u51c6\u884c\u4e3a\u63a7\u5236\uff0c\u901a\u8fc7\u5b9e\u65f6\u884c\u4e3a\u5206\u6790\u5f62\u6210\u95ed\u73af\u53cd\u9988\u7cfb\u7edf\u3002 \u2753 \u6311\u6218 \uff1a\u5b9e\u65f6\u884c\u4e3a\u8bc6\u522b\u8ba1\u7b97\u91cf\u5927\uff0c\u5b8c\u6574\u6a21\u578b\u96be\u4ee5\u5728\u5b9e\u9a8c\u73af\u5883\u90e8\u7f72\uff1b\u8fb9\u7f18\u8bbe\u5907\u5c0f\u6a21\u578b\u7cbe\u5ea6\u4e0d\u8db3\uff1b\u975e\u7279\u5f02\u6027\u591a\u5df4\u80fa\u523a\u6fc0\u5bf9\u5b64\u72ec\u75c7\u884c\u4e3a\u6539\u5584\u6548\u679c\u6709\u9650\u3002 \ud83d\udca1 \u89e3\u51b3\u65b9\u6848 \uff1a\u91c7\u7528\u4e91\u8ba1\u7b97\u8fdb\u884c\u884c\u4e3a\u8bc6\u522b\uff0c\u5b9e\u9a8c\u89c6\u9891\u4e0a\u4f20\u81f3\u4e91\u5e73\u53f0\u5904\u7406\u5e76\u8fd4\u56de\u7ed3\u679c\u3002\u901a\u8fc7\u6a21\u578b\u8f7b\u91cf\u5316\u548cGPU\u6d41\u6c34\u7ebf\u5e76\u884c\u4f18\u5316\u964d\u4f4e\u5ef6\u8fdf\uff0c\u5e76\u5efa\u7acb\u5b64\u72ec\u75c7\u884c\u4e3a-\u5149\u9057\u4f20\u5f3a\u5316\u5b66\u4e60\u8303\u5f0f\uff0c\u5728\u8bc6\u522b\u5230\u73a9\u800d\u884c\u4e3a\u65f6\u7ed9\u4e88\u7279\u5f02\u6027\u591a\u5df4\u80fa\u5149\u523a\u6fc0\u3002 \ud83c\udf89 \u6548\u679c \uff1a\u884c\u4e3a\u8bc6\u522b\u5ef6\u8fdf\u4ec5266ms\uff0c\u51c6\u786e\u7387\u8fbe80%\u3002\u7279\u5f02\u6027\u5149\u9057\u4f20\u5f3a\u5316\u5b66\u4e60\u663e\u8457\u6539\u5584\u5b64\u72ec\u75c7\u5927\u9f20\uff08Shank3+/-\uff09\u7684\u73a9\u800d\u884c\u4e3a\uff0c\u589e\u5f3a\u793e\u4ea4\u80fd\u529b\u5e76\u51cf\u5c11\u975e\u793e\u4ea4\u884c\u4e3a\u3002","title":"\u95ed\u73af\u884c\u4e3a\u63a7\u5236 \u26a1\ufe0f"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/application/#_2","text":"\u5c06\u884c\u4e3a\u8bc6\u522b\u6a21\u578b\u90e8\u7f72\u5728\u4e91\u7aef\uff0c\u901a\u8fc7\u5b9e\u65f6\u89c6\u9891\u6d41\u4e0a\u4f20\u5b9e\u73b0\u95ed\u73af\u884c\u4e3a\u63a7\u5236\u3002\u6a21\u578b\u7ecf\u8fc7\u8f7b\u91cf\u5316\u6539\u9020\u548cGPU\u6d41\u6c34\u7ebf\u5e76\u884c\u4f18\u5316\u4ee5\u964d\u4f4e\u8ba1\u7b97\u5ef6\u8fdf\u3002\u5149\u9057\u4f20\u6fc0\u5149\u5668\u901a\u8fc7 Arduino \u677f\u63a7\u5236\uff0c\u4ee5\u53d1\u653e40Hz 5ms, 0.5s\u523a\u6fc0\u65f6\u957f\u7684\u8109\u51b2\u5149\u523a\u6fc0\u3002 \u5b9e\u9a8c\u8bbe\u8ba1\u4e2d\uff0c\u5b9e\u9a8c\u7ec4\u5728Shank3+/-\u5927\u9f20\u4e3b\u52a8\u73a9\u800d\u65f6\u7ed9\u4e88\u591a\u5df4\u80fa\u91ca\u653e\u5149\u523a\u6fc0\uff1b\u5bf9\u7167\u7ec4\u5728\u975e\u73a9\u800d\u884c\u4e3a\u6761\u4ef6\u4e0b\u968f\u673a\u5149\u523a\u6fc0\uff0c\u4fdd\u6301\u5149\u523a\u6fc0\u603b\u91cf\u4e00\u81f4\u3002 \u6d4b\u8bd5\u7ed3\u679c\uff08n=32\u89c6\u9891\uff09\u663e\u793a\uff0c\u5b9e\u9a8c\u7ec4\u5728\u73a9\u800d\u65f6\u7ed9\u5149\u8d85\u8fc790%\uff0c\u800c\u5bf9\u7167\u7ec4\u4e0d\u8db310%\u3002\u5b9e\u9a8c\u7ec4\u7684\u5149\u523a\u6fc0\u66f4\u591a\u5206\u914d\u5230\u73a9\u800d\u76f8\u5173\u7684\u793e\u4ea4\u884c\u4e3a\uff0c\u5bf9\u7167\u7ec4\u5219\u66f4\u591a\u5206\u914d\u5230\u975e\u793e\u4ea4\u884c\u4e3a\u3002\u663e\u793a\u51fa\u95ed\u73af\u884c\u4e3a\u63a7\u5236\u7684\u7cbe\u51c6\u6027\u3002\u6700\u7ec8\u89c2\u5bdf\u5230Shank3+/-\u5927\u9f20\u7684\u73a9\u800d\u884c\u4e3a\u548c\u793e\u4ea4\u80fd\u529b\u6539\u5584\u3002","title":"\u8bbe\u8ba1\u539f\u7406\u548c\u7cbe\u5ea6\u6d4b\u91cf"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/","text":"\u4ee3\u7801\u6d41\u7a0b \u5f00\u53d1\u8005: Chenxinfeng, update 2025-08-16 \u95ed\u73af\u884c\u4e3a\u63a7\u5236\u7684\u4ee3\u7801\u6d41\u7a0b\u6897\u6982\u5982\u4e0b: \u4ee5\u4e0b\u662f\u5bf9\u5e94\u7684\u4ee3\u7801\u64cd\u4f5c\uff1a 1. \u542f\u52a8\u865a\u62df\u6444\u50cf\u5934\u8fdb\u884c\u65f6\u95f4\u6233\u6807\u8bb0 \u5728DAQ\u7684PC\u4e0a\u8fdb\u884c\u64cd\u4f5c\uff0cDAQ\u5b89\u88c5\u7684\u662fWindows\u7cfb\u7edf\u3002OBS Studio 29.1 \u7248\u672c\u3002OBS \u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u865a\u62df\u6444\u50cf\u5934(\"OBS Virtual Camera\")\uff0cpython\u4ee3\u7801\u4f1a\u5f80\u8fd9\u4e2a\u6444\u50cf\u5934\u5e27\u8f93\u51fa\u65f6\u95f4\u7801\uff08\u4f8b\u5982\uff0c163\uff09\u3002\u65f6\u95f4\u7801\u7684\u6570\u503c\u7531PC\u7684\u65f6\u949f\u51b3\u5b9a\uff0c\u6bcf33ms\u66f4\u65b0\u4e00\u6b21\uff0830fps \u5339\u914d\u89c6\u9891\u5e27\u7387\uff09\uff0c\u5f53\u524d\u65f6\u949f\u7684\u6570\u503c\u4e5f\u4f1a\u5b58\u50a8\u5230 10.50.7.109:20173 \u7684\u670d\u52a1\u5668\u4e0a\uff0c\u4f9b\u5176\u4ed6\u8bbe\u5907\u8bbf\u95ee\uff0c\u4ee5\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u7801\u3002 \u5728github\u4e0a\u4e0b\u8f7d\uff0c virtual_LED.py \ud83d\udd17 . \u5728\u7ec8\u7aef\u6267\u884c\u8be5\u811a\u672c\uff0c\u542f\u52a8\u865a\u62df\u6444\u50cf\u5934\uff0c\u5e76\u5f00\u542fsocket\u670d\u52a1\u3002 python3 virtual_LED.py \u63d0\u793a \u5efa\u8bae\u5c06\u5176\u5b58\u4e3awindows \u7684 bat \u6587\u4ef6\uff0c\u53cc\u51fb\u76f4\u63a5\u8fd0\u884c\u3002\u8be5\u811a\u672c\u8fd8\u517c\u5177\u865a\u62dfLED\u989c\u8272\u70b9\u4eae\u7684\u529f\u80fd\uff0c\u53ef\u7528\u4e8e\u89c6\u9891\u4e8b\u4ef6\u6253\u6807\uff0c\u4f8b\u5982\u7528\u4e8e\u5149\u9057\u4f20Laser\u7684\u89e6\u53d1\u4e8b\u4ef6\u6253\u6807\u3002\u8be6\u7ec6\u53ef\u53c2\u8003 \u3010#7\u3011 GUI \u7684\u4ee3\u7801\u3002 \u6ce8\u610f \u9700\u8981\u81ea\u884c\u5b89\u88c5\u4f9d\u8d56\u5e93\u3002\u8ba9DAQ PC\u7684\u9632\u706b\u5899\u5f00\u653e 20173\u3002 2. \u66f4\u65b0\u4ee3\u7801\u4e2d\u7684\u76f8\u673a\u548c\u5927\u9f20\u6a21\u578b \u9700\u8981\u7528\u6237\u63d0\u4f9b\u6700\u65b0\u7684\u591a\u76f8\u673a\u6a21\u578b\u6587\u4ef6\u548c\u5927\u9f20\u793e\u4ea4\u5173\u952e\u70b9\u6a21\u578b\u6587\u4ef6\uff0c\u5e76\u66f4\u65b0\u5230\u4ee3\u7801\u4e2d\u3002\u524d\u8005\u7528\u4e8e3D\u91cd\u6784\uff1b\u540e\u8005\u7528\u4e8e\u8ba1\u7b97\u76f8\u540c\u5e74\u9f84\u5927\u9f20\u7684\u4f53\u957f\uff0c\u4fbf\u4e8e\u884c\u4e3a\u7279\u5f81\u5f52\u4e00\u5316\u3002\u901a\u5e38\uff0c \u5927\u9f20\u793e\u4ea4\u5173\u952e\u70b9\u6a21\u578b \u6587\u4ef6\u5305\u542b\u4e86 \u591a\u76f8\u673a\u6a21\u578b \uff0c\u6240\u4ee5\u8ba9\u591a\u76f8\u673a\u6a21\u578b\u7b49\u4e8e \u5927\u9f20\u793e\u4ea4\u5173\u952e\u70b9\u6a21\u578b \u5373\u53ef\u3002 \u4fee\u6539\u4e0b\u9762\u6587\u4ef6\u7684 lilab/label_live/usv_yolo_seg_dannce_unit_test.py \u4e2d\u7684 CALIBPKL \u4e3a\u591a\u76f8\u673a\u6a21\u578b\u8def\u5f84\uff0c model_smooth_matcalibpkl \u4e3a\u5927\u9f20\u793e\u4ea4\u5173\u952e\u70b9\u6a21\u578b\u8def\u5f84\u3002 # PATH_TO_LILAB/lilab/label_live/usv_yolo_seg_dannce_unit_test.py CALIBPKL = '/mnt/liying.cibr.ac.cn_Data_Temp_ZZC2/2506batch-chr2/test/ball/2025-06-13_10-16-58_ball.calibpkl' model_smooth_matcalibpkl = '/DATA/zhongzhenchao/2501chr2-shank3/all400p/2025-01-05_15-04-37_l7_sm1_pm6.smoothed_foot.matcalibpkl' model_smooth_matcalibpkl = CALIBPKL = '/a/b/c.matcalibpkl' 3. \u542f\u52a8\u7ed3\u679c\u670d\u52a1\u5668\u5b88\u62a4\u8fdb\u7a0b source activate mmdet # activate the conda environment python -m lilab.label_live.socketServer \u6ce8\u610f \u6ce8\u610fCloud Server\u9632\u706b\u5899\uff0c\u5f00\u653e8002\u7aef\u53e3\u3002\u5982\u679c\u51fa\u73b0\u7aef\u53e3\u88ab\u5360\u7528\u7684\u60c5\u51b5\uff0c\u5f80\u5f80\u662f\u56e0\u4e3a\u4e0a\u4e00\u4e2aPython\u7a0b\u5e8f\u672a\u6b63\u5e38\u5173\u95ed\u3002\u8bf7\u5148\u5173\u95ed\u5360\u7528\u8be5\u7aef\u53e3\u7684\u7a0b\u5e8f\uff0c\u6216\u6267\u884c lsof -i:8002 \u67e5\u770b\u5360\u7528\u8be5\u7aef\u53e3\u7684\u8fdb\u7a0b\uff0c\u7136\u540ekill\u6389\u8be5\u8fdb\u7a0b\uff08 kill -9 \u8fdb\u7a0b\u53f7 \uff09\u3002\u7a0d\u7b4910\u79d2\uff0c\u91cd\u542f\u8be5\u7a0b\u5e8f\u3002\u591a\u6b21\u5c1d\u8bd5\u3002 4. \u542f\u52a8\u5a92\u4f53\u670d\u52a1\u5668\u5b88\u62a4\u8fdb\u7a0b Mediamtx \u5728Cloud Server\u4e0a\u542f\u52a8Mediamtx\uff0c\u7528\u4e8e\u63a5\u6536OBS\u7684\u63a8\u6d41\uff0c\u5e76\u8f6c\u53d1\u7ed9\u5ba2\u6237\u7aef\u3002 docker run --rm -it -p 8554 :8554 bluenviron/mediamtx \u6ce8\u610f \u6ce8\u610fCloud Server\u9632\u706b\u5899\uff0c\u5f00\u653e8554\u7aef\u53e3\u3002 5. \u542f\u52a8 OBS \u89c6\u9891\u6d41 \u5728DAQ PC\u4e0a\u542f\u52a8OBS\uff0c\u5e76\u63a8\u6d41\u5230Cloud Server\u7684Mediamtx\u3002 \u6211\u5df2\u7ecf\u914d\u7f6e\u597dOBS\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u7b80\u4fbf\u64cd\u4f5c\u542f\u52a8\u63a8\u6d41\u914d\u7f6e\uff1a \u9009\u62e9\uff0c\u83dc\u5355>\u914d\u7f6e\u6587\u4ef6> Social-seq-live\u63a8\u6d41 \u9009\u62e9\uff0c\u83dc\u5355>\u573a\u666f\u96c6\u5408> Social-seq-live-push \u7136\u540e\uff0c\u70b9\u51fb \"\u5f00\u59cb\u5f55\u5236\"\u6309\u94ae\uff08\u6ce8\u610f\u4e0d\u662f\u201c\u5f00\u59cb\u76f4\u64ad\u201d\uff09\uff0c\u8fdb\u884c\u63a8\u6d41\u300220\u79d2\u5185\u4e0d\u5f39\u51fa\u9519\u8bef\u63d0\u793a\uff0c\u8868\u793a\u63a8\u6d41\u6210\u529f\u3002 \u5bf9\u4e8e\u65b0\u7684DAQ PC\uff0c\u9700\u8981\u91cd\u65b0\u914d\u7f6eOBS\uff0c\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a \u63d0\u793a \u5206\u8fa8\u7387\u548c\u7f16\u7801\u65b9\u5f0f\u662f\u5f71\u54cd\u63a8\u6d41\u5ef6\u8fdf\u7684\u91cd\u8981\u53c2\u6570\uff0c\u5c24\u5176\u662f\u9879\u76ee\u76843840x2400\u662f\u9ad8\u5206\u8fa8\u7387\u3002\u8fd9\u5957RTSP\u53c2\u6570\u8bbe\u7f6e\uff0c\u662f\u7ecf\u8fc7\u591a\u79cd\u6d4b\u8bd5\uff0c\u5ef6\u8fdf\u4f4e\uff0c\u753b\u8d28\u597d\u7684\u53c2\u6570\u3002\u5176\u5b83\u89c6\u9891\u63a8\u6d41\u7684\u9879\u76ee\uff0c\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e2a\u53c2\u6570\u8bbe\u7f6e\u3002 \u6ce8\u610f \u6ce8\u610fOBS\u7684\u63a8\u6d41\u5730\u5740\uff0c\u9700\u8981\u586b\u5199Cloud Server\u7684IP\u5730\u5740\uff0c\u5e94\u8be5\u662f rtsp://10.50.60.6:8554/mystream_9cam \u3002\u53ef\u4ee5\u901a\u8fc7 VLC \u6216 ffplay \u7b49\u5de5\u5177\uff0c\u6d4b\u8bd5\u662f\u5426\u80fd\u591f\u6b63\u5e38\u64ad\u653e\u8be5\u6d41\u3002\u7535\u8111\u7684\u6027\u80fd\u51b3\u5b9a\u4e86\u63a8\u6d41\u7684\u6d41\u7545\u5ea6\uff0c\u5982\u679c\u7535\u8111\u6027\u80fd\u8f83\u5dee\uff0c\u53ef\u80fd\u63a8\u6d41\u4e0d\u6d41\u7545\uff0c\u6216\u8005\u51fa\u73b0\u5361\u987f\u73b0\u8c61\u3002\u53e6\u5916\uff0c\u7801\u7387\uff08bitrate\uff09\u9700\u8981\u8bbe\u4f4e 8Mbps\uff0c\u5426\u5219\u63a8\u6d41\u5ef6\u8fdf\u9ad8\u3002 6. \u542f\u52a8\u884c\u4e3a\u8bc6\u522b\u6d41\u6c34\u7ebf\u4ee3\u7801 \u5728Cloud Server\u4e0a\u542f\u52a8\u884c\u4e3a\u8bc6\u522b\u7a0b\u5e8f\uff0c\u7528\u4e8e\u63a5\u6536OBS\u7684\u63a8\u6d41\uff0c\u5e76\u8bc6\u522b\u884c\u4e3a\uff0c\u5c06\u8bc6\u522b\u7ed3\u679c\u6807\u7b7e\uff08Syllable ID\uff09\u5b58\u653e\u5230 Result server daemon \u4e2d\u3002 source activate mmdet # activate the conda environment PATH = /usr/bin: $PATH python -m lilab.label_live.usv_yolo_seg_dannce_unit_test \u6ce8\u610f \u6ce8\u610f\u67e5\u770b\u662f\u5426\u6709\u62a5\u9519\u4fe1\u606f\u3002\u786e\u4fddOBS\u5df2\u7ecf\u6b63\u5e38\u63a8\u6d41\uff0c\u5e76\u4e14\u63a8\u6d41\u5730\u5740\u6b63\u786e\u3002 \u6ce8\u610f \u68c0\u67e5\u7ec8\u7aef\u8f93\u8fd0\u884c\u5e27\u7387\uff0830fps\uff09\u548c\u5ef6\u8fdf(<10\u5e27)\u3002\u663e\u793aiteration \u5e94\u8be5\u7ea6\u4e3a 30its/s\uff0c\u5e76\u4e14\u5ef6\u8fdf\u5e27\u6570\u5e94\u8be5\u57286-10\u4ee5\u5185\u3002\u592a\u9ad8\u7684\u5ef6\u8fdf\u5e27\uff08>30\u5e27\uff09\uff0c\u5bfc\u81f4\u95ed\u73af\u523a\u6fc0\u7cbe\u5ea6\u7684\u4e25\u91cd\u4e0b\u964d\u3002\u7ecf\u9a8c\u539f\u56e0\u662f 1.DAQ PC\u6027\u80fd\u592a\u5dee\uff0c\u9700\u8981\u91cd\u542fOBS\u8f6f\u4ef6\uff08\u901a\u5e38\uff09\uff1b\u6216\u80052 \u662f\u6709\u4eba\u5728\u4f7f\u7528Cloud Server\uff0c\u62a2\u5360\u4e86CPU\u548cGPU\u8d44\u6e90\uff0c\u5219\u6e05\u7a7a\u8fd9\u4e9b\u7528\u6237\u7684\u8d44\u6e90\uff08\u63d0\u524d\u7ec4\u5185\u6c9f\u901a\uff09\u3002 7. \u542f\u52a8 Social-seq-live GUI \u53bbgithub \u4e0a\u4e0b\u8f7d Social-seq-live \u7684\u4ee3\u7801\uff0c\u5e76\u5b89\u88c5\u4f9d\u8d56\u5305\u3002 python main.py # GUI\u7a0b\u5e8f\uff0c\u201c\u95ed\u73af\u63a7\u5236\u201d\u5b9e\u9a8c\u7ec4 python main_exclude.py # GUI\u7a0b\u5e8f\uff0c\u201c\u5f00\u73af\u63a7\u5236\u201d\u5bf9\u7167\u7ec4 \u6ce8\u610f \u6ce8\u610f\u201c\u95ed\u73af\u63a7\u5236\u201d\u5b9e\u9a8c\u7ec4\u548c\u201c\u5f00\u73af\u63a7\u5236\u201d\u5bf9\u7167\u7ec4\u7684GUI\u7a0b\u5e8f\u4e0d\u540c\u3002\u64cd\u4f5c\u6b65\u9aa4\u76f8\u540c\u3002\u95ed\u73af\u63a7\u5236\uff0c\u5728\u8bc6\u522b\u5230\u884c\u4e3a\u540e\uff0c\u81ea\u52a8\u542f\u52a8\u523a\u6fc0\u3002\u5f00\u73af\u63a7\u5236\uff0c\u9700\u8981\u6392\u9664\u76ee\u6807\u884c\u4e3a\uff0c\u968f\u673a\u7ed9\u523a\u6fc0\u3002 \u63a5\u7740\u9009\u62e9\u5bf9\u5e94\u7684GUI\u7a0b\u5e8f\uff0c\u5e76\u542f\u52a8\u3002\u8fde\u63a5 Cloud Server \u548c Arduino \u540e\uff0c\u5373\u81ea\u52a8\u5f00\u59cb\u884c\u4e3a\u8bc6\u522b\u5e76\u5149\u9057\u4f20\u63a7\u5236\u3002 \u5728GUI\u4e2d\uff0c\u52fe\u9009\u5408\u9002\u7684\u76ee\u6807\u884c\u4e3a\uff0c\u4f8b\u5982 \"pouncing\", \"pinning\", \"chasing\" \u7b49\u3002 \u586b\u5165 Cloud Server \u7684IP\u5730\u5740\uff0c\u70b9\u51fb\u201cConnect\u201d\u6309\u94ae\uff0c\u8fde\u63a5\u5230Result server daemon\u3002 \u9009\u62e9 Arduino \u4e32\u53e3\uff0c\u5e76\u70b9\u51fb\u201cConnect\u201d\u6309\u94ae\uff0c\u8fde\u63a5\u5230Arduino\u3002\uff08 Arduino \u9700\u8981\u521d\u59cb\u5316\u70e7\u5f55\u4ee3\u7801\uff0c\u53c2\u8003\u3010#9\u3011 \uff09 8. \u542f\u52a8 ffmpeg \u4ee3\u7801\u4ee5\u5c06\u89c6\u9891\u8f6c\u50a8\u5230\u6587\u4ef6 \u5728\u52a8\u7269\u5b9e\u9a8c\u5f00\u59cb\u540e\uff0c\u9700\u8981\u8bb0\u5f55\u89c6\u9891\u3002\u7531\u4e8e\u539f\u5148\u7684OBS \u5f55\u50cf\u529f\u80fd\u5df2\u7ecf\u88ab\u5360\u7528\uff0c\u56e0\u6b64\u53ea\u80fd\u5728Cloud Server \u4e0a\u8bb0\u5f55\u89c6\u9891\u3002 \u5c06\u4e0b\u9762\u7684\u4ee3\u7801\u4fdd\u5b58\u4e3a Cloud Server \u7684 RT_record.sh \u6587\u4ef6\u3002\u6bcf\u6b21\u52a8\u7269\u5b9e\u9a8c\u5f00\u59cb\u540e\uff0c\u5e76\u8fd0\u884c\u5b83\u3002\u5b83\u4f1a\u5728 /DATA/chenxinfeng \u76ee\u5f55\u4e0b\uff0c\u4fdd\u5b58\u4e00\u4e2a\u89c6\u9891\u6587\u4ef6\u3002\u6587\u4ef6\u540d\u662f\u5f53\u524d\u65f6\u95f4\uff0c\u4f8b\u5982 2025-01-01_12-00-00.mp4\u3002 #!/bin/bash # \u4fdd\u5b58\u4e3a RT_record \u6587\u4ef6 filename = ` date --date = '2.2 seconds' + \"%Y-%m-%d_%H-%M-%S\" ` /home/liying_lab/chenxinfeng/.conda/envs/mmdet/bin/ffmpeg.bak -rtsp_transport tcp -t 00 :15:06 -i rtsp://10.50.60.6:8554/mystream_9cam -ss 00 :00:02.2 -c:v hevc_nvenc -b:v 10M -maxrate:v 20M -preset:v p4 /DATA/chenxinfeng/ ${ filename } .mp4 9. Arduino \u6fc0\u5149\u8109\u51b2 \u53bbgithub \u4e0a\u4e0b\u8f7d Arduino Laser pulse \u7684\u4ee3\u7801\uff0c\u5e76\u8fdb\u884c\u70e7\u5f55\u3002 const int PinNum = 6 ; // the number of the LED pin const float duration = 0 .5 ; // time for running, unit = sec. const float Hz = 40 ; // frequency, unit = Hz. const float Duty = 0 .2 ; // duty, unit = 0 ~1. \u8be5\u4ee3\u7801\u8868\u793aArduino \u7684 D6 \u5f15\u811a\uff0c\u8fde\u63a5\u5230\u6fc0\u5149\u5668\u7684\u89e6\u53d1\u5f15\u811a\u3002\u5355\u8bcd\u523a\u6fc0\u65f6\u95f4\u4e3a 0.5 \u79d2\uff0c\u6fc0\u5149\u9891\u7387\u4e3a 40Hz\uff0c\u5360\u7a7a\u6bd4\u4e3a 0.2 \uff085ms\uff09\u3002 \u5173\u95ed OBS \u548c GUI \u5728\u5b9e\u9a8c\u7ed3\u675f\u540e\uff0c\u590d\u539f OBS \u7684\u914d\u7f6e\uff0c\u5173\u95edOBS\u8f6f\u4ef6\uff1b\u5173\u95edSocial seq live GUI\u3002\u5728Cloude Server\u4e0a\uff0c\u5173\u95ed pipeline \u3002","title":"\u4ee3\u7801\u6d41\u7a0b"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#_1","text":"\u5f00\u53d1\u8005: Chenxinfeng, update 2025-08-16 \u95ed\u73af\u884c\u4e3a\u63a7\u5236\u7684\u4ee3\u7801\u6d41\u7a0b\u6897\u6982\u5982\u4e0b: \u4ee5\u4e0b\u662f\u5bf9\u5e94\u7684\u4ee3\u7801\u64cd\u4f5c\uff1a","title":"\u4ee3\u7801\u6d41\u7a0b"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#1","text":"\u5728DAQ\u7684PC\u4e0a\u8fdb\u884c\u64cd\u4f5c\uff0cDAQ\u5b89\u88c5\u7684\u662fWindows\u7cfb\u7edf\u3002OBS Studio 29.1 \u7248\u672c\u3002OBS \u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u865a\u62df\u6444\u50cf\u5934(\"OBS Virtual Camera\")\uff0cpython\u4ee3\u7801\u4f1a\u5f80\u8fd9\u4e2a\u6444\u50cf\u5934\u5e27\u8f93\u51fa\u65f6\u95f4\u7801\uff08\u4f8b\u5982\uff0c163\uff09\u3002\u65f6\u95f4\u7801\u7684\u6570\u503c\u7531PC\u7684\u65f6\u949f\u51b3\u5b9a\uff0c\u6bcf33ms\u66f4\u65b0\u4e00\u6b21\uff0830fps \u5339\u914d\u89c6\u9891\u5e27\u7387\uff09\uff0c\u5f53\u524d\u65f6\u949f\u7684\u6570\u503c\u4e5f\u4f1a\u5b58\u50a8\u5230 10.50.7.109:20173 \u7684\u670d\u52a1\u5668\u4e0a\uff0c\u4f9b\u5176\u4ed6\u8bbe\u5907\u8bbf\u95ee\uff0c\u4ee5\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u7801\u3002 \u5728github\u4e0a\u4e0b\u8f7d\uff0c virtual_LED.py \ud83d\udd17 . \u5728\u7ec8\u7aef\u6267\u884c\u8be5\u811a\u672c\uff0c\u542f\u52a8\u865a\u62df\u6444\u50cf\u5934\uff0c\u5e76\u5f00\u542fsocket\u670d\u52a1\u3002 python3 virtual_LED.py \u63d0\u793a \u5efa\u8bae\u5c06\u5176\u5b58\u4e3awindows \u7684 bat \u6587\u4ef6\uff0c\u53cc\u51fb\u76f4\u63a5\u8fd0\u884c\u3002\u8be5\u811a\u672c\u8fd8\u517c\u5177\u865a\u62dfLED\u989c\u8272\u70b9\u4eae\u7684\u529f\u80fd\uff0c\u53ef\u7528\u4e8e\u89c6\u9891\u4e8b\u4ef6\u6253\u6807\uff0c\u4f8b\u5982\u7528\u4e8e\u5149\u9057\u4f20Laser\u7684\u89e6\u53d1\u4e8b\u4ef6\u6253\u6807\u3002\u8be6\u7ec6\u53ef\u53c2\u8003 \u3010#7\u3011 GUI \u7684\u4ee3\u7801\u3002 \u6ce8\u610f \u9700\u8981\u81ea\u884c\u5b89\u88c5\u4f9d\u8d56\u5e93\u3002\u8ba9DAQ PC\u7684\u9632\u706b\u5899\u5f00\u653e 20173\u3002","title":"1. \u542f\u52a8\u865a\u62df\u6444\u50cf\u5934\u8fdb\u884c\u65f6\u95f4\u6233\u6807\u8bb0"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#2","text":"\u9700\u8981\u7528\u6237\u63d0\u4f9b\u6700\u65b0\u7684\u591a\u76f8\u673a\u6a21\u578b\u6587\u4ef6\u548c\u5927\u9f20\u793e\u4ea4\u5173\u952e\u70b9\u6a21\u578b\u6587\u4ef6\uff0c\u5e76\u66f4\u65b0\u5230\u4ee3\u7801\u4e2d\u3002\u524d\u8005\u7528\u4e8e3D\u91cd\u6784\uff1b\u540e\u8005\u7528\u4e8e\u8ba1\u7b97\u76f8\u540c\u5e74\u9f84\u5927\u9f20\u7684\u4f53\u957f\uff0c\u4fbf\u4e8e\u884c\u4e3a\u7279\u5f81\u5f52\u4e00\u5316\u3002\u901a\u5e38\uff0c \u5927\u9f20\u793e\u4ea4\u5173\u952e\u70b9\u6a21\u578b \u6587\u4ef6\u5305\u542b\u4e86 \u591a\u76f8\u673a\u6a21\u578b \uff0c\u6240\u4ee5\u8ba9\u591a\u76f8\u673a\u6a21\u578b\u7b49\u4e8e \u5927\u9f20\u793e\u4ea4\u5173\u952e\u70b9\u6a21\u578b \u5373\u53ef\u3002 \u4fee\u6539\u4e0b\u9762\u6587\u4ef6\u7684 lilab/label_live/usv_yolo_seg_dannce_unit_test.py \u4e2d\u7684 CALIBPKL \u4e3a\u591a\u76f8\u673a\u6a21\u578b\u8def\u5f84\uff0c model_smooth_matcalibpkl \u4e3a\u5927\u9f20\u793e\u4ea4\u5173\u952e\u70b9\u6a21\u578b\u8def\u5f84\u3002 # PATH_TO_LILAB/lilab/label_live/usv_yolo_seg_dannce_unit_test.py CALIBPKL = '/mnt/liying.cibr.ac.cn_Data_Temp_ZZC2/2506batch-chr2/test/ball/2025-06-13_10-16-58_ball.calibpkl' model_smooth_matcalibpkl = '/DATA/zhongzhenchao/2501chr2-shank3/all400p/2025-01-05_15-04-37_l7_sm1_pm6.smoothed_foot.matcalibpkl' model_smooth_matcalibpkl = CALIBPKL = '/a/b/c.matcalibpkl'","title":"2. \u66f4\u65b0\u4ee3\u7801\u4e2d\u7684\u76f8\u673a\u548c\u5927\u9f20\u6a21\u578b"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#3","text":"source activate mmdet # activate the conda environment python -m lilab.label_live.socketServer \u6ce8\u610f \u6ce8\u610fCloud Server\u9632\u706b\u5899\uff0c\u5f00\u653e8002\u7aef\u53e3\u3002\u5982\u679c\u51fa\u73b0\u7aef\u53e3\u88ab\u5360\u7528\u7684\u60c5\u51b5\uff0c\u5f80\u5f80\u662f\u56e0\u4e3a\u4e0a\u4e00\u4e2aPython\u7a0b\u5e8f\u672a\u6b63\u5e38\u5173\u95ed\u3002\u8bf7\u5148\u5173\u95ed\u5360\u7528\u8be5\u7aef\u53e3\u7684\u7a0b\u5e8f\uff0c\u6216\u6267\u884c lsof -i:8002 \u67e5\u770b\u5360\u7528\u8be5\u7aef\u53e3\u7684\u8fdb\u7a0b\uff0c\u7136\u540ekill\u6389\u8be5\u8fdb\u7a0b\uff08 kill -9 \u8fdb\u7a0b\u53f7 \uff09\u3002\u7a0d\u7b4910\u79d2\uff0c\u91cd\u542f\u8be5\u7a0b\u5e8f\u3002\u591a\u6b21\u5c1d\u8bd5\u3002","title":"3. \u542f\u52a8\u7ed3\u679c\u670d\u52a1\u5668\u5b88\u62a4\u8fdb\u7a0b"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#4-mediamtx","text":"\u5728Cloud Server\u4e0a\u542f\u52a8Mediamtx\uff0c\u7528\u4e8e\u63a5\u6536OBS\u7684\u63a8\u6d41\uff0c\u5e76\u8f6c\u53d1\u7ed9\u5ba2\u6237\u7aef\u3002 docker run --rm -it -p 8554 :8554 bluenviron/mediamtx \u6ce8\u610f \u6ce8\u610fCloud Server\u9632\u706b\u5899\uff0c\u5f00\u653e8554\u7aef\u53e3\u3002","title":"4. \u542f\u52a8\u5a92\u4f53\u670d\u52a1\u5668\u5b88\u62a4\u8fdb\u7a0b Mediamtx"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#5-obs","text":"\u5728DAQ PC\u4e0a\u542f\u52a8OBS\uff0c\u5e76\u63a8\u6d41\u5230Cloud Server\u7684Mediamtx\u3002 \u6211\u5df2\u7ecf\u914d\u7f6e\u597dOBS\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u7b80\u4fbf\u64cd\u4f5c\u542f\u52a8\u63a8\u6d41\u914d\u7f6e\uff1a \u9009\u62e9\uff0c\u83dc\u5355>\u914d\u7f6e\u6587\u4ef6> Social-seq-live\u63a8\u6d41 \u9009\u62e9\uff0c\u83dc\u5355>\u573a\u666f\u96c6\u5408> Social-seq-live-push \u7136\u540e\uff0c\u70b9\u51fb \"\u5f00\u59cb\u5f55\u5236\"\u6309\u94ae\uff08\u6ce8\u610f\u4e0d\u662f\u201c\u5f00\u59cb\u76f4\u64ad\u201d\uff09\uff0c\u8fdb\u884c\u63a8\u6d41\u300220\u79d2\u5185\u4e0d\u5f39\u51fa\u9519\u8bef\u63d0\u793a\uff0c\u8868\u793a\u63a8\u6d41\u6210\u529f\u3002 \u5bf9\u4e8e\u65b0\u7684DAQ PC\uff0c\u9700\u8981\u91cd\u65b0\u914d\u7f6eOBS\uff0c\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a \u63d0\u793a \u5206\u8fa8\u7387\u548c\u7f16\u7801\u65b9\u5f0f\u662f\u5f71\u54cd\u63a8\u6d41\u5ef6\u8fdf\u7684\u91cd\u8981\u53c2\u6570\uff0c\u5c24\u5176\u662f\u9879\u76ee\u76843840x2400\u662f\u9ad8\u5206\u8fa8\u7387\u3002\u8fd9\u5957RTSP\u53c2\u6570\u8bbe\u7f6e\uff0c\u662f\u7ecf\u8fc7\u591a\u79cd\u6d4b\u8bd5\uff0c\u5ef6\u8fdf\u4f4e\uff0c\u753b\u8d28\u597d\u7684\u53c2\u6570\u3002\u5176\u5b83\u89c6\u9891\u63a8\u6d41\u7684\u9879\u76ee\uff0c\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e2a\u53c2\u6570\u8bbe\u7f6e\u3002 \u6ce8\u610f \u6ce8\u610fOBS\u7684\u63a8\u6d41\u5730\u5740\uff0c\u9700\u8981\u586b\u5199Cloud Server\u7684IP\u5730\u5740\uff0c\u5e94\u8be5\u662f rtsp://10.50.60.6:8554/mystream_9cam \u3002\u53ef\u4ee5\u901a\u8fc7 VLC \u6216 ffplay \u7b49\u5de5\u5177\uff0c\u6d4b\u8bd5\u662f\u5426\u80fd\u591f\u6b63\u5e38\u64ad\u653e\u8be5\u6d41\u3002\u7535\u8111\u7684\u6027\u80fd\u51b3\u5b9a\u4e86\u63a8\u6d41\u7684\u6d41\u7545\u5ea6\uff0c\u5982\u679c\u7535\u8111\u6027\u80fd\u8f83\u5dee\uff0c\u53ef\u80fd\u63a8\u6d41\u4e0d\u6d41\u7545\uff0c\u6216\u8005\u51fa\u73b0\u5361\u987f\u73b0\u8c61\u3002\u53e6\u5916\uff0c\u7801\u7387\uff08bitrate\uff09\u9700\u8981\u8bbe\u4f4e 8Mbps\uff0c\u5426\u5219\u63a8\u6d41\u5ef6\u8fdf\u9ad8\u3002","title":"5. \u542f\u52a8 OBS \u89c6\u9891\u6d41"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#6","text":"\u5728Cloud Server\u4e0a\u542f\u52a8\u884c\u4e3a\u8bc6\u522b\u7a0b\u5e8f\uff0c\u7528\u4e8e\u63a5\u6536OBS\u7684\u63a8\u6d41\uff0c\u5e76\u8bc6\u522b\u884c\u4e3a\uff0c\u5c06\u8bc6\u522b\u7ed3\u679c\u6807\u7b7e\uff08Syllable ID\uff09\u5b58\u653e\u5230 Result server daemon \u4e2d\u3002 source activate mmdet # activate the conda environment PATH = /usr/bin: $PATH python -m lilab.label_live.usv_yolo_seg_dannce_unit_test \u6ce8\u610f \u6ce8\u610f\u67e5\u770b\u662f\u5426\u6709\u62a5\u9519\u4fe1\u606f\u3002\u786e\u4fddOBS\u5df2\u7ecf\u6b63\u5e38\u63a8\u6d41\uff0c\u5e76\u4e14\u63a8\u6d41\u5730\u5740\u6b63\u786e\u3002 \u6ce8\u610f \u68c0\u67e5\u7ec8\u7aef\u8f93\u8fd0\u884c\u5e27\u7387\uff0830fps\uff09\u548c\u5ef6\u8fdf(<10\u5e27)\u3002\u663e\u793aiteration \u5e94\u8be5\u7ea6\u4e3a 30its/s\uff0c\u5e76\u4e14\u5ef6\u8fdf\u5e27\u6570\u5e94\u8be5\u57286-10\u4ee5\u5185\u3002\u592a\u9ad8\u7684\u5ef6\u8fdf\u5e27\uff08>30\u5e27\uff09\uff0c\u5bfc\u81f4\u95ed\u73af\u523a\u6fc0\u7cbe\u5ea6\u7684\u4e25\u91cd\u4e0b\u964d\u3002\u7ecf\u9a8c\u539f\u56e0\u662f 1.DAQ PC\u6027\u80fd\u592a\u5dee\uff0c\u9700\u8981\u91cd\u542fOBS\u8f6f\u4ef6\uff08\u901a\u5e38\uff09\uff1b\u6216\u80052 \u662f\u6709\u4eba\u5728\u4f7f\u7528Cloud Server\uff0c\u62a2\u5360\u4e86CPU\u548cGPU\u8d44\u6e90\uff0c\u5219\u6e05\u7a7a\u8fd9\u4e9b\u7528\u6237\u7684\u8d44\u6e90\uff08\u63d0\u524d\u7ec4\u5185\u6c9f\u901a\uff09\u3002","title":"6. \u542f\u52a8\u884c\u4e3a\u8bc6\u522b\u6d41\u6c34\u7ebf\u4ee3\u7801"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#7-social-seq-live-gui","text":"\u53bbgithub \u4e0a\u4e0b\u8f7d Social-seq-live \u7684\u4ee3\u7801\uff0c\u5e76\u5b89\u88c5\u4f9d\u8d56\u5305\u3002 python main.py # GUI\u7a0b\u5e8f\uff0c\u201c\u95ed\u73af\u63a7\u5236\u201d\u5b9e\u9a8c\u7ec4 python main_exclude.py # GUI\u7a0b\u5e8f\uff0c\u201c\u5f00\u73af\u63a7\u5236\u201d\u5bf9\u7167\u7ec4 \u6ce8\u610f \u6ce8\u610f\u201c\u95ed\u73af\u63a7\u5236\u201d\u5b9e\u9a8c\u7ec4\u548c\u201c\u5f00\u73af\u63a7\u5236\u201d\u5bf9\u7167\u7ec4\u7684GUI\u7a0b\u5e8f\u4e0d\u540c\u3002\u64cd\u4f5c\u6b65\u9aa4\u76f8\u540c\u3002\u95ed\u73af\u63a7\u5236\uff0c\u5728\u8bc6\u522b\u5230\u884c\u4e3a\u540e\uff0c\u81ea\u52a8\u542f\u52a8\u523a\u6fc0\u3002\u5f00\u73af\u63a7\u5236\uff0c\u9700\u8981\u6392\u9664\u76ee\u6807\u884c\u4e3a\uff0c\u968f\u673a\u7ed9\u523a\u6fc0\u3002 \u63a5\u7740\u9009\u62e9\u5bf9\u5e94\u7684GUI\u7a0b\u5e8f\uff0c\u5e76\u542f\u52a8\u3002\u8fde\u63a5 Cloud Server \u548c Arduino \u540e\uff0c\u5373\u81ea\u52a8\u5f00\u59cb\u884c\u4e3a\u8bc6\u522b\u5e76\u5149\u9057\u4f20\u63a7\u5236\u3002 \u5728GUI\u4e2d\uff0c\u52fe\u9009\u5408\u9002\u7684\u76ee\u6807\u884c\u4e3a\uff0c\u4f8b\u5982 \"pouncing\", \"pinning\", \"chasing\" \u7b49\u3002 \u586b\u5165 Cloud Server \u7684IP\u5730\u5740\uff0c\u70b9\u51fb\u201cConnect\u201d\u6309\u94ae\uff0c\u8fde\u63a5\u5230Result server daemon\u3002 \u9009\u62e9 Arduino \u4e32\u53e3\uff0c\u5e76\u70b9\u51fb\u201cConnect\u201d\u6309\u94ae\uff0c\u8fde\u63a5\u5230Arduino\u3002\uff08 Arduino \u9700\u8981\u521d\u59cb\u5316\u70e7\u5f55\u4ee3\u7801\uff0c\u53c2\u8003\u3010#9\u3011 \uff09","title":"7. \u542f\u52a8 Social-seq-live GUI"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#8-ffmpeg","text":"\u5728\u52a8\u7269\u5b9e\u9a8c\u5f00\u59cb\u540e\uff0c\u9700\u8981\u8bb0\u5f55\u89c6\u9891\u3002\u7531\u4e8e\u539f\u5148\u7684OBS \u5f55\u50cf\u529f\u80fd\u5df2\u7ecf\u88ab\u5360\u7528\uff0c\u56e0\u6b64\u53ea\u80fd\u5728Cloud Server \u4e0a\u8bb0\u5f55\u89c6\u9891\u3002 \u5c06\u4e0b\u9762\u7684\u4ee3\u7801\u4fdd\u5b58\u4e3a Cloud Server \u7684 RT_record.sh \u6587\u4ef6\u3002\u6bcf\u6b21\u52a8\u7269\u5b9e\u9a8c\u5f00\u59cb\u540e\uff0c\u5e76\u8fd0\u884c\u5b83\u3002\u5b83\u4f1a\u5728 /DATA/chenxinfeng \u76ee\u5f55\u4e0b\uff0c\u4fdd\u5b58\u4e00\u4e2a\u89c6\u9891\u6587\u4ef6\u3002\u6587\u4ef6\u540d\u662f\u5f53\u524d\u65f6\u95f4\uff0c\u4f8b\u5982 2025-01-01_12-00-00.mp4\u3002 #!/bin/bash # \u4fdd\u5b58\u4e3a RT_record \u6587\u4ef6 filename = ` date --date = '2.2 seconds' + \"%Y-%m-%d_%H-%M-%S\" ` /home/liying_lab/chenxinfeng/.conda/envs/mmdet/bin/ffmpeg.bak -rtsp_transport tcp -t 00 :15:06 -i rtsp://10.50.60.6:8554/mystream_9cam -ss 00 :00:02.2 -c:v hevc_nvenc -b:v 10M -maxrate:v 20M -preset:v p4 /DATA/chenxinfeng/ ${ filename } .mp4","title":"8. \u542f\u52a8 ffmpeg \u4ee3\u7801\u4ee5\u5c06\u89c6\u9891\u8f6c\u50a8\u5230\u6587\u4ef6"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#9-arduino","text":"\u53bbgithub \u4e0a\u4e0b\u8f7d Arduino Laser pulse \u7684\u4ee3\u7801\uff0c\u5e76\u8fdb\u884c\u70e7\u5f55\u3002 const int PinNum = 6 ; // the number of the LED pin const float duration = 0 .5 ; // time for running, unit = sec. const float Hz = 40 ; // frequency, unit = Hz. const float Duty = 0 .2 ; // duty, unit = 0 ~1. \u8be5\u4ee3\u7801\u8868\u793aArduino \u7684 D6 \u5f15\u811a\uff0c\u8fde\u63a5\u5230\u6fc0\u5149\u5668\u7684\u89e6\u53d1\u5f15\u811a\u3002\u5355\u8bcd\u523a\u6fc0\u65f6\u95f4\u4e3a 0.5 \u79d2\uff0c\u6fc0\u5149\u9891\u7387\u4e3a 40Hz\uff0c\u5360\u7a7a\u6bd4\u4e3a 0.2 \uff085ms\uff09\u3002","title":"9. Arduino \u6fc0\u5149\u8109\u51b2"},{"location":"%E9%97%AD%E7%8E%AF%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/process/#obs-gui","text":"\u5728\u5b9e\u9a8c\u7ed3\u675f\u540e\uff0c\u590d\u539f OBS \u7684\u914d\u7f6e\uff0c\u5173\u95edOBS\u8f6f\u4ef6\uff1b\u5173\u95edSocial seq live GUI\u3002\u5728Cloude Server\u4e0a\uff0c\u5173\u95ed pipeline \u3002","title":"\u5173\u95ed OBS \u548c GUI"}]}